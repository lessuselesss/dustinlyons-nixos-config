This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-29T05:59:08.871Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
apps/
  aarch64-android/
    apply
    build-switch
  aarch64-darwin/
    apply
    build
    build-switch
    check-keys
    copy-keys
    create-keys
    rollback
  x86_64-darwin/
    apply
    build
    build-switch
    check-keys
    copy-keys
    create-keys
  x86_64-linux/
    apply
    build-switch
hosts/
  darwin/
    default.nix
  nix-on-droid/
    default.nix
  nixos/
    default.nix
  qubes-templatevm/
    examples/
      configuration.nix
      flake.nix
    modules/
      qubes/
        core.nix
        db.nix
        gui.nix
        networking.nix
        qrexec.nix
        sshd.nix
        updates.nix
        usb.nix
    pkgs/
      qubes-core-agent-linux/
        default.nix
      qubes-core-qrexec/
        default.nix
      qubes-core-qubesdb/
        default.nix
      qubes-core-vchan-xen/
        default.nix
      qubes-gui-agent-linux/
        default.nix
      qubes-gui-common/
        default.nix
      qubes-linux-utils/
        default.nix
      qubes-sshd/
        default.nix
      qubes-usb-proxy/
        default.nix
    profiles/
      qubes.nix
    tools/
      rpm.nix
    .git
    flake.lock
    flake.nix
    LICENSE
    README.md
modules/
  darwin/
    config/
      karabiner/
        automatic_backups/
          karabiner_20241118.json
        karabiner.json
      sketchybar/
        sketchybar.nix
      yabai/
        yabai.nix
        yabairc
    dock/
      default.nix
    casks.nix
    files.nix
    home-manager.nix
    packages.nix
    README.md
    secrets.nix
  nixos/
    config/
      polybar/
        bars.ini
        colors.ini
        config.ini
        modules.ini
        user_modules.ini
      rofi/
        colors.rasi
        confirm.rasi
        launcher.rasi
        message.rasi
        networkmenu.rasi
        powermenu.rasi
        styles.rasi
    disk-config.nix
    files.nix
    home-manager.nix
    packages.nix
    README.md
    secrets.nix
  shared/
    config/
      emacs/
        .gitignore
        config.org
        init.el
      p10k.zsh
    default.nix
    files.nix
    home-manager.nix
    packages.nix
    README.md
  nextdns.nix
overlays/
  10-feather-font.nix
  README.md
.gitignore
.gitmodules
flake.lock
flake.nix
pre-commit-test.txt
README.md
setup_script.sh

================================================================
Repository Files
================================================================

================
File: apps/aarch64-android/apply
================
#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Determine the operating system
export OS=$(uname)

# Primary network interface handling
if [[ "$OS" == "Linux" ]]; then
  if command -v ip >/dev/null 2>&1; then
    export PRIMARY_IFACE=$(ip -o -4 route show to default | awk '{print $5}')
    echo -e "${GREEN}Found primary network interface $PRIMARY_IFACE${NC}"
  fi
fi

# Skip network interface handling for Android
export PRIMARY_IFACE=""

# Skip hostname and disk selection for Android
export HOST_NAME="nix-on-droid"
export BOOT_DISK=""

# ... existing _print and _prompt functions ...

ask_for_star() {
  _print "${YELLOW}Would you like to support my work by starring my GitHub repo? yes/no [yes]: ${NC}"
  local response
  read -r response
  response=${response:-yes}
  if [[ "$response" =~ ^[Yy](es)?$ ]] || [[ -z "$response" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      open "https://github.com/dustinlyons/nixos-config"
    elif [[ "$OS" == "Linux" ]] && [[ -n "$TERMUX_VERSION" ]]; then
      termux-open-url "https://github.com/dustinlyons/nixos-config"
    elif [[ "$OS" == "Linux" ]]; then
      xdg-open "https://github.com/dustinlyons/nixos-config"
    fi
  fi
}

# Check if git is available
if command -v git >/dev/null 2>&1; then
  # Fetch email and name from git config
  export GIT_EMAIL=$(git config --get user.email)
  export GIT_NAME=$(git config --get user.name)
else
  _print "${RED}Git is not available on this system.${NC}"
fi

# If git email is not found or git is not available, ask the user
if [[ -z "$GIT_EMAIL" ]]; then
  _prompt "${YELLOW}Please enter your email: ${NC}" GIT_EMAIL
fi

# If git name is not found or git is not available, ask the user
if [[ -z "$GIT_NAME" ]]; then
  _prompt "${YELLOW}Please enter your name: ${NC}" GIT_NAME
fi

if [[ -z "$GITHUB_USER" ]]; then
  _prompt "${YELLOW}Please enter your Github username: ${NC}" GITHUB_USER
fi

if [[ -z "$GITHUB_SECRETS_REPO" ]]; then
  _prompt "${YELLOW}Please enter your Github secrets repository name: ${NC}" GITHUB_SECRETS_REPO
fi

export GITHUB_USER
export GITHUB_SECRETS_REPO

select_boot_disk() {
  # Skip disk selection on Android
  if [[ -n "$TERMUX_VERSION" ]]; then
    return
  fi
  
  # Original disk selection code for other Linux systems
  local disks
  local _boot_disk
  // ... rest of existing function ...
}

# Confirmation step
confirm_details() {
  _print "${GREEN}Username: $USERNAME"
  _print "Email: $GIT_EMAIL"
  _print "Name: $GIT_NAME${NC}"
  _print "${GREEN}Secrets repository: $GITHUB_USER/$GITHUB_SECRETS_REPO${NC}"

  _prompt "${YELLOW}Is this correct? yes/no: ${NC}" choice

  case "$choice" in
    [Nn] | [Nn][Oo] ) 
      _print "${RED}Exiting script.${NC}" 
      exit 1
      ;;
    [Yy] | [Yy][Ee][Ss] ) 
      _print "${GREEN}Continuing...${NC}"
      ;;
    * ) 
      _print "${RED}Invalid option. Exiting script.${NC}" 
      exit 1
      ;;
  esac
}

# Call the confirmation function
confirm_details

# Function to replace tokens in each file
replace_tokens() {
  local file="$1"
  if [[ $(basename $1) != "apply" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      # macOS
      LC_ALL=C LANG=C sed -i '' -e "s/%USER%/$USERNAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%NAME%/$GIT_NAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%GITHUB_USER%/$GITHUB_USER/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%GITHUB_SECRETS_REPO%/$GITHUB_SECRETS_REPO/g" "$file"
    else
      # Linux or other
      sed -i -e "s/%USER%/$USERNAME/g" "$file"
      sed -i -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      sed -i -e "s/%NAME%/$GIT_NAME/g" "$file"
      sed -i -e "s/%INTERFACE%/$PRIMARY_IFACE/g" "$file"
      sed -i -e "s/%DISK%/$BOOT_DISK/g" "$file"
      sed -i -e "s/%HOST%/$HOST_NAME/g" "$file"
      sed -i -e "s/%GITHUB_USER%/$GITHUB_USER/g" "$file"
      sed -i -e "s/%GITHUB_SECRETS_REPO%/$GITHUB_SECRETS_REPO/g" "$file"
    fi
  fi
}

# Traverse directories and call replace_tokens on each Nix file
export -f replace_tokens
find . -type f -exec bash -c 'replace_tokens "$0"' {} \;

echo "$USERNAME" > /tmp/username.txt
_print "${GREEN}User $USERNAME information applied.${NC}"

================
File: apps/aarch64-android/build-switch
================
#!/bin/sh -e

VERSION=1.0

GREEN='\033[1;32m'
RED='\033[1;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

SYSTEM=$(uname -m)

case "$SYSTEM" in
  aarch64)
    FLAKE_TARGET="aarch64-android"
    ;;
  *)
    echo -e "${RED}Unsupported architecture: $SYSTEM${NC}"
    exit 1
    ;;
esac

echo -e "${YELLOW}Starting...${NC}"

# We pass SSH from user to root so root can download secrets from our private Github
sudo SSH_AUTH_SOCK=$SSH_AUTH_SOCK /run/current-system/sw/bin/nix build .#$FLAKE_TARGET $@

echo -e "${GREEN}Build complete!${NC}"

================
File: apps/aarch64-darwin/apply
================
#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Determine the operating system
export OS=$(uname)

# Primary network interface
if [[ "$OS" != "Darwin" ]]; then
  export PRIMARY_IFACE=$(ip -o -4 route show to default | awk '{print $5}')
  echo -e "${GREEN}Found primary network interface $PRIMARY_IFACE${NC}"
fi

# Custom print function
_print() {
  if [[ "$OS" == "Darwin" ]]; then
    echo -e "$1"
  else
    echo "$1"
  fi
}

# Custom prompt function
_prompt() {
  local message="$1"
  local variable="$2"

  _print "$message"
  read -r $variable
}

insert_secrets_output() {
  local pattern="outputs = { self, darwin, nix-homebrew, homebrew-bundle, homebrew-core, homebrew-cask, homebrew-services, home-manager, nixpkgs, disko, agenix } @inputs:"
  local insert_text="secrets "

  awk -v pat="$pattern" -v insert="$insert_text" '
    $0 ~ pat {
      sub(/} @inputs:/, ", " insert "} @inputs:"); # Replace the closing brace with the insert text followed by the brace
      gsub(/ ,/, ","); # Correct any spaces before commas
      print
      next
    }
    { print }
  ' flake.nix > flake.nix.tmp

  mv flake.nix.tmp flake.nix
}

insert_secrets_input() {
  # Define file path
  FILE_PATH="flake.nix"

  # Backup the original file
  cp "$FILE_PATH" "${FILE_PATH}.bak"

  # Temporary file for the text to insert
  TEMP_FILE="temp_insert.txt"

  # Write the formatted text to the temporary file
cat > "$TEMP_FILE" << 'EOF'
    secrets = {
      url = "git+ssh://git@github.com/%GITHUB_USER%/%GITHUB_SECRETS_REPO%.git";
      flake = false;
    };
EOF

  # Check if the 'secrets' block already exists
  if grep -q 'url = "git+ssh://git@github.com/%GITHUB_USER%/%GITHUB_SECRETS_REPO%.git"' "$FILE_PATH"; then
      echo "The 'secrets' block already exists in the file."
      rm "$TEMP_FILE"
      rm "${FILE_PATH}.bak"
      exit 0
  fi

  # Find the start and end line numbers of the 'disko' block
  START_LINE=$(grep -n 'disko = {' "$FILE_PATH" | head -n 1 | cut -d: -f1)
  END_LINE=$(tail -n +$START_LINE "$FILE_PATH" | grep -n '};' | head -n 1 | cut -d: -f1)
  END_LINE=$((START_LINE + END_LINE - 1))

  # Create a new file with the insertion
  {
      sed -n "1,${END_LINE}p" "$FILE_PATH"
      cat "$TEMP_FILE"
      sed -n "$((END_LINE + 1)),\$p" "$FILE_PATH"
  } > "${FILE_PATH}.new"

  # Replace the original file with the new file
  mv "${FILE_PATH}.new" "$FILE_PATH"

  # Clean up the temporary files
  rm "$TEMP_FILE"
  rm "${FILE_PATH}.bak"
}

ask_for_star() {
  _print "${YELLOW}Would you like to support my work by starring my GitHub repo? yes/no [yes]: ${NC}"
  local response
  read -r response
  response=${response:-yes} # Set default response to 'yes' if input is empty
  if [[ "$response" =~ ^[Yy](es)?$ ]] || [[ -z "$response" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      open "https://github.com/dustinlyons/nixos-config"
    else
      xdg-open "https://github.com/dustinlyons/nixos-config"
    fi
  fi
}

ask_for_star

# Fetch username from the system
export USERNAME=$(whoami)

# If the username is 'nixos' or 'root', ask the user for their username
if [[ "$USERNAME" == "nixos" ]] || [[ "$USERNAME" == "root" ]]; then
  _prompt "${YELLOW}You're running as $USERNAME. Please enter your desired username: ${NC}" USERNAME
fi

# Check if git is available
if command -v git >/dev/null 2>&1; then
  # Fetch email and name from git config
  export GIT_EMAIL=$(git config --get user.email)
  export GIT_NAME=$(git config --get user.name)
else
  _print "${RED}Git is not available on this system.${NC}"
fi

# If git email is not found or git is not available, ask the user
if [[ -z "$GIT_EMAIL" ]]; then
  _prompt "${YELLOW}Please enter your email: ${NC}" GIT_EMAIL
fi

# If git name is not found or git is not available, ask the user
if [[ -z "$GIT_NAME" ]]; then
  _prompt "${YELLOW}Please enter your name: ${NC}" GIT_NAME
fi

_prompt "${YELLOW}Please enter your Github username: ${NC}" GITHUB_USER
_prompt "${YELLOW}Please enter your Github secrets repository name: ${NC}" GITHUB_SECRETS_REPO

export GITHUB_USER
export GITHUB_SECRETS_REPO

select_boot_disk() {
  local disks
  local _boot_disk

  _print "${YELLOW}Available disks:${NC}"
  disks=$(lsblk -nd --output NAME,SIZE | grep -v loop)
  echo "$disks"

  # Warning message for data deletion
  _print "${RED}WARNING: All data on the chosen disk will be erased during the installation!${NC}"
  _prompt "${YELLOW}Please enter the name of your boot disk (e.g., sda, nvme0n1). Do not include the full path ("/dev/"): ${NC}" _boot_disk

  # Confirmation for disk selection to prevent accidental data loss
  _print "${YELLOW}You have selected $_boot_disk as the boot disk. This will delete everything on this disk. Are you sure? (Y/N): ${NC}"
  read -r confirmation
  if [[ "$confirmation" =~ ^[Yy]$ ]]; then
    export BOOT_DISK=$_boot_disk
  else
    _print "${RED}Disk selection cancelled by the user. Please run the script again to select the correct disk.${NC}"
    exit 1
  fi
}

# Set hostname and find primary disk if this is NixOS
if [[ "$OS" != "Darwin" ]]; then
  _prompt "${YELLOW}Please enter a hostname for the system: ${NC}" HOST_NAME
  export HOST_NAME
  select_boot_disk
fi

# Confirmation step
confirm_details() {
  _print "${GREEN}Username: $USERNAME"
  _print "Email: $GIT_EMAIL"
  _print "Name: $GIT_NAME${NC}"

  if([[ "$OS" != "Darwin" ]]); then
    _print "${GREEN}Primary interface: $PRIMARY_IFACE"
    _print "Boot disk: $BOOT_DISK"
    _print "Hostname: $HOST_NAME${NC}"
  fi

  _print "${GREEN}Secrets repository: $GITHUB_USER/$GITHUB_SECRETS_REPO${NC}"

  _prompt "${YELLOW}Is this correct? yes/no: ${NC}" choice

  case "$choice" in
    [Nn] | [Nn][Oo] ) 
      _print "${RED}Exiting script.${NC}" 
      exit 1
      ;;
    [Yy] | [Yy][Ee][Ss] ) 
      _print "${GREEN}Continuing...${NC}"
      ;;
    * ) 
      _print "${RED}Invalid option. Exiting script.${NC}" 
      exit 1
      ;;
  esac
}

# Call the confirmation function
confirm_details

# Function to replace tokens in each file
replace_tokens() {
  local file="$1"
  if [[ $(basename $1) != "apply" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      # macOS
      LC_ALL=C LANG=C sed -i '' -e "s/%USER%/$USERNAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%NAME%/$GIT_NAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%GITHUB_USER%/$GITHUB_USER/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%GITHUB_SECRETS_REPO%/$GITHUB_SECRETS_REPO/g" "$file"
    else
      # Linux or other
      sed -i -e "s/%USER%/$USERNAME/g" "$file"
      sed -i -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      sed -i -e "s/%NAME%/$GIT_NAME/g" "$file"
      sed -i -e "s/%INTERFACE%/$PRIMARY_IFACE/g" "$file"
      sed -i -e "s/%DISK%/$BOOT_DISK/g" "$file"
      sed -i -e "s/%HOST%/$HOST_NAME/g" "$file"
      sed -i -e "s/%GITHUB_USER%/$GITHUB_USER/g" "$file"
      sed -i -e "s/%GITHUB_SECRETS_REPO%/$GITHUB_SECRETS_REPO/g" "$file"
    fi
  fi
}

# Insert secrets repo into flake
insert_secrets_input
insert_secrets_output

# Traverse directories and call replace_tokens on each Nix file
export -f replace_tokens
find . -type f -exec bash -c 'replace_tokens "$0"' {} \;

echo "$USERNAME" > /tmp/username.txt
_print "${GREEN}User $USERNAME information applied.${NC}"

================
File: apps/aarch64-darwin/build
================
#!/bin/sh -e

GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m'

SYSTEM_TYPE="aarch64-darwin"
FLAKE_SYSTEM="darwinConfigurations.${SYSTEM_TYPE}.system"

export NIXPKGS_ALLOW_UNFREE=1

echo "${YELLOW}Starting build...${NC}"
nix --extra-experimental-features 'nix-command flakes' build .#$FLAKE_SYSTEM $@

echo "${YELLOW}Cleaning up...${NC}"
unlink ./result

echo "${GREEN}Switch to new generation complete!${NC}"

================
File: apps/aarch64-darwin/build-switch
================
#!/bin/sh -e

GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m'

SYSTEM_TYPE="aarch64-darwin"
FLAKE_SYSTEM="darwinConfigurations.${SYSTEM_TYPE}.system"

export NIXPKGS_ALLOW_UNFREE=1

echo "${YELLOW}Starting build...${NC}"
nix --extra-experimental-features 'nix-command flakes' build .#$FLAKE_SYSTEM $@

echo "${YELLOW}Switching to new generation...${NC}"
./result/sw/bin/darwin-rebuild switch --flake .#${SYSTEM_TYPE} $@

echo "${YELLOW}Cleaning up...${NC}"
unlink ./result

echo "${GREEN}Switch to new generation complete!${NC}"

================
File: apps/aarch64-darwin/check-keys
================
#!/usr/bin/env bash
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

username=${USER}
export SSH_DIR=/Users/${username}/.ssh

lint_keys() {
  if [[ -f "${SSH_DIR}/id_ed25519" && -f "${SSH_DIR}/id_ed25519.pub" && -f "${SSH_DIR}/id_ed25519_agenix" && -f "${SSH_DIR}/id_ed25519_agenix.pub" ]]; then
    echo -e "${GREEN}All SSH keys are present.${NC}"
  else
    echo -e "${RED}Some SSH keys are missing.${NC}"
    if [[ ! -f "${SSH_DIR}/id_ed25519" ]]; then
      echo -e "${RED}Missing: id_ed25519${NC}"
    fi
    if [[ ! -f "${SSH_DIR}/id_ed25519.pub" ]]; then
      echo -e "${RED}Missing: id_ed25519.pub${NC}"
    fi
    if [[ ! -f "${SSH_DIR}/id_ed25519_agenix" ]]; then
      echo -e "${RED}Missing: id_ed25519_agenix${NC}"
    fi
    if [[ ! -f "${SSH_DIR}/id_ed25519_agenix.pub" ]]; then
      echo -e "${RED}Missing: id_ed25519_agenix.pub${NC}"
    fi
    echo -e "${GREEN}Run the createKeys command to generate the missing keys.${NC}"
    exit 1
  fi
}

lint_keys

================
File: apps/aarch64-darwin/copy-keys
================
#!/usr/bin/env bash
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

username=${USER}
export SSH_DIR=/Users/${username}/.ssh

handle_no_usb() {
  echo -e ${RED}No USB drive found or mounted.${NC}"
  echo -e ${GREEN}If you have not yet set up your keys, run the script to generate new SSH keys.${NC}"
  exit 1
}

mount_usb() {
  MOUNT_PATH=""
  for dev in $(diskutil list | grep -o 'disk[0-9]'); do
    MOUNT_PATH="$(diskutil info /dev/${dev} | grep \"Mount Point\" | awk -F: '{print $2}' | xargs)"
    if [ -n "${MOUNT_PATH}" ]; then
      echo -e "${GREEN}USB drive found at ${MOUNT_PATH}.${NC}"
      break
    fi
  done

  if [ -z "${MOUNT_PATH}" ]; then
    echo -e "${RED}No USB drive found.${NC}"
  fi
}

copy_keys() {
  if [ -n "${MOUNT_PATH}" ]; then
    cp "${MOUNT_PATH}/id_ed25519_agenix.pub" ${SSH_DIR}
    cp "${MOUNT_PATH}/id_ed25519_agenix" ${SSH_DIR}
    chmod 600 ${SSH_DIR}/id_ed25519_{agenix,agenix.pub}
  else
    echo -e "${RED}No USB drive found. Aborting.${NC}"
    exit 1
  fi
}

setup_ssh_directory() {
  mkdir -p ${SSH_DIR}
}

set_keys() {
  cp ${MOUNT_PATH}/id_ed25519_github.pub ${SSH_DIR}/id_ed25519.pub
  cp ${MOUNT_PATH}/id_ed25519_github ${SSH_DIR}/id_ed25519
  chmod 600 ${SSH_DIR}/id_ed25519
  chmod 644 ${SSH_DIR}/id_ed25519.pub
}

change_ownership() {
  chown ${username}:staff ${SSH_DIR}/id_ed25519{,.pub}
  chown ${username}:staff ${SSH_DIR}/id_ed25519_{agenix,agenix.pub}
}

setup_ssh_directory
mount_usb

if [ -z "${MOUNT_PATH}" ]; then
  handle_no_usb
else
  copy_keys
  set_keys
  change_ownership
fi

================
File: apps/aarch64-darwin/create-keys
================
#!/usr/bin/env bash
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

username=${USER}
export SSH_DIR=/Users/${username}/.ssh

setup_ssh_directory() {
  mkdir -p ${SSH_DIR}
}

prompt_for_key_generation() {
  local key_name=$1
  if [[ -f "${SSH_DIR}/${key_name}" ]]; then
    echo -e "${RED}Existing SSH key found for ${key_name}.${NC}"
    cat "${SSH_DIR}/${key_name}.pub"
    read -p "Do you want to replace it? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      return 0 # Indicate key should be replaced
    else
      return 1 # Indicate key should be kept
    fi
  fi
  return 0 # Indicate no key exists, so it should be created
}

generate_key() {
  local key_name=$1
  if prompt_for_key_generation "$key_name"; then
    ssh-keygen -t ed25519 -f "${SSH_DIR}/${key_name}" -N ""
    chown ${username}:staff "${SSH_DIR}/${key_name}"{,.pub}
  else
    echo -e "${GREEN}Kept existing ${key_name}.${NC}"
  fi
}

setup_ssh_directory
generate_key "id_ed25519"
generate_key "id_ed25519_agenix"

echo -e "${GREEN}SSH key setup complete.${NC}"
echo -e "${GREEN}Remember to add the necessary keys to Github or other services as required.${NC}"

================
File: apps/aarch64-darwin/rollback
================
#!/bin/sh -e

GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m'

FLAKE="macos"

echo "${YELLOW}Available generations:${NC}"
/run/current-system/sw/bin/darwin-rebuild --list-generations

echo "${YELLOW}Enter the generation number for rollback:${NC}"
read GEN_NUM

if [ -z "$GEN_NUM" ]; then
  echo "${RED}No generation number entered. Aborting rollback.${NC}"
  exit 1
fi

echo "${YELLOW}Rolling back to generation $GEN_NUM...${NC}"
/run/current-system/sw/bin/darwin-rebuild switch --flake .#$FLAKE --switch-generation $GEN_NUM

echo "${GREEN}Rollback to generation $GEN_NUM complete!${NC}"

================
File: apps/x86_64-darwin/apply
================
#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Determine the operating system
export OS=$(uname)

# Primary network interface
if [[ "$OS" != "Darwin" ]]; then
  export PRIMARY_IFACE=$(ip -o -4 route show to default | awk '{print $5}')
  echo -e "${GREEN}Found primary network interface $PRIMARY_IFACE${NC}"
fi

# Custom print function
_print() {
  if [[ "$OS" == "Darwin" ]]; then
    echo -e "$1"
  else
    echo "$1"
  fi
}

# Custom prompt function
_prompt() {
  local message="$1"
  local variable="$2"

  _print "$message"
  read -r $variable
}

insert_secrets_output() {
  local pattern="outputs = { self, darwin, nix-homebrew, homebrew-bundle, homebrew-core, homebrew-cask, homebrew-services, home-manager, nixpkgs, disko, agenix } @inputs:"
  local insert_text="secrets "

  awk -v pat="$pattern" -v insert="$insert_text" '
    $0 ~ pat {
      sub(/} @inputs:/, ", " insert "} @inputs:"); # Replace the closing brace with the insert text followed by the brace
      gsub(/ ,/, ","); # Correct any spaces before commas
      print
      next
    }
    { print }
  ' flake.nix > flake.nix.tmp

  mv flake.nix.tmp flake.nix
}

insert_secrets_input() {
  # Define file path
  FILE_PATH="flake.nix"

  # Backup the original file
  cp "$FILE_PATH" "${FILE_PATH}.bak"

  # Temporary file for the text to insert
  TEMP_FILE="temp_insert.txt"

  # Write the formatted text to the temporary file
cat > "$TEMP_FILE" << 'EOF'
    secrets = {
      url = "git+ssh://git@github.com/%GITHUB_USER%/%GITHUB_SECRETS_REPO%.git";
      flake = false;
    };
EOF

  # Check if the 'secrets' block already exists
  if grep -q 'url = "git+ssh://git@github.com/%GITHUB_USER%/%GITHUB_SECRETS_REPO%.git"' "$FILE_PATH"; then
      echo "The 'secrets' block already exists in the file."
      rm "$TEMP_FILE"
      rm "${FILE_PATH}.bak"
      exit 0
  fi

  # Find the start and end line numbers of the 'disko' block
  START_LINE=$(grep -n 'disko = {' "$FILE_PATH" | head -n 1 | cut -d: -f1)
  END_LINE=$(tail -n +$START_LINE "$FILE_PATH" | grep -n '};' | head -n 1 | cut -d: -f1)
  END_LINE=$((START_LINE + END_LINE - 1))

  # Create a new file with the insertion
  {
      sed -n "1,${END_LINE}p" "$FILE_PATH"
      cat "$TEMP_FILE"
      sed -n "$((END_LINE + 1)),\$p" "$FILE_PATH"
  } > "${FILE_PATH}.new"

  # Replace the original file with the new file
  mv "${FILE_PATH}.new" "$FILE_PATH"

  # Clean up the temporary files
  rm "$TEMP_FILE"
  rm "${FILE_PATH}.bak"
}

ask_for_star() {
  _print "${YELLOW}Would you like to support my work by starring my GitHub repo? yes/no [yes]: ${NC}"
  local response
  read -r response
  response=${response:-yes} # Set default response to 'yes' if input is empty
  if [[ "$response" =~ ^[Yy](es)?$ ]] || [[ -z "$response" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      open "https://github.com/dustinlyons/nixos-config"
    else
      xdg-open "https://github.com/dustinlyons/nixos-config"
    fi
  fi
}

ask_for_star

# Fetch username from the system
export USERNAME=$(whoami)

# If the username is 'nixos' or 'root', ask the user for their username
if [[ "$USERNAME" == "nixos" ]] || [[ "$USERNAME" == "root" ]]; then
  _prompt "${YELLOW}You're running as $USERNAME. Please enter your desired username: ${NC}" USERNAME
fi

# Check if git is available
if command -v git >/dev/null 2>&1; then
  # Fetch email and name from git config
  export GIT_EMAIL=$(git config --get user.email)
  export GIT_NAME=$(git config --get user.name)
else
  _print "${RED}Git is not available on this system.${NC}"
fi

# If git email is not found or git is not available, ask the user
if [[ -z "$GIT_EMAIL" ]]; then
  _prompt "${YELLOW}Please enter your email: ${NC}" GIT_EMAIL
fi

# If git name is not found or git is not available, ask the user
if [[ -z "$GIT_NAME" ]]; then
  _prompt "${YELLOW}Please enter your name: ${NC}" GIT_NAME
fi

_prompt "${YELLOW}Please enter your Github username: ${NC}" GITHUB_USER
_prompt "${YELLOW}Please enter your Github secrets repository name: ${NC}" GITHUB_SECRETS_REPO

export GITHUB_USER
export GITHUB_SECRETS_REPO

select_boot_disk() {
  local disks
  local _boot_disk

  _print "${YELLOW}Available disks:${NC}"
  disks=$(lsblk -nd --output NAME,SIZE | grep -v loop)
  echo "$disks"

  # Warning message for data deletion
  _print "${RED}WARNING: All data on the chosen disk will be erased during the installation!${NC}"
  _prompt "${YELLOW}Please enter the name of your boot disk (e.g., sda, nvme0n1). Do not include the full path ("/dev/"): ${NC}" _boot_disk

  # Confirmation for disk selection to prevent accidental data loss
  _print "${YELLOW}You have selected $_boot_disk as the boot disk. This will delete everything on this disk. Are you sure? (Y/N): ${NC}"
  read -r confirmation
  if [[ "$confirmation" =~ ^[Yy]$ ]]; then
    export BOOT_DISK=$_boot_disk
  else
    _print "${RED}Disk selection cancelled by the user. Please run the script again to select the correct disk.${NC}"
    exit 1
  fi
}

# Set hostname and find primary disk if this is NixOS
if [[ "$OS" != "Darwin" ]]; then
  _prompt "${YELLOW}Please enter a hostname for the system: ${NC}" HOST_NAME
  export HOST_NAME
  select_boot_disk
fi

# Confirmation step
confirm_details() {
  _print "${GREEN}Username: $USERNAME"
  _print "Email: $GIT_EMAIL"
  _print "Name: $GIT_NAME${NC}"

  if([[ "$OS" != "Darwin" ]]); then
    _print "${GREEN}Primary interface: $PRIMARY_IFACE"
    _print "Boot disk: $BOOT_DISK"
    _print "Hostname: $HOST_NAME${NC}"
  fi

  _print "${GREEN}Secrets repository: $GITHUB_USER/$GITHUB_SECRETS_REPO${NC}"

  _prompt "${YELLOW}Is this correct? yes/no: ${NC}" choice

  case "$choice" in
    [Nn] | [Nn][Oo] ) 
      _print "${RED}Exiting script.${NC}" 
      exit 1
      ;;
    [Yy] | [Yy][Ee][Ss] ) 
      _print "${GREEN}Continuing...${NC}"
      ;;
    * ) 
      _print "${RED}Invalid option. Exiting script.${NC}" 
      exit 1
      ;;
  esac
}

# Call the confirmation function
confirm_details

# Function to replace tokens in each file
replace_tokens() {
  local file="$1"
  if [[ $(basename $1) != "apply" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      # macOS
      LC_ALL=C LANG=C sed -i '' -e "s/%USER%/$USERNAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%NAME%/$GIT_NAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%GITHUB_USER%/$GITHUB_USER/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%GITHUB_SECRETS_REPO%/$GITHUB_SECRETS_REPO/g" "$file"
    else
      # Linux or other
      sed -i -e "s/%USER%/$USERNAME/g" "$file"
      sed -i -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      sed -i -e "s/%NAME%/$GIT_NAME/g" "$file"
      sed -i -e "s/%INTERFACE%/$PRIMARY_IFACE/g" "$file"
      sed -i -e "s/%DISK%/$BOOT_DISK/g" "$file"
      sed -i -e "s/%HOST%/$HOST_NAME/g" "$file"
      sed -i -e "s/%GITHUB_USER%/$GITHUB_USER/g" "$file"
      sed -i -e "s/%GITHUB_SECRETS_REPO%/$GITHUB_SECRETS_REPO/g" "$file"
    fi
  fi
}

# Insert secrets repo into flake
insert_secrets_input
insert_secrets_output

# Traverse directories and call replace_tokens on each Nix file
export -f replace_tokens
find . -type f -exec bash -c 'replace_tokens "$0"' {} \;

echo "$USERNAME" > /tmp/username.txt
_print "${GREEN}User $USERNAME information applied.${NC}"

================
File: apps/x86_64-darwin/build
================
#!/bin/sh -e

GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m'

SYSTEM_TYPE="x86_64-darwin"
FLAKE_SYSTEM="darwinConfigurations.${SYSTEM_TYPE}.system"

export NIXPKGS_ALLOW_UNFREE=1

echo "${YELLOW}Starting build...${NC}"
nix --extra-experimental-features 'nix-command flakes' build .#$FLAKE_SYSTEM $@

echo "${YELLOW}Cleaning up...${NC}"
unlink ./result

echo "${GREEN}Switch to new generation complete!${NC}"

================
File: apps/x86_64-darwin/build-switch
================
#!/bin/sh -e

GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NC='\033[0m'

SYSTEM_TYPE="x86_64-darwin" 
FLAKE_SYSTEM="darwinConfigurations.${SYSTEM_TYPE}.system"

export NIXPKGS_ALLOW_UNFREE=1

echo "${YELLOW}Starting build...${NC}"
nix --extra-experimental-features 'nix-command flakes' build .#$FLAKE_SYSTEM $@

echo "${YELLOW}Switching to new generation...${NC}"
./result/sw/bin/darwin-rebuild switch --flake .#${SYSTEM_TYPE} $@

echo "${YELLOW}Cleaning up...${NC}"
unlink ./result

echo "${GREEN}Switch to new generation complete!${NC}"

================
File: apps/x86_64-darwin/check-keys
================
#!/usr/bin/env bash
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

username=${USER}
export SSH_DIR=/Users/${username}/.ssh

lint_keys() {
  if [[ -f "${SSH_DIR}/id_ed25519" && -f "${SSH_DIR}/id_ed25519.pub" && -f "${SSH_DIR}/id_ed25519_agenix" && -f "${SSH_DIR}/id_ed25519_agenix.pub" ]]; then
    echo -e "${GREEN}All SSH keys are present.${NC}"
  else
    echo -e "${RED}Some SSH keys are missing.${NC}"
    if [[ ! -f "${SSH_DIR}/id_ed25519" ]]; then
      echo -e "${RED}Missing: id_ed25519${NC}"
    fi
    if [[ ! -f "${SSH_DIR}/id_ed25519.pub" ]]; then
      echo -e "${RED}Missing: id_ed25519.pub${NC}"
    fi
    if [[ ! -f "${SSH_DIR}/id_ed25519_agenix" ]]; then
      echo -e "${RED}Missing: id_ed25519_agenix${NC}"
    fi
    if [[ ! -f "${SSH_DIR}/id_ed25519_agenix.pub" ]]; then
      echo -e "${RED}Missing: id_ed25519_agenix.pub${NC}"
    fi
    echo -e "${GREEN}Run the createKeys command to generate the missing keys.${NC}"
    exit 1
  fi
}

lint_keys

================
File: apps/x86_64-darwin/copy-keys
================
#!/usr/bin/env bash
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

username=${USER}
export SSH_DIR=/Users/${username}/.ssh

handle_no_usb() {
  echo -e ${RED}No USB drive found or mounted.${NC}"
  echo -e ${GREEN}If you have not yet set up your keys, run the script to generate new SSH keys.${NC}"
  exit 1
}

mount_usb() {
  MOUNT_PATH=""
  for dev in $(diskutil list | grep -o 'disk[0-9]'); do
    MOUNT_PATH="$(diskutil info /dev/${dev} | grep \"Mount Point\" | awk -F: '{print $2}' | xargs)"
    if [ -n "${MOUNT_PATH}" ]; then
      echo -e "${GREEN}USB drive found at ${MOUNT_PATH}.${NC}"
      break
    fi
  done

  if [ -z "${MOUNT_PATH}" ]; then
    echo -e "${RED}No USB drive found.${NC}"
  fi
}

copy_keys() {
  if [ -n "${MOUNT_PATH}" ]; then
    cp "${MOUNT_PATH}/id_ed25519_agenix.pub" ${SSH_DIR}
    cp "${MOUNT_PATH}/id_ed25519_agenix" ${SSH_DIR}
    chmod 600 ${SSH_DIR}/id_ed25519_{agenix,agenix.pub}
  else
    echo -e "${RED}No USB drive found. Aborting.${NC}"
    exit 1
  fi
}

setup_ssh_directory() {
  mkdir -p ${SSH_DIR}
}

set_keys() {
  cp ${MOUNT_PATH}/id_ed25519_github.pub ${SSH_DIR}/id_ed25519.pub
  cp ${MOUNT_PATH}/id_ed25519_github ${SSH_DIR}/id_ed25519
  chmod 600 ${SSH_DIR}/id_ed25519
  chmod 644 ${SSH_DIR}/id_ed25519.pub
}

change_ownership() {
  chown ${username}:staff ${SSH_DIR}/id_ed25519{,.pub}
  chown ${username}:staff ${SSH_DIR}/id_ed25519_{agenix,agenix.pub}
}

setup_ssh_directory
mount_usb

if [ -z "${MOUNT_PATH}" ]; then
  handle_no_usb
else
  copy_keys
  set_keys
  change_ownership
fi

================
File: apps/x86_64-darwin/create-keys
================
#!/usr/bin/env bash
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

username=${USER}
export SSH_DIR=/Users/${username}/.ssh

setup_ssh_directory() {
  mkdir -p ${SSH_DIR}
}

prompt_for_key_generation() {
  local key_name=$1
  if [[ -f "${SSH_DIR}/${key_name}" ]]; then
    echo -e "${RED}Existing SSH key found for ${key_name}.${NC}"
    cat "${SSH_DIR}/${key_name}.pub"
    read -p "Do you want to replace it? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      return 0 # Indicate key should be replaced
    else
      return 1 # Indicate key should be kept
    fi
  fi
  return 0 # Indicate no key exists, so it should be created
}

generate_key() {
  local key_name=$1
  if prompt_for_key_generation "$key_name"; then
    ssh-keygen -t ed25519 -f "${SSH_DIR}/${key_name}" -N ""
    chown ${username}:staff "${SSH_DIR}/${key_name}"{,.pub}
  else
    echo -e "${GREEN}Kept existing ${key_name}.${NC}"
  fi
}

setup_ssh_directory
generate_key "id_ed25519"
generate_key "id_ed25519_agenix"

echo -e "${GREEN}SSH key setup complete.${NC}"
echo -e "${GREEN}Remember to add the necessary keys to Github or other services as required.${NC}"

================
File: apps/x86_64-linux/apply
================
#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Determine the operating system
export OS=$(uname)

# Primary network interface
if [[ "$OS" != "Darwin" ]]; then
  export PRIMARY_IFACE=$(ip -o -4 route show to default | awk '{print $5}')
  echo -e "${GREEN}Found primary network interface $PRIMARY_IFACE${NC}"
fi

# Custom print function
_print() {
  if [[ "$OS" == "Darwin" ]]; then
    echo -e "$1"
  else
    echo "$1"
  fi
}

# Custom prompt function
_prompt() {
  local message="$1"
  local variable="$2"

  _print "$message"
  read -r $variable
}

ask_for_star() {
  _print "${YELLOW}Would you like to support my work by starring my GitHub repo? yes/no [yes]: ${NC}"
  local response
  read -r response
  response=${response:-yes} # Set default response to 'yes' if input is empty
  if [[ "$response" =~ ^[Yy](es)?$ ]] || [[ -z "$response" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      open "https://github.com/dustinlyons/nixos-config"
    else
      xdg-open "https://github.com/dustinlyons/nixos-config"
    fi
  fi
}

ask_for_star

# Fetch username from the system
export USERNAME=$(whoami)

# If the username is 'nixos' or 'root', ask the user for their username
if [[ "$USERNAME" == "nixos" ]] || [[ "$USERNAME" == "root" ]]; then
  _prompt "${YELLOW}You're running as $USERNAME. Please enter your desired username: ${NC}" USERNAME
fi

# Check if git is available
if command -v git >/dev/null 2>&1; then
  # Fetch email and name from git config
  export GIT_EMAIL=$(git config --get user.email)
  export GIT_NAME=$(git config --get user.name)
else
  _print "${RED}Git is not available on this system.${NC}"
fi

# If git email is not found or git is not available, ask the user
if [[ -z "$GIT_EMAIL" ]]; then
  _prompt "${YELLOW}Please enter your email: ${NC}" GIT_EMAIL
fi

# If git name is not found or git is not available, ask the user
if [[ -z "$GIT_NAME" ]]; then
  _prompt "${YELLOW}Please enter your name: ${NC}" GIT_NAME
fi

if [[ -z "$GITHUB_USER" ]]; then
  _prompt "${YELLOW}Please enter your Github username: ${NC}" GITHUB_USER
fi

if [[ -z "$GITHUB_SECRETS_REPO" ]]; then
  _prompt "${YELLOW}Please enter your Github secrets repository name: ${NC}" GITHUB_SECRETS_REPO
fi

export GITHUB_USER
export GITHUB_SECRETS_REPO

select_boot_disk() {
  local disks
  local _boot_disk

  _print "${YELLOW}Available disks:${NC}"
  disks=$(lsblk -nd --output NAME,SIZE | grep -v loop)
  echo "$disks"

  # Warning message for data deletion
  _print "${RED}WARNING: All data on the chosen disk will be erased during the installation!${NC}"
  _prompt "${YELLOW}Please enter the name of your boot disk (e.g., sda, nvme0n1). Do not include the full path ("/dev/"): ${NC}" _boot_disk

  # Confirmation for disk selection to prevent accidental data loss
  _print "${YELLOW}You have selected $_boot_disk as the boot disk. This will delete everything on this disk. Are you sure? (Y/N): ${NC}"
  read -r confirmation
  if [[ "$confirmation" =~ ^[Yy]$ ]]; then
    export BOOT_DISK=$_boot_disk
  else
    _print "${RED}Disk selection cancelled by the user. Please run the script again to select the correct disk.${NC}"
    exit 1
  fi
}

# Set hostname and find primary disk if this is NixOS
if [[ "$OS" != "Darwin" ]]; then
  _prompt "${YELLOW}Please enter a hostname for the system: ${NC}" HOST_NAME
  export HOST_NAME
  select_boot_disk
fi

# Confirmation step
confirm_details() {
  _print "${GREEN}Username: $USERNAME"
  _print "Email: $GIT_EMAIL"
  _print "Name: $GIT_NAME${NC}"

  if([[ "$OS" != "Darwin" ]]); then
    _print "${GREEN}Primary interface: $PRIMARY_IFACE"
    _print "Boot disk: $BOOT_DISK"
    _print "Hostname: $HOST_NAME${NC}"
  fi

  _print "${GREEN}Secrets repository: $GITHUB_USER/$GITHUB_SECRETS_REPO${NC}"

  _prompt "${YELLOW}Is this correct? yes/no: ${NC}" choice

  case "$choice" in
    [Nn] | [Nn][Oo] ) 
      _print "${RED}Exiting script.${NC}" 
      exit 1
      ;;
    [Yy] | [Yy][Ee][Ss] ) 
      _print "${GREEN}Continuing...${NC}"
      ;;
    * ) 
      _print "${RED}Invalid option. Exiting script.${NC}" 
      exit 1
      ;;
  esac
}

# Call the confirmation function
confirm_details

# Function to replace tokens in each file
replace_tokens() {
  local file="$1"
  if [[ $(basename $1) != "apply" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      # macOS
      LC_ALL=C LANG=C sed -i '' -e "s/%USER%/$USERNAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%NAME%/$GIT_NAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%GITHUB_USER%/$GITHUB_USER/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%GITHUB_SECRETS_REPO%/$GITHUB_SECRETS_REPO/g" "$file"
    else
      # Linux or other
      sed -i -e "s/%USER%/$USERNAME/g" "$file"
      sed -i -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      sed -i -e "s/%NAME%/$GIT_NAME/g" "$file"
      sed -i -e "s/%INTERFACE%/$PRIMARY_IFACE/g" "$file"
      sed -i -e "s/%DISK%/$BOOT_DISK/g" "$file"
      sed -i -e "s/%HOST%/$HOST_NAME/g" "$file"
      sed -i -e "s/%GITHUB_USER%/$GITHUB_USER/g" "$file"
      sed -i -e "s/%GITHUB_SECRETS_REPO%/$GITHUB_SECRETS_REPO/g" "$file"
    fi
  fi
}

# Traverse directories and call replace_tokens on each Nix file
export -f replace_tokens
find . -type f -exec bash -c 'replace_tokens "$0"' {} \;

echo "$USERNAME" > /tmp/username.txt
_print "${GREEN}User $USERNAME information applied.${NC}"

================
File: apps/x86_64-linux/build-switch
================
#!/bin/sh -e

VERSION=1.0

GREEN='\033[1;32m'
RED='\033[1;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

SYSTEM=$(uname -m)

case "$SYSTEM" in
  x86_64)
    FLAKE_TARGET="x86_64-linux"
    ;;
  aarch64)
    FLAKE_TARGET="aarch64-linux"
    ;;
  *)
    echo -e "${RED}Unsupported architecture: $SYSTEM${NC}"
    exit 1
    ;;
esac

echo -e "${YELLOW}Starting...${NC}"

# We pass SSH from user to root so root can download secrets from our private Github
sudo SSH_AUTH_SOCK=$SSH_AUTH_SOCK /run/current-system/sw/bin/nixos-rebuild switch --flake .#$FLAKE_TARGET $@

echo -e "${GREEN}Switch to new generation complete!${NC}"

================
File: hosts/darwin/default.nix
================
{ agenix, config, pkgs, ... }:

let user = "lessuseless"; in

{

  imports = [
    ../../modules/darwin/home-manager.nix
    # ../../../modules/darwin/config/sketchybar.nix
    # ../../modules/darwin/config/karabiner/karabiner.nix
    ../../modules/darwin/secrets.nix
    ../../modules/shared
    # ./nextdns.nix
    agenix.darwinModules.default
  ];

  # Auto upgrade nix package and the daemon service.
services = {
    nix-daemon.enable = true;
    yabai = {
      enable = true;
      config = {
        layout = "bsp";
        # external_bar = "off:40:0";
        # menubar_opacity = "1.0";
        # mouse_follows_focus = "off";
        # focus_follows_mouse = "off";
        # display_arrangement_order = [ "default" ];
        
        insert_feedback_color = "0xffd75f5f";
        split_ratio = 0.50;
        split_type = "auto";
        auto_balance = false;

        # # Window Spacing
        top_padding = "3";
        bottom_padding = "3";
        left_padding = "3";
        right_padding = "3";
        window_gap = "3";

        # # Window Properties
        # window_origin_display = "default";
        # window_placement = "second_child";
        # window_zoom_persist = true;
        # window_shadow = true;
        # window_animation_duration = 0.0;
        # window_animation_easing = "ease_out_circ";
        # window_opacity_duration = 0.0;
        # active_window_opacity = 1.0;
        # normal_window_opacity = 0.90;
        # window_opacity = false;
        window_shadow = "float";
      };
    };
 
    sketchybar = {
      enable = true;
      extraPackages = with pkgs; [
        jankyborders
        nushell
      ];
    };
    
    jankyborders = {
      enable = true;
      blur_radius = 5.0;
      hidpi = true;
      active_color = "0xFFFF69B4";
      # active_color = "0xAAB279A7";
      # background_color = "0xAAB279A7";
      inactive_color = "0x33867A74";
      # width = "5.0";
    };

    tailscale = {
      enable = true; # false = Using App Store application
      overrideLocalDns = true;
    };
  };

  # Setup user, packages, programs
  nix = {
    package = pkgs.nix;
    settings = {
      trusted-users = [ "@admin" "${user}" ];
      substituters = [ 
        # "lessuseless.cachix.org"
        "https://nix-community.cachix.org" 
        "https://cache.nixos.org"  
        ];
      trusted-public-keys = [ 
        # "lessuselesss.cachix.org-1:nwRzA1J+Ze2nJAcioAfp77ifk8sncUi963WW2RExOwA="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
        ];
    };

    gc = {
      user = "root";
      automatic = true;
      interval = { Weekday = 0; Hour = 2; Minute = 0; };
      options = "--delete-older-than 30d";
    };

    extraOptions = ''
      experimental-features = nix-command flakes
    '';
  };

  # Turn off NIX_PATH warnings now that we're using flakes
  system.checks.verifyNixPath = false;

  # Load configuration that is shared across systems
  environment.systemPackages = with pkgs; [
    emacs-unstable
    agenix.packages."${pkgs.system}".default
  ] ++ (import ../../modules/shared/packages.nix { inherit pkgs; });

  launchd.user.agents.emacs.path = [ config.environment.systemPath ];
  launchd.user.agents.emacs.serviceConfig = {
    KeepAlive = true;
    ProgramArguments = [
      "/bin/sh"
      "-c"
      "/bin/wait4path ${pkgs.emacs}/bin/emacs && exec ${pkgs.emacs}/bin/emacs --fg-daemon"
    ];
    StandardErrorPath = "/tmp/emacs.err.log";
    StandardOutPath = "/tmp/emacs.out.log";
  };

  system = {
    stateVersion = 4;

    defaults = {
      NSGlobalDomain = {
        AppleShowAllExtensions = true;

        # Enable press-and-hold repeating
        ApplePressAndHoldEnabled = false;

        # 120, 90, 60, 30, 12, 6, 2
        KeyRepeat = 2;

        # 120, 94, 68, 35, 25, 15
        InitialKeyRepeat = 15;

        "com.apple.mouse.tapBehavior" = 1;
        "com.apple.sound.beep.volume" = 0.0;
        "com.apple.sound.beep.feedback" = 0;
        
        # Auto hide the menubar
        _HIHideMenuBar = true;

        # Enable full keyboard access for all controls
        #AppleKeyboardUIMode = 3;

        # Disable "Natural" scrolling
        "com.apple.swipescrolldirection" = false;

        # Disable smart dash/period/quote substitutions
        NSAutomaticDashSubstitutionEnabled = false;
        NSAutomaticPeriodSubstitutionEnabled = false;
        NSAutomaticQuoteSubstitutionEnabled = false;

        # Disable automatic capitalization
        NSAutomaticCapitalizationEnabled = false;

        # Using expanded "save panel" by default
        NSNavPanelExpandedStateForSaveMode = true;
        NSNavPanelExpandedStateForSaveMode2 = true;

        # Increase window resize speed for Cocoa applications
        NSWindowResizeTime = 0.001;

        # Save to disk (not to iCloud) by default
        NSDocumentSaveNewDocumentsToCloud = true;
      };

      dock = {

        # Set icon size, dock orientation and launch animation
        launchanim = true;
        tilesize = 48;
        orientation = "left";

        # Set dock to auto-hide, and transparentize icons of hidden apps (⌘H)
        autohide = true;
        showhidden = true;

        # Disable to show recents, and light-dot of running apps
        show-recents = false;
        show-process-indicators = false;
      };

      finder = {

        _FXShowPosixPathInTitle = false;

        # Allow quitting via ⌘Q
        QuitMenuItem = true;

        # Disable warning when changing a file extension
        FXEnableExtensionChangeWarning = false;

        # Show all files and their extensions
        AppleShowAllExtensions = true;
        AppleShowAllFiles = true;

        # Show path bar, and layout as multi-column
        ShowPathbar = true;
        FXPreferredViewStyle = "clmv";

        # Search in current folder by default
        FXDefaultSearchScope = "SCcf";
      };

      trackpad = {
        # Enable trackpad tap to click
        Clicking = true;

        # Enable 3-finger drag
        TrackpadThreeFingerDrag = true;
      };

      ActivityMonitor = {
        # Sort by CPU usage
        SortColumn = "CPUUsage";
        SortDirection = 0;
      };

      LaunchServices = {
        # Disable quarantine for downloaded apps
        LSQuarantine = false;
      };

      CustomSystemPreferences = {
        NSGlobalDomain = {
          # Set the system accent color, TODO: https://github.com/LnL7/nix-darwin/pull/230
          AppleAccentColor = 6;
          # Jump to the spot that's clicked on the scroll bar, TODO: https://github.com/LnL7/nix-darwin/pull/672
          AppleScrollerPagingBehavior = true;
          # Prefer tabs when opening documents, TODO: https://github.com/LnL7/nix-darwin/pull/673
          AppleWindowTabbingMode = "always";
        };
        "com.apple.finder" = {
          # Keep the desktop clean
          ShowHardDrivesOnDesktop = false;
          ShowRemovableMediaOnDesktop = false;
          ShowExternalHardDrivesOnDesktop = false;
          ShowMountedServersOnDesktop = false;

          # Show directories first
          _FXSortFoldersFirst = true; # TODO: https://github.com/LnL7/nix-darwin/pull/594

          # New window use the $HOME path
          NewWindowTarget = "PfHm";
          NewWindowTargetPath = "file://$HOME/";

          # Allow text selection in Quick Look
          QLEnableTextSelection = true;
        };
        "com.apple.Safari" = {
          # For better privacy
          UniversalSearchEnabled = false;
          SuppressSearchSuggestions = true;
          SendDoNotTrackHTTPHeader = true;

          # Disable auto open safe downloads
          AutoOpenSafeDownloads = false;

          # Enable Develop Menu, Web Inspector
          IncludeDevelopMenu = true;
          IncludeInternalDebugMenu = true;
          WebKitDeveloperExtras = true;
          WebKitDeveloperExtrasEnabledPreferenceKey = true;
          "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled" = true;
        };
        "com.apple.universalaccess" = {
          # Set the cursor size, TODO: https://github.com/LnL7/nix-darwin/pull/671
          mouseDriverCursorSize = 1.5;
          reduceMotion = false; # Fast Space Switching
        };
        "com.apple.screencapture" = {
          # Set the filename which screencaptures should be written, TODO: https://github.com/LnL7/nix-darwin/pull/670
          name = "screenshot";
          include-date = false;
        };
        "com.apple.desktopservices" = {
          # Avoid creating .DS_Store files on USB or network volumes
          DSDontWriteUSBStores = true;
          DSDontWriteNetworkStores = true;
        };
        "com.apple.frameworks.diskimages" = {
          # Disable disk image verification
          skip-verify = true;
          skip-verify-locked = true;
          skip-verify-remote = true;
        };
        "com.apple.CrashReporter" = {
          # Disable crash reporter
          DialogType = "none";
        };
        "com.apple.AdLib" = {
          # Disable personalized advertising
          forceLimitAdTracking = true;
          allowApplePersonalizedAdvertising = false;
          allowIdentifierForAdvertising = false;
        };
      };
    };
  };
}

================
File: hosts/nix-on-droid/default.nix
================
{ config, lib, pkgs, ...}: 

{
  # Simply install just the packages
  environment.packages = with pkgs; [
    # User-facing stuff that you really really want to have
    neovim # or some other editor, e.g. nano or neovim
    git

    # Some common stuff that people expect to have
    #procps
    #killall
    #diffutils
    #findutils
    #utillinux
    #tzdata
    #hostname
    #man
    #gnugrep
    #gnupg
    #gnused
    #gnutar
    #bzip2
    #gzip
    #xz
    #zip
    #unzip
  ];

  # Backup etc files instead of failing to activate generation if a file already exists in /etc
  environment.etcBackupExtension = ".bak";

  # Read the changelog before changing this value
  system.stateVersion = "24.11";

  # Set up nix for flakes
  nix.extraOptions = ''
    experimental-features = nix-command flakes
  '';

  # Set your time zone
  #time.timeZone = "Europe/Berlin";

  # Configure home-manager
  # home-manager = {
  #   config = ../../../home-manager/hosts/nix-on-droid.nix;
  #   backupFileExtension = "hm-bak";
  #   useGlobalPkgs = true;
  # };
}

================
File: hosts/nixos/default.nix
================
{ config, inputs, pkgs, agenix, ... }:

let user = "lessuseless";
    keys = [ "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOk8iAnIaa1deoc7jw8YACPNVka1ZFJxhnU4G74TmS+p" ]; in
{
  imports = [
    ../../modules/nixos/secrets.nix
    ../../modules/nixos/disk-config.nix
    ../../modules/shared
    agenix.nixosModules.default
  ];

  # Use the systemd-boot EFI boot loader.
  boot = {
    loader = {
      systemd-boot = {
        enable = true;
        configurationLimit = 42;
      };
      efi.canTouchEfiVariables = true;
    };
    initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod" ];
    # Uncomment for AMD GPU
    # initrd.kernelModules = [ "amdgpu" ];
    kernelPackages = pkgs.linuxPackages_latest;
    kernelModules = [ "uinput" ];
  };

  # Set your time zone.
  time.timeZone = "America/Calgary";

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  networking = {
    hostName = "%HOST%"; # Define your hostname.
    useDHCP = false;
    interfaces."%INTERFACE%".useDHCP = true;
  };

  nix = {
    nixPath = [ "nixos-config=/home/${user}/.local/share/src/nixos-config:/etc/nixos" ];
    settings = {
      allowed-users = [ "${user}" ];
      trusted-users = [ "@admin" "${user}" ];
      substituters = [ 
        "lessuseless.cachix.org" 
        "https://nix-community.cachix.org" 
        "https://cache.nixos.org" 
        ];
      trusted-public-keys = [ 
        "lessuselesss.cachix.org-1:nwRzA1J+Ze2nJAcioAfp77ifk8sncUi963WW2RExOwA="
        "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
        "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
        ];

    };

    package = pkgs.nix;
    extraOptions = ''
      experimental-features = nix-command flakes
    '';
  };

  # Manages keys and such
  programs = {
    gnupg.agent.enable = true;

    # Needed for anything GTK related
    dconf.enable = true;

    # My shell
    zsh.enable = true;
  };

  services = {
    xserver = {
      enable = true;

      # Uncomment these for AMD or Nvidia GPU
      # videoDrivers = [ "amdgpu" ];
      # videoDrivers = [ "nvidia" ];

      # Uncomment this for Nvidia GPU
      # This helps fix tearing of windows for Nvidia cards
      # services.xserver.screenSection = ''
      #   Option       "metamodes" "nvidia-auto-select +0+0 {ForceFullCompositionPipeline=On}"
      #   Option       "AllowIndirectGLXProtocol" "off"
      #   Option       "TripleBuffer" "on"
      # '';

      # LightDM Display Manager
      displayManager.defaultSession = "none+bspwm";
      displayManager.lightdm = {
        enable = true;
        greeters.slick.enable = true;
        background = ../../modules/nixos/config/login-wallpaper.png;
      };

      # Tiling window manager
      windowManager.bspwm = {
        enable = true;
      };

      # Turn Caps Lock into Ctrl
      layout = "us";
      xkbOptions = "ctrl:nocaps";

      # Better support for general peripherals
      libinput.enable = true;
    };

    # Let's be able to SSH into this machine
    openssh.enable = true;

    # Sync state between machines
    # Sync state between machines
    syncthing = {
      enable = true;
      openDefaultPorts = true;
      dataDir = "/home/${user}/.local/share/syncthing";
      configDir = "/home/${user}/.config/syncthing";
      user = "${user}";
      group = "users";
      guiAddress = "127.0.0.1:8384";
      overrideFolders = true;
      overrideDevices = true;

      settings = {
        devices = {};
        options.globalAnnounceEnabled = false; # Only sync on LAN
      };
    };

    # Picom, my window compositor with fancy effects
    #
    # Notes on writing exclude rules:
    #
    #   class_g looks up index 1 in WM_CLASS value for an application
    #   class_i looks up index 0
    #
    #   To find the value for a specific application, use `xprop` at the
    #   terminal and then click on a window of the application in question
    #
    picom = {
      enable = true;
      settings = {
        animations = true;
        animation-stiffness = 300.0;
        animation-dampening = 35.0;
        animation-clamping = false;
        animation-mass = 1;
        animation-for-workspace-switch-in = "auto";
        animation-for-workspace-switch-out = "auto";
        animation-for-open-window = "slide-down";
        animation-for-menu-window = "none";
        animation-for-transient-window = "slide-down";
        corner-radius = 12;
        rounded-corners-exclude = [
          "class_i = 'polybar'"
          "class_g = 'i3lock'"
        ];
        round-borders = 3;
        round-borders-exclude = [];
        round-borders-rule = [];
        shadow = true;
        shadow-radius = 8;
        shadow-opacity = 0.4;
        shadow-offset-x = -8;
        shadow-offset-y = -8;
        fading = false;
        inactive-opacity = 0.8;
        frame-opacity = 0.7;
        inactive-opacity-override = false;
        active-opacity = 1.0;
        focus-exclude = [
        ];

        opacity-rule = [
          "100:class_g = 'i3lock'"
          "60:class_g = 'Dunst'"
          "100:class_g = 'Alacritty' && focused"
          "90:class_g = 'Alacritty' && !focused"
        ];

        blur-kern = "3x3box";
        blur = {
          method = "kernel";
          strength = 8;
          background = false;
          background-frame = false;
          background-fixed = false;
          kern = "3x3box";
        };

        shadow-exclude = [
          "class_g = 'Dunst'"
        ];

        blur-background-exclude = [
          "class_g = 'Dunst'"
        ];

        backend = "glx";
        vsync = false;
        mark-wmwin-focused = true;
        mark-ovredir-focused = true;
        detect-rounded-corners = true;
        detect-client-opacity = false;
        detect-transient = true;
        detect-client-leader = true;
        use-damage = true;
        log-level = "info";

        wintypes = {
          normal = { fade = true; shadow = false; };
          tooltip = { fade = true; shadow = false; opacity = 0.75; focus = true; full-shadow = false; };
          dock = { shadow = false; };
          dnd = { shadow = false; };
          popup_menu = { opacity = 1.0; };
          dropdown_menu = { opacity = 1.0; };
        };
      };
    };

    gvfs.enable = true; # Mount, trash, and other functionalities
    tumbler.enable = true; # Thumbnail support for images

    # Emacs runs as a daemon
    emacs = {
      enable = true;
      package = pkgs.emacs-unstable;
    };
  };

  # When emacs builds from no cache, it exceeds the 90s timeout default
  systemd.user.services.emacs = {
    serviceConfig.TimeoutStartSec = "7min";
  };

  # Enable CUPS to print documents
  # services.printing.enable = true;
  # services.printing.drivers = [ pkgs.brlaser ]; # Brother printer driver

  # Enable sound
  # sound.enable = true;
  # hardware.pulseaudio.enable = true;

  # Video support
  hardware = {
    opengl.enable = true;
    # nvidia.modesetting.enable = true;

    # Enable Xbox support
    # xone.enable = true;

    # Crypto wallet support
    ledger.enable = true;
  };


 # Add docker daemon
  virtualisation.docker.enable = true;
  virtualisation.docker.logDriver = "json-file";

  # It's me, it's you, it's everyone
  users.users = {
    ${user} = {
      isNormalUser = true;
      extraGroups = [
        "wheel" # Enable ‘sudo’ for the user.
        "docker"
      ];
      shell = pkgs.zsh;
      openssh.authorizedKeys.keys = keys;
    };

    root = {
      openssh.authorizedKeys.keys = keys;
    };
  };

  # Don't require password for users in `wheel` group for these commands
  security.sudo = {
    enable = true;
    extraRules = [{
      commands = [
       {
         command = "${pkgs.systemd}/bin/reboot";
         options = [ "NOPASSWD" ];
        }
      ];
      groups = [ "wheel" ];
    }];
  };

  fonts.packages = with pkgs; [
    dejavu_fonts
    emacs-all-the-icons-fonts
    feather-font # from overlay
    jetbrains-mono
    font-awesome
    noto-fonts
    noto-fonts-emoji
  ];

  environment.systemPackages = with pkgs; [
    agenix.packages."${pkgs.system}".default # "x86_64-linux"
    gitAndTools.gitFull
    inetutils
  ];

  system.stateVersion = "24.11""; # Don't change this
}

================
File: hosts/qubes-templatevm/examples/configuration.nix
================
{
  config,
  lib,
  pkgs,
  ...
}: {
  nix = {
    settings = {
      experimental-features = ["nix-command" "flakes"];
    };
  };

  environment.systemPackages = with pkgs; [
    xterm
  ];
}

================
File: hosts/qubes-templatevm/examples/flake.nix
================
{
  description = "example nixos templatevm configuration";

  inputs = {
    nixpkgs.url = "nixpkgs/nixos-unstable";

    qubes-nixos-template = {
      url = "github:evq/qubes-nixos-template";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = {
    self,
    nixpkgs,
    qubes-nixos-template,
    ...
  }: let
    system = "x86_64-linux";
    pkgs = import nixpkgs {
      inherit system;
      overlays = [
        qubes-nixos-template.overlays.default
      ];
    };
  in {
    nixosConfigurations = {
      nixos = nixpkgs.lib.nixosSystem {
        inherit pkgs system;
        modules = [
          qubes-nixos-template.nixosModules.default
          qubes-nixos-template.nixosProfiles.default
          ./configuration.nix
        ];
      };
    };
  };
}

================
File: hosts/qubes-templatevm/modules/qubes/core.nix
================
{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.services.qubes.core;
in
  with lib; {
    options.services.qubes.core = {
      enable = mkEnableOption "the core qubes services";
      networking = mkEnableOption "include core qubes networking services";
      package = mkOption {
        type = types.package;
        description = "qubes-core-agent-linux package as configured by the qubes module options";
        internal = true;
        defaultText = literalExpression "pkgs.qubes-core-agent-linux";
        default = pkgs.qubes-core-agent-linux;
      };
    };
    config = mkIf cfg.enable (
      let
        qubes-core-agent-linux =
          if cfg.networking
          then (pkgs.qubes-core-agent-linux.override {enableNetworking = true;})
          else (cfg.package.default);
      in {
        services.qubes.core.package = qubes-core-agent-linux;
        services.qubes.db.enable = true;

        # TODO make the username configurable?
        users.groups = {
          qubes = {
            # supposedly this should be 98, however 995 matches the debian value
            gid = 995;
          };
          user = {
            gid = 1000;
          };
        };
        users.users.user = {
          createHome = true;
          group = "user";
          extraGroups = ["qubes" "wheel"];
          home = "/home/user";
          isNormalUser = true;
          password = "";
          shell = pkgs.bash;
          uid = 1000;
        };
        security.sudo.wheelNeedsPassword = false;
        security.pam.services.su.text = lib.mkDefault (lib.mkBefore ''
          auth sufficient ${pkgs.linux-pam}/lib/security/pam_succeed_if.so use_uid user ingroup qubes
        '');
        # ensure qvm-console-dispvm is logged in
        services.getty.autologinUser = "user";

        fileSystems = {
          "/" = {
            device = "/dev/mapper/dmroot";
            fsType = "ext4";
          };
          "/proc/xen" = {
            device = "xen";
            fsType = "xenfs";
            noCheck = true;
          };
          "/rw" = {
            device = "/dev/xvdb";
            fsType = "auto";
            options = [
              "noauto"
              "defaults"
              "discard"
              "nosuid"
              "nodev"
            ];
          };
          "/home" = {
            depends = ["/rw"];
            device = "/rw/home";
            fsType = "none";
            options = [
              "noauto"
              "bind"
              "defaults"
              "nosuid"
              "nodev"
            ];
          };
          "/usr/local" = {
            depends = ["/rw"];
            device = "/rw/usrlocal";
            fsType = "none";
            options = [
              "noauto"
              "bind"
              "defaults"
            ];
          };
        };
        systemd.tmpfiles.rules = [
          # create mount point
          "d /rw 0755 root root"
          # create mount point
          "d /usr/local 0755 root root"
          # mkdir so that first-boot-completed can be created here
          "d /var/lib/qubes 0755 root root"
        ];
        swapDevices = [
          {
            device = "/dev/xvdc1";
          }
        ];

        # qfile-unpacker needs setuid otherwise it fails during initgroups
        security.wrappers.qfile-unpacker = {
          owner = "root";
          group = "root";
          source = "${qubes-core-agent-linux}/bin/qfile-unpacker";
          setuid = true;
        };

        # adding to system packages will cause their xdg autostart files to be picked up
        environment.systemPackages = [
          qubes-core-agent-linux
        ];
        services.udev.packages = [
          pkgs.qubes-linux-utils
          qubes-core-agent-linux
        ];
        systemd.packages = [
          pkgs.qubes-linux-utils
          qubes-core-agent-linux
        ];

        # on other distros this is added on install of the package,
        # rather than create another module we just include in core
        systemd.services.qubes-meminfo-writer = {
          # ensure the service is started on boot, since Install is ignored
          wantedBy = ["multi-user.target"];

          serviceConfig = {
            ExecStart = ["" "${pkgs.qubes-linux-utils}/bin/meminfo-writer 30000 100000 /run/meminfo-writer.pid"];
          };
        };

        systemd.services.qubes-early-vm-config = {
          # ensure the service is started on boot, since Install is ignored
          wantedBy = ["sysinit.target"];

          serviceConfig = {
            ExecStart = ["" "${qubes-core-agent-linux}/lib/qubes/init/qubes-early-vm-config.sh"];
          };
        };

        systemd.services.qubes-misc-post = {
          # ensure the service is started on boot, since Install is ignored
          wantedBy = ["multi-user.target"];

          serviceConfig = {
            ExecStart = ["" "${qubes-core-agent-linux}/lib/qubes/init/misc-post.sh"];
          };
        };

        systemd.services.qubes-mount-dirs = {
          # ensure the service is started on boot, since Install is ignored
          wantedBy = ["multi-user.target"];

          serviceConfig = {
            ExecStart = ["" "${qubes-core-agent-linux}/lib/qubes/init/mount-dirs.sh"];
          };
        };

        systemd.services.qubes-rootfs-resize = {
          # ensure the service is started on boot, since Install is ignored
          #wantedBy = ["multi-user.target"];

          serviceConfig = {
            ExecStart = ["" "${qubes-core-agent-linux}/lib/qubes/init/resize-rootfs-if-needed.sh"];
          };
        };

        #systemd.services.qubes-sync-time = {
        # TODO how to setup the timer?

        systemd.services.qubes-sysinit = {
          # ensure the service is started on boot, since Install is ignored
          wantedBy = ["sysinit.target"];

          serviceConfig = {
            ExecStart = ["" "${qubes-core-agent-linux}/lib/qubes/init/qubes-sysinit.sh"];
          };
        };

        systemd.sockets."qubes-updates-proxy-forwarder" = {
          # ensure the socket is activated, since Install is ignored
          wantedBy = ["multi-user.target"];
        };

        systemd.services."qubes-updates-proxy-forwarder@" = {
          serviceConfig = {
            ExecStart = ["" "${pkgs.qubes-core-qrexec}/bin/qrexec-client-vm --use-stdin-socket '' qubes.UpdatesProxy"];
          };
        };

        systemd.services.xendriverdomain = {
          serviceConfig = {
            ExecStartPre = "${pkgs.coreutils}/bin/mkdir -p /var/log/xen";
            # Note: the first "" overrides the ExecStart from the upstream unit
            ExecStart = ["" "${pkgs.xen}/bin/xl devd"];
          };
        };

        # since there is no global nix proxy setting, add aliases which will
        # inherit the proxy settings from nix-daemon set by update-proxy-configs
        environment.interactiveShellInit = ''
          alias nix="all_proxy=\$(systemctl show nix-daemon -p Environment | grep -oP '(?<=all_proxy=)[^ ]*') nix"
          alias nix-shell="all_proxy=\$(systemctl show nix-daemon -p Environment | grep -oP '(?<=all_proxy=)[^ ]*') nix-shell"
          alias nixos-rebuild="all_proxy=\$(systemctl show nix-daemon -p Environment | grep -oP '(?<=all_proxy=)[^ ]*') nixos-rebuild"
        '';
      }
    );
  }

================
File: hosts/qubes-templatevm/modules/qubes/db.nix
================
{
  config,
  lib,
  pkgs,
  ...
}: let
  init = pkgs.writeShellScriptBin "qubes-db-init" ''
    ${pkgs.coreutils}/bin/mkdir -p /var/log/qubes
    ${pkgs.coreutils}/bin/mkdir -m 0775 -p /var/run/qubes
  '';
in
  with lib; {
    options.services.qubes.db.enable = mkEnableOption "the qubes db daemon";

    config = mkIf config.services.qubes.db.enable {
      boot.kernelModules = ["xen_gntdev" "xen_evtchn"];

      environment.systemPackages = [
        pkgs.qubes-core-qubesdb
      ];
      # TODO  just override parts of existing service?
      systemd.services.qubes-db = {
        description = "Qubes DB agent";
        after = ["systemd-modules-load.service"];

        unitConfig = {
          DefaultDependencies = false;
        };

        serviceConfig = {
          Group = "qubes";
          Type = "notify";
          ExecStartPre = "${init}/bin/qubes-db-init";
          ExecStart = "${pkgs.qubes-core-qubesdb}/sbin/qubesdb-daemon 0";
        };
      };
    };
  }

================
File: hosts/qubes-templatevm/modules/qubes/gui.nix
================
{
  config,
  lib,
  pkgs,
  ...
}: let
  # configure PATH so qubes-gui can find qubes-run-xorg
  # NOTE ideally this would be a normal makeWrapper, however the wrapper is created
  # before resholve rewrites the shell scripts and thus has the unresholved PATH.
  # also attempted to set via `path = [pkgs.qubes-gui-agent-linux];` in the systemd unit
  # however this seems to break the environment causing systemctl calls to fail and thus
  # qubes-gui-agent.service
  qubes-gui = pkgs.writeShellScriptBin "qubes-gui" ''
    export PATH='${pkgs.qubes-gui-agent-linux}/bin'
    exec -a "$0" "${pkgs.qubes-gui-agent-linux}/bin/qubes-gui"  "$@"
  '';
in
  with lib; {
    options.services.qubes.gui.enable = mkEnableOption "the qubes gui agent daemon";

    config = mkIf config.services.qubes.gui.enable {
      services.qubes.core.enable = true;
      services.qubes.db.enable = true;
      services.qubes.qrexec.enable = true;

      services.udev.packages = [
        pkgs.qubes-linux-utils
        pkgs.qubes-gui-agent-linux
      ];

      services.xserver.displayManager.startx.enable = true;
      environment.etc."X11/Xsession".source = config.services.displayManager.sessionData.wrapper;
      services.xserver.displayManager.sessionCommands = ''
        if [ -d ${pkgs.qubes-gui-agent-linux}/etc/X11/xinit/xinitrc.d ] ; then
         for f in ${pkgs.qubes-gui-agent-linux}/etc/X11/xinit/xinitrc.d/?*.sh ; do
          [ -x "$f" ] && . "$f"
         done
         unset f
        fi
      '';
      services.xserver.displayManager.session = [
        {
          manage = "window";
          name = "qubes-session";
          start = ''
            ${pkgs.qubes-gui-agent-linux}/bin/qubes-session
          '';
        }
      ];

      xdg.autostart.enable = true;
      systemd.user.targets.nixos-fake-graphical-session = {
        requires = ["xdg-desktop-autostart.target" "graphical-session.target"];
        before = ["xdg-desktop-autostart.target" "graphical-session.target"];
      };
      # adding to system packages will cause their xdg autostart files to be picked up
      environment.systemPackages = [
        pkgs.qubes-gui-agent-linux
      ];

      security.polkit.enable = true;
      security.pam.services.qubes-gui-agent = {
        rootOK = true;
        startSession = true;
      };

      systemd.packages = [pkgs.qubes-gui-agent-linux];
      systemd.services.qubes-gui-agent = {
        #
        requires = ["qubes-db.service"];
        # ensure the service is started on boot, since Install is ignored
        wantedBy = ["multi-user.target"];
        serviceConfig = {
          ExecStartPre = ["" "${pkgs.bash}/bin/sh -c ${pkgs.qubes-gui-agent-linux}/lib/qubes/qubes-gui-agent-pre.sh"];
          ExecStart = ["" "${qubes-gui}/bin/qubes-gui $GUI_OPTS"];
        };
      };
    };
  }

================
File: hosts/qubes-templatevm/modules/qubes/networking.nix
================
{
  config,
  lib,
  pkgs,
  ...
}:
with lib; {
  options.services.qubes.networking = {
    enable = mkEnableOption "the qubes networking services";
  };

  config = mkIf config.services.qubes.networking.enable {
    services.qubes.core.enable = true;
    services.qubes.core.networking = true;

    services.resolved.enable = true;

    systemd.services.qubes-network-uplink = {
      # ensure the service is started on boot, since Install is ignored
      wantedBy = ["multi-user.target"];
      serviceConfig = {
        ExecStart = ["" "${config.services.qubes.core.package}/lib/qubes/init/network-uplink-wait.sh"];
      };
    };

    systemd.services."qubes-network-uplink@" = {
      # explicitly add qubes-db as a requirement, otherwise on upgrade they may be restarted
      # simultaneously which causes setup-ip to fail.
      requires = ["network-pre.target" "qubes-db.service"];

      serviceConfig = {
        ExecStart = ["" "${config.services.qubes.core.package}/lib/qubes/setup-ip add \"%i\""];
        ExecStop = ["" "${config.services.qubes.core.package}/lib/qubes/setup-ip remove \"%i\""];
      };
    };

    # prevents renaming of xenlight net interfaces, to avoid race conditions
    systemd.network.links."80-qubes-vif" = {
      matchConfig.Driver = "vif";
      linkConfig.NamePolicy = "";
    };

    # ensure that dhcpcd doesn't conflict with the qubes network configuration
    networking.dhcpcd.enable = false;
  };
}

================
File: hosts/qubes-templatevm/modules/qubes/qrexec.nix
================
{
  config,
  lib,
  pkgs,
  ...
}: let
  qrexec_services = ["${pkgs.qubes-core-qrexec}/etc/qubes-rpc" "${pkgs.qubes-core-agent-linux}/etc/qubes-rpc"] ++ map (x: "${x}/etc/qubes-rpc") config.services.qubes.qrexec.packages;
in
  with lib; {
    options.services.qubes.qrexec = {
      enable = mkEnableOption "the qubes remote exec agent daemon";
      packages = mkOption {
        type = types.listOf types.path;
        default = [];
        description = ''
          List of packages containing {command}`qrexec` services.
          All files found in
          {file}`«pkg»/etc/qubes-rpc/`
          will be included.
        '';
        apply = map getBin;
      };
    };

    config = mkIf config.services.qubes.qrexec.enable {
      services.qubes.core.enable = true;

      boot.kernelModules = ["xen_evtchn" "xen_gntalloc"];

      # adding to system packages will cause their xdg autostart files to be picked up
      environment.systemPackages = [
        pkgs.qubes-core-qrexec
      ];

      security.polkit.enable = true;
      security.pam.services.qrexec = {
        rootOK = true;
      };

      # TODO  just override parts of existing service?
      systemd.services.qubes-qrexec-agent = {
        description = "Qubes remote exec agent";
        requires = ["qubes-db.service"];
        wantedBy = ["multi-user.target"];
        after = ["systemd-modules-load.service" "xendriverdomain.service" "systemd-user-sessions.service"];
        environment = {
          QREXEC_SERVICE_PATH = concatStringsSep ":" qrexec_services;
          QREXEC_MULTIPLEXER_PATH = "${pkgs.qubes-core-qrexec}/lib/qubes/qubes-rpc-multiplexer";
        };

        serviceConfig = {
          Type = "notify";
          ExecStartPre = "${pkgs.coreutils}/bin/mkdir -p /var/log/qubes";
          ExecStart = "${pkgs.qubes-core-qrexec}/lib/qubes/qrexec-agent";
          KillMode = "process";
          SELinuxContext = "system_u:system_r:local_login_t:s0-s0:c0.c1023";
        };
      };
    };
  }

================
File: hosts/qubes-templatevm/modules/qubes/sshd.nix
================
{
  config,
  lib,
  pkgs,
  ...
}:
with lib; {
  options.services.qubes.sshd.enable = mkEnableOption "enable sshd over qrexec";

  config = mkIf config.services.qubes.sshd.enable {
    services.qubes.networking.enable = true;
    services.qubes.qrexec.enable = true;

    services.qubes.qrexec.packages = [pkgs.qubes-sshd];
    services.openssh.enable = true;
  };
}

================
File: hosts/qubes-templatevm/modules/qubes/updates.nix
================
{
  config,
  lib,
  pkgs,
  ...
}:
with lib; {
  options.services.qubes.updates = {
    check = mkEnableOption "enable updates check, can be resource intensive due to required nix build";
    flags = lib.mkOption {
      type = lib.types.listOf lib.types.str;
      default = [
        "--update-input"
        "nixpkgs"
        "--update-input"
        "qubes-nixos-template"
      ];
      example = [
        "-I"
        "stuff=/home/alice/nixos-stuff"
        "--option"
        "extra-binary-caches"
        "http://my-cache.example.org/"
      ];
      description = ''
        Any additional flags passed to {command}`nixos-rebuild`, used for both the check and actual update.

        If you are using flakes and use a local repo you can add
        {command}`[ "--update-input" "nixpkgs" "--commit-lock-file" ]`
        to update nixpkgs.
      '';
    };
  };
  config = mkMerge [
    (
      mkIf config.services.qubes.updates.check {
        systemd.timers.qubes-update-check = {
          wantedBy = ["timers.target"];
        };
      }
    )
    (
      let
        upgradesStatusNotify = pkgs.writeShellScriptBin "upgrades-status-notify" ''
          set -e

          if [ "$1" = "started-by-init" ]; then
              true "INFO: Started by systemd unit (timer.) Continuing..."
          else
              true "INFO: Not started by systemd unit (timer.) Probably started by package manager hook script."
              if test -e /run/qubes/persistent-full; then
                  true "INFO: Running inside Template and Standalone. Continuing..."
              else
                  true "INFO: Probably running inside App Qube. Stop."
                  exit 0
              fi
          fi

          # FIXME a lot of assumptions here...
          tempdir=$(mktemp -d /tmp/tmp.nix-updateinfo.XXX)
          cp -r /etc/nixos/. $tempdir
          cd $tempdir
          ${config.nix.package.out}/bin/nix build ".#nixosConfigurations.$(${pkgs.nettools}/bin/hostname).config.system.build.toplevel" ${toString config.services.qubes.updates.flags} 1>&2
          nix_diff=$(${config.nix.package.out}/bin/nix store diff-closures /run/current-system ./result \
            | ${pkgs.gawk}/bin/awk '/[0-9] →|→ [0-9]/ && !/nixos/' || true)
          echo "$nix_diff" 1>&2
          if [ -z "$nix_diff" ]; then
            ${pkgs.qubes-core-qrexec}/lib/qubes/qrexec-client-vm dom0 qubes.NotifyUpdates /bin/sh -c 'echo 0'
          else
            ${pkgs.qubes-core-qrexec}/lib/qubes/qrexec-client-vm dom0 qubes.NotifyUpdates /bin/sh -c 'echo 1'
          fi
          cd ~-
          rm -rf "$tempdir"
        '';

        getPackages = pkgs.writeShellScriptBin "qubes-nixos-get-packages" ''
          empty=$(${config.nix.package.out}/bin/nix build --impure --no-link --print-out-paths --expr '(with import <nixpkgs> { }; pkgs.runCommand "empty" { } "mkdir -p $out")')
          ${config.nix.package.out}/bin/nix store diff-closures "$empty" /run/current-system | ${pkgs.gawk}/bin/awk '/→ [0-9]/ && !/nixos/' |  ${pkgs.gnused}/bin/sed 's/\x1b\[[0-9;]*m//g'
        '';

        nixosRebuildWrapper = pkgs.writeShellScriptBin "qubes-nixos-rebuild" ''
          # in update-proxy-configs we might set proxy via an override
          export all_proxy=$(systemctl show nix-daemon -p Environment | grep -oP '(?<=all_proxy=)[^ ]*')

          ${config.system.build.nixos-rebuild}/bin/nixos-rebuild switch ${toString config.services.qubes.updates.flags}
        '';

        vmexec = pkgs.writeTextFile {
          name = "qubes-rpc-vmexec";
          # NOTE: in order to perform updates, qubes `vmupdate` injects a python agent into the vm and then
          # executes it. the agent then calls our scripts to perform various actions.
          # we need to ensure the VMExec RPC has the correct PATH to find the dependencies and
          # our update scripts.
          text = ''
            #!${pkgs.stdenv.shell}

            export PATH=${lib.makeBinPath (with pkgs; [coreutils gnutar python3 upgradesStatusNotify getPackages nixosRebuildWrapper])}:$PATH
            exec ${config.services.qubes.core.package.out}/bin/qubes-vmexec "$@"
          '';
          executable = true;
          destination = "/etc/qubes-rpc/qubes.VMExec";
        };
      in {
        services.qubes.qrexec.packages = [vmexec];
        systemd.services.qubes-update-check = {
          serviceConfig = {
            ExecStart = ["" "${upgradesStatusNotify}/bin/upgrades-status-notify started-by-init"];
          };
        };
      }
    )
  ];
}

================
File: hosts/qubes-templatevm/modules/qubes/usb.nix
================
{
  config,
  lib,
  pkgs,
  ...
}:
with lib; {
  options.services.qubes.usb.enable = mkEnableOption "enable usb over qrexec";

  config = mkIf config.services.qubes.usb.enable {
    environment.systemPackages = [pkgs.usbutils];
    services.qubes.qrexec.enable = true;
    services.qubes.qrexec.packages = [pkgs.qubes-usb-proxy];
    services.udev.packages = [
      pkgs.qubes-usb-proxy
    ];
  };
}

================
File: hosts/qubes-templatevm/pkgs/qubes-core-agent-linux/default.nix
================
{
  fetchFromGitHub,
  lib,
  resholve,
  wrapGAppsNoGuiHook,
  stdenv,
  bash,
  coreutils,
  diffutils,
  e2fsprogs,
  dconf,
  desktop-file-utils,
  fakeroot,
  findutils,
  gawk,
  getent,
  gnome-packagekit,
  gnugrep,
  gobject-introspection,
  graphicsmagick,
  haveged,
  iproute2,
  kmod,
  librsvg,
  lsb-release,
  lvm2,
  mount,
  nettools,
  ntp,
  pandoc,
  parted,
  pkg-config,
  procps,
  psmisc,
  python3,
  python3Packages,
  qubes-core-qrexec,
  qubes-core-qubesdb,
  qubes-core-vchan-xen,
  qubes-linux-utils,
  gnused,
  shared-mime-info,
  socat,
  systemd,
  umount,
  util-linux,
  xdg-utils,
  xorg,
  zenity,
  # FIXME networking optional
  networkmanager,
  tinyproxy,
  nftables,
  conntrack-tools,
  enableNetworking ? false,
}: let
  scripts_using_functions = [
    "lib/qubes/init/qubes-early-vm-config.sh"
    "lib/qubes/init/qubes-sysinit.sh"
    "lib/qubes/init/misc-post.sh"
    "lib/qubes/init/mount-dirs.sh"
    "lib/qubes/init/setup-rwdev.sh"
    "lib/qubes/init/bind-dirs.sh"
  ];
  scripts =
    scripts_using_functions
    ++ [
      "etc/qubes-rpc/qubes.Filecopy"
      "etc/qubes-rpc/qubes.VMShell"
      "etc/qubes-rpc/qubes.WaitForSession"
      "lib/qubes/init/functions"
      "lib/qubes/init/setup-rw.sh"
      "lib/qubes/init/resize-rootfs-if-needed.sh"
      "lib/qubes/resize-rootfs"
      "lib/qubes/update-proxy-configs"
    ];
in
  resholve.mkDerivation rec {
    version = "4.3.5";
    pname = "qubes-core-agent-linux";

    #PKG_CONFIG_SYSTEMD_SYSTEMDSYSTEMUNITDIR = "${placeholder "out"}/lib/systemd/system";

    src = fetchFromGitHub {
      owner = "QubesOS";
      repo = "qubes-core-agent-linux";
      rev = "v${version}";
      hash = "sha256-ff+L1t6TYCD9S6iyCebZlIuYP0oHnUcQiSdOJ1YHSQw=";
    };

    nativeBuildInputs =
      [
        bash
        desktop-file-utils
        gobject-introspection
        lsb-release
        pandoc
        pkg-config
        python3
        qubes-core-qubesdb
        qubes-core-vchan-xen
        qubes-linux-utils
        shared-mime-info
        wrapGAppsNoGuiHook
        xorg.libX11
      ]
      ++ (with python3Packages; [
        wrapPython
        distutils
        setuptools
      ]);

    buildInputs =
      [
        coreutils
        dconf
        fakeroot
        gawk
        gnome-packagekit
        gnused
        graphicsmagick
        haveged
        iproute2
        librsvg
        ntp
        parted
        procps
        python3
        qubes-core-qrexec
        qubes-core-qubesdb
        qubes-core-vchan-xen
        qubes-linux-utils
        socat
        xdg-utils
        zenity
      ]
      ++ lib.optional enableNetworking networkmanager
      ++ lib.optional enableNetworking tinyproxy
      ++ lib.optional enableNetworking nftables
      ++ lib.optional enableNetworking conntrack-tools
      ++ (with python3Packages; [
        dbus-python
        pygobject3
        pyxdg
      ]);

    postPatch = ''
      substituteInPlace Makefile --replace 'SHELL = /bin/bash' 'SHELL = ${bash}/bin/bash'

      # skip installing qfile-unpacker / bin-qfile-unpacker as SUID
      sed -i 's/-m 4755/-m 755/g' qubes-rpc/Makefile
    '';

    buildPhase = ''
      # Fix for network tools paths
      # FIXME use substituteInPlace
      # sed 's:/sbin/ip:pkgs.iproute2/bin/ip:g' -i network/*
      # sed 's:/bin/grep:pkgs.grep/bin/grep:g' -i network/*

      # Fix for archlinux sbindir
      # FIXME use substituteInPlace
      # sed 's:/usr/sbin/ntpdate:/usr/bin/ntpdate:g' -i qubes-rpc/sync-ntp-clock

      for dir in qubes-rpc misc; do
          make -C "$dir"
      done
    '';

    # Don't move doc, needed in the subsequent packaging
    forceShare = ["man" "info"];

    # FIXME
    # - finish path fixup
    # - investigate which archlinux specific installs need replacement
    # - fixup services in lib/systemd/system/
    # - figure out how to adapt service dropins?
    installPhase =
      ''
        # install -D -m 0644 -- "boot/grub.qubes" "$out/etc/default/grub.qubes"
        make install-corevm \
            PYTHON_PREFIX_ARG="--prefix ." \
            DESTDIR="$out" \
            BINDIR=/bin \
            SBINDIR=/bin \
            LIBDIR=/lib \
            SYSLIBDIR=/lib \
            SYSTEM_DROPIN_DIR=/usr/lib/systemd/system \
            USER_DROPIN_DIR=/usr/lib/systemd/user \
            DIST=nixos \
            PYTHON=${python3}/bin/python3
        make -C app-menu install DESTDIR="$out" install BINDIR=/bin LIBDIR=/lib
        make -C misc install DESTDIR="$out" LIBDIR=/lib SYSLIBDIR=/lib
        make -C qubes-rpc DESTDIR="$out" BINDIR=/bin LIBDIR=/lib install
        make -C qubes-rpc/caja DESTDIR="$out" BINDIR=/bin LIBDIR=/lib install
        make -C qubes-rpc/kde DESTDIR="$out" BINDIR=/bin LIBDIR=/lib install
        make -C qubes-rpc/nautilus DESTDIR="$out" BINDIR=/bin LIBDIR=/lib QUBESLIBDIR=/lib/qubes install
        make -C qubes-rpc/thunar DESTDIR="$out" BINDIR=/bin LIBDIR=/lib install

        # install cron bindmount
        mkdir -p "$out/lib/qubes-bind-dirs.d"
        install -m 0644 "filesystem/30_cron.conf" "$out/lib/qubes-bind-dirs.d/30_cron.conf"

        # nixos does not have /etc/skel, initialize_home() requires it
        substituteInPlace "$out/lib/qubes/init/functions" --replace "/etc/skel" "/var/empty"

        # Fixup paths
        substituteInPlace "$out/bin/qubes-session-autostart" --replace "QUBES_XDG_CONFIG_DROPINS = '/etc/qubes/autostart'" "QUBES_XDG_CONFIG_DROPINS = \"$out/etc/qubes/autostart\""

        # use suid wrapper we will create in the module
        substituteInPlace "$out/etc/qubes-rpc/qubes.Filecopy" --replace "/usr/lib/qubes/qfile-unpacker" "/run/wrappers/bin/qfile-unpacker"

        for path in ${lib.concatStringsSep " " scripts_using_functions}; do
          substituteInPlace "$out/$path" --replace '/usr/lib/qubes/init/functions' "functions"
        done

        substituteInPlace "$out/lib/qubes/init/bind-dirs.sh" --replace "for source_folder in /usr/lib/qubes-bind-dirs.d /etc/qubes-bind-dirs.d /rw/config/qubes-bind-dirs.d ; do" "for source_folder in $out/lib/qubes-bind-dirs.d /rw/config/qubes-bind-dirs.d ; do"

        # Install systemd script allowing to automount /lib/modules
        # install -m 644 "archlinux/PKGBUILD.qubes-ensure-lib-modules.service" "$out/usr/lib/systemd/system/qubes-ensure-lib-modules.service"

        # Install pacman hook to update desktop icons
        # mkdir -p "$out/usr/share/libalpm/hooks/"
        # install -m 644 "archlinux/PKGBUILD.qubes-update-desktop-icons.hook" "$out/usr/share/libalpm/hooks/qubes-update-desktop-icons.hook"

        # Install pacman hook to notify dom0 about successful upgrade
        # install -m 644 "archlinux/PKGBUILD.qubes-post-upgrade.hook" "$out/usr/share/libalpm/hooks/qubes-post-upgrade.hook"

        # Install pacman.d drop-ins (at least 1 drop-in must be installed or pacman will fail)
        # mkdir -p -m 0755 "$out/etc/pacman.d"
        # install -m 644 "archlinux/PKGBUILD-qubes-pacman-options.conf" "$out/etc/pacman.d/10-qubes-options.conf"

        # remove the default VMExec definition since we need to modify it's PATH based on user args in the updates module
        rm "$out/etc/qubes-rpc/qubes.VMExec"

        mv "$out/usr/bin/qubes-vmexec" "$out/bin/"
        mv "$out/usr/share" "$out/share"
        mv "$out/etc/systemd/system/xendriverdomain.service" "$out/lib/systemd/system/"

        rm -rf "$out/usr/bin"
        rm -rf "$out/var/run"
      ''
      + lib.optionalString (!enableNetworking) ''
        # mock update-proxy-configs with an empty script
        echo "#!${bash}/bin/sh" > "$out/lib/qubes/update-proxy-configs"
        chmod +x "$out/lib/qubes/update-proxy-configs"
      ''
      + lib.optionalString enableNetworking ''
        make -C network install \
            PYTHON_PREFIX_ARG="--prefix ." \
            DESTDIR="$out" \
            BINDIR=/bin \
            SBINDIR=/bin \
            LIBDIR=/lib \
            SYSLIBDIR=/lib \
            SYSTEM_DROPIN_DIR=/usr/lib/systemd/system \
            USER_DROPIN_DIR=/usr/lib/systemd/user \
            DIST=nixos
        make install-netvm \
            PYTHON_PREFIX_ARG="--prefix ." \
            DESTDIR="$out" \
            BINDIR=/bin \
            SBINDIR=/bin \
            LIBDIR=/lib \
            SYSLIBDIR=/lib \
            SYSTEM_DROPIN_DIR=/usr/lib/systemd/system \
            USER_DROPIN_DIR=/usr/lib/systemd/user \
            DIST=nixos


        for path in lib/qubes/init/network-uplink-wait.sh lib/qubes/setup-ip lib/qubes/update-proxy-configs ; do
          substituteInPlace "$out/$path" --replace '/usr/lib/qubes/init/functions' "functions"
        done

        cat >> "$out/lib/qubes/update-proxy-configs" <<EOT

        # NixOS
        if [ -d /run/current-system ]; then
            # setup for anything using nix-daemon
            mkdir -p /run/systemd/system/nix-daemon.service.d
            cat > /run/systemd/system/nix-daemon.service.d/override.conf <<EOF
        # This file is automatically generated by Qubes (\$0 script).
        # All modifications here will be lost.
        [Service]
        Environment="all_proxy=\$PROXY_ADDR"
        EOF

            # also setup the proxy for our updates check explicitly since some downloads
            # (e.g. flake updates) do not go through the nix daemon
            mkdir -p /run/systemd/system/qubes-update-check.service.d
            cp /run/systemd/system/nix-daemon.service.d/override.conf /run/systemd/system/qubes-update-check.service.d/override.conf

            systemctl daemon-reload
            systemctl restart nix-daemon
        fi
        EOT

        substituteInPlace "$out/etc/udev/rules.d/99-qubes-network.rules" --replace '/usr/bin/systemctl' '${systemd}/bin/systemctl'

        mv "$out/etc/udev/rules.d/99-qubes-network.rules" "$out/lib/udev/rules.d/"
      '';

    solutions = {
      default = {
        scripts =
          scripts
          ++ lib.optional enableNetworking "lib/qubes/init/network-uplink-wait.sh"
          ++ lib.optional enableNetworking "lib/qubes/setup-ip";
        interpreter = "none";
        fake.external =
          # guarded by check for /sys/fs/selinux
          ["restorecon"]
          ++ lib.optional (!enableNetworking) "ip";
        fix = {
          "/bin/bash" = true;
          "/usr/bin/qubes-vmexec" = true;
          "/usr/bin/qubesdb-read" = true;
          "/usr/lib/qubes/init/bind-dirs.sh" = true;
          "/usr/lib/qubes/init/setup-rw.sh" = true;
          "/usr/lib/qubes/init/setup-rwdev.sh" = true;
          "/usr/lib/qubes/qubes-setup-dnat-to-ns" = true;
          "/usr/lib/qubes/qvm_nautilus_bookmark.sh" = true;
          "/usr/lib/qubes/resize-rootfs" = true;
          "/usr/lib/qubes/update-proxy-configs" = true;
          "/lib/systemd/systemd-sysctl" = true;
          "/sbin/ip" = true;
          umount = true;
          mount = true;
        };
        inputs =
          [
            "bin"
            "lib/qubes"
            "lib/qubes/init"
            "${qubes-core-qrexec}/lib/qubes"
            "${systemd}/lib/systemd"
            bash
            coreutils
            diffutils
            e2fsprogs
            findutils
            gawk
            getent
            gnugrep
            gnused
            kmod
            lvm2
            mount
            nettools
            networkmanager
            parted
            procps
            psmisc
            qubes-core-qrexec
            qubes-core-qubesdb
            stdenv.cc.libc
            systemd
            umount
            util-linux
          ]
          ++ lib.optional enableNetworking iproute2;
        keep = {
          source = ["$file_name"];
          "$rc" = true;
          "/rw/config/qubes_ip_change_hook" = enableNetworking;
          "/rw/config/qubes-ip-change-hook" = enableNetworking;
          "/run/wrappers/bin/qfile-unpacker" = true;
        };
        execer =
          [
            "cannot:${e2fsprogs}/bin/fsck.ext4"
            "cannot:${e2fsprogs}/bin/mkfs.ext4"
            "cannot:${kmod}/bin/modprobe"
            "cannot:${lib.getBin lvm2}/bin/dmsetup"
            "cannot:${networkmanager}/bin/nmcli"
            "cannot:${systemd}/bin/systemctl"
            "cannot:${systemd}/bin/udevadm"
            "cannot:bin/qubes-vmexec"
            "cannot:lib/qubes/init/bind-dirs.sh"
            "cannot:lib/qubes/qfile-unpacker"
          ]
          ++ lib.optional enableNetworking "cannot:${iproute2}/bin/ip";
      };
    };

    pythonPath = with python3Packages; [dbus-python pygobject3 pyxdg];

    dontWrapGApps = true;

    preFixup = ''
      makeWrapperArgs+=("''${gappsWrapperArgs[@]}")
      buildPythonPath "$out $pythonPath"
    '';

    postFixup = ''
      wrapPythonPrograms
    '';

    meta = with lib; {
      description = "The Qubes core files for installation inside a Qubes VM";
      homepage = "https://qubes-os.org";
      license = licenses.gpl2Plus;
      maintainers = [];
      platforms = platforms.linux;
    };
  }

================
File: hosts/qubes-templatevm/pkgs/qubes-core-qrexec/default.nix
================
{
  lib,
  fetchFromGitHub,
  resholve,
  bash,
  coreutils,
  glibc,
  lsb-release,
  pam,
  pandoc,
  pkg-config,
  python3,
  python3Packages,
  qubes-core-vchan-xen,
  util-linux,
}:
resholve.mkDerivation rec {
  pname = "qubes-core-qrexec";
  version = "4.2.21";

  src = fetchFromGitHub {
    owner = "QubesOS";
    repo = pname;
    rev = "v${version}";
    hash = "sha256-an/jvcVJoCjhlcaWvf3pJbEukg9yei8oUoCvDkMiYKk=";
  };

  nativeBuildInputs = [
    bash
    pkg-config
    python3Packages.distutils
    python3Packages.setuptools
    lsb-release
    pandoc
  ];

  buildInputs = [
    glibc
    qubes-core-vchan-xen
    python3
    pam
  ];

  buildPhase = ''
    make all-base
    make all-vm
  '';

  # FIXME
  # - need to rewrite lib/qubes-qrexec-policy-agent autostart ( `exec qrexec-policy-agent "$@"` )
  # - need to add qubes-qrexec-agent.service service
  # - need to rewrite /etc/qubes-rpc in a few places
  # - subs in qubes-rpc-multiplexer

  installPhase = ''
    make install-base DESTDIR=$out PREFIX=/ PYTHON_PREFIX_ARG="--prefix ." LIBDIR="/lib" SYSLIBDIR="/lib"
    make install-vm DESTDIR=$out PREFIX=/ PYTHON_PREFIX_ARG="--prefix ." LIBDIR="/lib" SYSLIBDIR="/lib"

    mv $out/usr/bin $out/bin
    mv $out/usr/include $out/include
    mv $out/usr/lib/qubes $out/lib/qubes
    mv $out/usr/share $out/share

    substituteInPlace "$out/etc/xdg/autostart/qrexec-policy-agent.desktop" --replace '/usr/lib/qubes/qrexec-policy-agent-autostart' "$out/lib/qubes/qrexec-policy-agent-autostart"

    rm -rf $out/usr
  '';

  solutions = {
    default = {
      scripts = ["lib/qubes/qubes-rpc-multiplexer"];
      interpreter = "none";
      inputs = [coreutils util-linux];
    };
  };

  meta = with lib; {
    description = "The Qubes qrexec files (qube side)";
    homepage = "https://qubes-os.org";
    license = licenses.gpl2Plus;
    maintainers = [];
    platforms = platforms.linux;
  };
}

================
File: hosts/qubes-templatevm/pkgs/qubes-core-qubesdb/default.nix
================
{
  lib,
  stdenv,
  fetchFromGitHub,
  makeWrapper,
  bash,
  glibc,
  pkg-config,
  python3,
  python3Packages,
  qubes-core-vchan-xen,
  systemd,
}: let
  qubesdb-cmds = "qubesdb-read qubesdb-write qubesdb-rm qubesdb-multiread qubesdb-list qubesdb-watch";
in
  stdenv.mkDerivation rec {
    pname = "qubes-core-qubesdb";
    version = "4.2.6";

    src = fetchFromGitHub {
      owner = "QubesOS";
      repo = pname;
      rev = "v${version}";
      hash = "sha256-vPv74tBD7elYNqpgKLFKAanMH8D18OdDj0xhmw8aWwM=";
    };

    nativeBuildInputs = [
      bash
      makeWrapper
      pkg-config
      python3Packages.setuptools
    ];

    buildInputs = [
      glibc
      qubes-core-vchan-xen
      python3
      systemd
    ];

    buildPhase = ''
      make all PREFIX=/ LIBDIR="$out/lib" INCLUDEDIR="$out/include" BINDIR="$out/bin" SBINDIR="$out/sbin"
    '';

    installPhase = ''
      make install DESTDIR=$out PREFIX=/ PYTHON_PREFIX_ARG="--prefix ." LIBDIR="/lib" INCLUDEDIR="/include" BINDIR="/bin" SBINDIR="/sbin"

      # dashes in the full nix store path conflict with command parsing for the qubesdb-cmd symlinks
      # we will replace them with wrappers that set the argv0 in postFixup
      for cmd in ${qubesdb-cmds}; do
        rm "$out/bin/$cmd";
      done
    '';

    postFixup = ''
      for cmd in ${qubesdb-cmds}; do
        makeWrapper "$out/bin/qubesdb-cmd" "$out/bin/$cmd" \
          --argv0 "$cmd"
      done
    '';

    meta = with lib; {
      description = "QubesDB libs and daemon service";
      homepage = "https://qubes-os.org";
      license = licenses.gpl2Plus;
      maintainers = [];
      platforms = platforms.linux;
    };
  }

================
File: hosts/qubes-templatevm/pkgs/qubes-core-vchan-xen/default.nix
================
{
  lib,
  stdenv,
  fetchFromGitHub,
  xen,
}:
stdenv.mkDerivation rec {
  pname = "qubes-core-vchan-xen";
  version = "4.2.4";

  src = fetchFromGitHub {
    owner = "QubesOS";
    repo = pname;
    rev = "v${version}";
    hash = "sha256-O7i5zK7S+d/O8oPMvm6szNR1Xq6qSBNE2+uFI/1mDEg=";
  };

  buildInputs = [xen];

  buildPhase = ''
    make all PREFIX=/ LIBDIR="$out/lib" INCLUDEDIR="$out/include"
  '';

  installPhase = ''
    make install DESTDIR=$out PREFIX=/
  '';

  env.CFLAGS = "-DHAVE_XC_DOMAIN_GETINFO_SINGLE";

  meta = with lib; {
    description = "Libraries required for the higher-level Qubes daemons and tools";
    homepage = "https://qubes-os.org";
    license = licenses.gpl2Plus;
    maintainers = [];
    platforms = platforms.linux;
  };
}

================
File: hosts/qubes-templatevm/pkgs/qubes-gui-agent-linux/default.nix
================
{
  lib,
  fetchFromGitHub,
  makeWrapper,
  resholve,
  autoPatchelfHook,
  autoconf,
  automake,
  bash,
  gnugrep,
  coreutils,
  libtool,
  libXt,
  lsb-release,
  git,
  gnused,
  mesa,
  pam,
  patch,
  pipewire,
  pixman,
  pkg-config,
  python3Packages,
  pulseaudio,
  qubes-core-qrexec,
  qubes-core-agent-linux,
  qubes-core-vchan-xen,
  qubes-core-qubesdb,
  qubes-gui-common,
  systemd,
  util-linux,
  which,
  xen,
  xfce,
  xorg,
  zenity,
}:
resholve.mkDerivation rec {
  version = "4.2.17";
  pname = "qubes-gui-agent-linux";

  src = fetchFromGitHub {
    owner = "QubesOS";
    repo = pname;
    rev = "v${version}";
    hash = "sha256-dELBBU0sRtp62QwrZKvV9SJQysMG5Eo1oQMaQy3lXUg=";
  };

  nativeBuildInputs =
    [
      autoPatchelfHook
      makeWrapper
      pkg-config
      patch
      git
      mesa # gbm
      automake
      autoconf
      libtool
      pam
      pulseaudio
      pipewire
      libXt
      pixman
      lsb-release
      qubes-gui-common
      qubes-core-vchan-xen
      qubes-core-qubesdb
      xen
    ]
    ++ (with xorg; [
      libXdamage
      libXcomposite
      utilmacros
      xorgserver
    ]);

  buildInputs =
    [
      coreutils
      qubes-core-vchan-xen
      qubes-core-qubesdb
      pam
      zenity
      python3Packages.xcffib
      systemd
      xfce.xfconf
      # xdg-user-dirs-update
    ]
    ++ (with xorg; [
      libXcomposite
      libXdamage
      xinit
      xrandr
      xprop
      xsetroot
    ]);

  postPatch = ''
    rm -f pulse/pulsecore
    ln -s "pulsecore-17.0" pulse/pulsecore

    # since we don't know the final resholved package
    # path, it's easiest if we instead configure PATH later
    sed -i -e 's#execl("/usr/bin/qubes-run-xorg",#execlp("qubes-run-xorg",#' gui-agent/vmside.c
  '';

  buildPhase = ''
    make appvm
  '';

  # FIXME sub xdg autostart paths
  # FIXME nixgl
  installPhase = ''
    make install-rh-agent \
        DESTDIR="$out" \
        LIBDIR=/lib \
        USRLIBDIR=/lib \
        SYSLIBDIR=/lib

    # this will point to the unresholved package but it is not an
    # issue since our wrapper only refers to external resources
    substituteInPlace "$out/etc/xdg/autostart/qubes-qrexec-fork-server.desktop" --replace '/usr/bin/qrexec-fork-server' "$out/bin/qrexec-fork-server"

    # these are nested within runuser calls, easier to just substituteInPlace
    # and pretend to resholve that runuser is not executing it's args
    substituteInPlace "$out/usr/bin/qubes-run-xorg" --replace ' /bin/sh' ' ${bash}/bin/sh'
    substituteInPlace "$out/usr/bin/qubes-run-xorg" --replace '/usr/bin/xinit' '${xorg.xinit}/bin/xinit'
    # skip the wrapper since it's just to determine which binary to call
    substituteInPlace "$out/usr/bin/qubes-run-xorg" --replace '/usr/lib/qubes/qubes-xorg-wrapper' "${xorg.xorgserver}/bin/Xorg"

    # config file template and rendered config relocation
    substituteInPlace "$out/usr/bin/qubes-run-xorg" --replace '/etc/X11/xorg-qubes.conf.template' "$out/etc/X11/xorg-qubes.conf.template"
    substituteInPlace "$out/usr/bin/qubes-run-xorg" --replace ' /etc/X11/xorg-qubes.conf' ' /var/run/xorg-qubes.conf'
    substituteInPlace "$out/usr/bin/qubes-run-xorg" --replace '-config xorg-qubes.conf' '-config /var/run/xorg-qubes.conf'

    # resholve won't replace the absolute path reference in this conditional,
    # we can just substitute with true
    # FIXME this wasn't actually replaced properly before...
    # substituteInPlace "$out/usr/bin/qubes-run-xorg" --replace 'if [ -x /bin/loginctl ]; then' 'if [ true ]; then'

    # replace xdg autostart since we generate systemd units instead
    # FIXME probably needs to be moved earlier in process
    substituteInPlace "$out/usr/bin/qubes-session" --replace '/usr/bin/qubes-session-autostart QUBES X-QUBES "X-$VMTYPE" "X-$UPDTYPE"' 'systemctl --user set-environment XDG_CURRENT_DESKTOP="QUBES:X-QUBES:X-$VMTYPE:X-$UPDTYPE"'

    cat >> $out/etc/X11/xorg-qubes.conf.template <<EOF
    Section "Files"
      ModulePath "${xorg.xorgserver}/lib/xorg/modules"
      ModulePath "${xorg.xorgserver}/lib/xorg/modules/extensions"
      ModulePath "${xorg.xorgserver}/lib/xorg/modules/drivers"
      ModulePath "$out/lib/xorg/modules/drivers"
    EndSection
    EOF

    mv "$out/usr/bin" "$out/bin"
    mv "$out/usr/share" "$out/share"
    mv "$out/usr/lib/qubes" "$out/lib/qubes"
    mv "$out/usr/lib/sysctl.d" "$out/lib/sysctl.d"

    rm -rf "$out/usr"
  '';

  solutions = {
    default = {
      scripts = [
        "lib/qubes/qubes-gui-agent-pre.sh"
        "bin/qubes-run-xorg"
        "bin/qubes-session"
        "etc/X11/xinit/xinitrc.d/50guivm-windows-prefix.sh"
        "etc/X11/xinit/xinitrc.d/60xfce-desktop.sh"
      ];
      interpreter = "none";
      fake = {
        # ignore for now, these paths are present in file check so the paths won't be reached
        source = [
          "/etc/X11/xinit/xinitrc.d/qubes-keymap.sh"
          "/etc/X11/Xsession.d/90qubes-keymap"
        ];
        # just ignore this, currently guarded by an unreplaced conditional
        # using which which is always false
        external = [
          "xdg-user-dirs-update"
        ];
      };
      fix = {
        source = ["/usr/lib/qubes/init/functions"];
        "/usr/bin/qubes-gui-runuser" = true;
        "/usr/bin/qubesdb-read" = true;
      };
      inputs = [
        "bin"
        "${qubes-core-agent-linux}/lib/qubes"
        "${qubes-core-agent-linux}/lib/qubes/init/functions"
        bash
        coreutils
        gnused
        qubes-core-qubesdb
        systemd
        util-linux
        which
        xfce.xfce4-settings
        xfce.xfconf
        xorg.xprop
        xorg.xinit
        xorg.xsetroot
      ];
      keep = {
        source = [
          "$HOME"
          "/etc/X11/xinit/xinitrc.d/qubes-keymap.sh"
          "/etc/X11/Xsession.d/90qubes-keymap"
        ];
        "$XSESSION" = true;
      };
      execer = [
        "cannot:${systemd}/bin/systemctl"
        "cannot:${xfce.xfce4-settings}/bin/xfsettingsd"
        "cannot:${xfce.xfconf}/bin/xfconf-query"
        # lies
        "cannot:bin/qubes-gui-runuser"
        "cannot:${util-linux}/bin/runuser"
      ];
    };
  };

  postFixup = ''
    # set the qrexec paths and override PATH so that we can
    # launch programs similar to the user from a login shell
    makeWrapper "${qubes-core-qrexec}/bin/qrexec-fork-server" "$out/bin/qrexec-fork-server" \
      --run "export QREXEC_SERVICE_PATH=\$(${systemd}/bin/systemctl cat qubes-qrexec-agent.service | ${gnugrep}/bin/grep -Po '(?<=QREXEC_SERVICE_PATH=)[^\"\n]*')" \
      --set QREXEC_MULTIPLEXER_PATH "${qubes-core-qrexec}/lib/qubes/qubes-rpc-multiplexer" \
      --set PATH "/run/wrappers/bin:/home/user/.nix-profile/bin:/nix/profile/bin:/home/user/.local/state/nix/profile/bin:/etc/profiles/per-user/user/bin:/nix/var/nix/profiles/default/bin:/run/current-system/sw/bin"

  '';

  meta = with lib; {
    description = "The Qubes GUI Agent for AppVMs";
    homepage = "https://qubes-os.org";
    license = licenses.gpl2Plus;
    maintainers = [];
    platforms = platforms.linux;
  };
}

================
File: hosts/qubes-templatevm/pkgs/qubes-gui-common/default.nix
================
{
  lib,
  stdenv,
  fetchFromGitHub,
}:
stdenv.mkDerivation rec {
  pname = "qubes-gui-common";
  version = "4.2.5";

  src = fetchFromGitHub {
    owner = "QubesOS";
    repo = pname;
    rev = "v${version}";
    hash = "sha256-rv80X/wecXRtJ3HhHgksJd43AKvLQTHyX8e1EJPwEO0=";
  };

  buildPhase = ''
    true
  '';

  installPhase = ''
    mkdir -p $out/include
    cp include/*.h $out/include/
  '';

  meta = with lib; {
    description = "Common files for Qubes GUI - protocol headers";
    homepage = "https://qubes-os.org";
    license = licenses.gpl2Plus;
    maintainers = [];
    platforms = platforms.linux;
  };
}

================
File: hosts/qubes-templatevm/pkgs/qubes-linux-utils/default.nix
================
{
  lib,
  stdenv,
  fetchFromGitHub,
  resholve,
  coreutils,
  gnugrep,
  icu,
  lsb-release,
  kmod,
  graphicsmagick,
  pkg-config,
  python3Packages,
  qubes-core-vchan-xen,
  qubes-core-qubesdb,
  xen,
}: let
  version = "4.3.3";
  name = "qubes-linux-utils";
  resholved = resholve.mkDerivation rec {
    inherit version;
    pname = "${name}-resholved";

    src = fetchFromGitHub {
      owner = "QubesOS";
      repo = name;
      rev = "v${version}";
      hash = "sha256-XHx1wt2whMQC+TUc2U97KCOJ8memT6cH0BAp2zxYQyQ=";
    };

    nativeBuildInputs =
      [
        icu
        pkg-config
        qubes-core-vchan-xen
        xen
      ]
      ++ (with python3Packages; [
        distutils
        setuptools
      ]);

    buildInputs =
      [
        graphicsmagick
        icu
      ]
      ++ (with python3Packages; [
        pycairo
        pillow
        numpy
      ]);

    postPatch = ''
      substituteInPlace qmemman/Makefile --replace '_XENSTORE_H=$(shell ls /usr/include/xenstore.h)' '_XENSTORE_H=1'
    '';

    buildPhase = ''
      make all
    '';

    # FIXME need to sub and move qubes-meminfo-writer
    installPhase = ''
      make install \
          PYTHON_PREFIX_ARG="--prefix ." \
          DESTDIR="$out" \
          LIBDIR=/lib \
          SYSLIBDIR=/lib \
          SBINDIR=/bin \
          SCRIPTSDIR=/lib/qubes \
          INCLUDEDIR=/include


      mv "$out/usr/lib/systemd" "$out/lib/systemd"

      rm -rf "$out/usr"
    '';

    solutions = {
      default = {
        scripts = [
          "lib/qubes/udev-usb-add-change"
          "lib/qubes/udev-usb-remove"
        ];
        interpreter = "none";
        fix = {
          "/sbin/modprobe" = true;
        };
        inputs = [
          coreutils
          gnugrep
          kmod
          qubes-core-qubesdb
        ];
        execer = [
          "cannot:${kmod}/bin/modprobe"
        ];
      };
    };

    meta = with lib; {
      description = "Common Linux files for Qubes VM.";
      homepage = "https://qubes-os.org";
      license = licenses.gpl2Plus;
      maintainers = [];
      platforms = platforms.linux;
    };
  };
in
  # FIXME stupid hack, can't figure out how to do these fixups otherwise
  lib.extendDerivation true {} (stdenv.mkDerivation {
    src = resholved;
    inherit version;
    pname = name;

    dontConfigure = true;
    dontBuild = true;

    installPhase = ''
      cp -R $src $out
      substituteInPlace "$out/lib/udev/rules.d/99-qubes-usb.rules" --replace '/usr/lib/qubes/' "${resholved}/lib/qubes/"
      substituteInPlace "$out/lib/udev/rules.d/99-qubes-block.rules" --replace '/usr/lib/qubes/' "${resholved}/lib/qubes/"
    '';
  })

================
File: hosts/qubes-templatevm/pkgs/qubes-sshd/default.nix
================
{
  pkgs,
  stdenv,
}:
pkgs.writeTextFile {
  name = "qubes-rpc-sshd";
  text = ''
    #!${stdenv.shell}
    ${pkgs.socat}/bin/socat STDIO TCP:localhost:22
  '';
  executable = true;
  destination = "/etc/qubes-rpc/qubes.Sshd";
}

================
File: hosts/qubes-templatevm/pkgs/qubes-usb-proxy/default.nix
================
{
  lib,
  fetchFromGitHub,
  resholve,
  coreutils,
  gnugrep,
  kmod,
  nettools,
  python3,
  qubes-core-qrexec,
  qubes-core-qubesdb,
  systemd,
  usbutils,
}:
resholve.mkDerivation rec {
  pname = "qubes-usb-proxy";
  version = "1.3.2";

  src = fetchFromGitHub {
    owner = "QubesOS";
    repo = "qubes-app-linux-usb-proxy";
    rev = "v${version}";
    hash = "sha256-VyHDFKO0jaCeOkLWubfXOBw+PVHvPwq6iNqSYmFWOR0=";
  };

  buildInputs = [
    qubes-core-qrexec
  ];

  dontBuild = true;

  installPhase = ''
    mkdir -p $out/lib

    make install-vm DESTDIR=$out

    mv $out/usr/lib/qubes $out/lib/qubes
    mv "$out/usr/lib/udev" "$out/lib/udev"

    substituteInPlace "$out/lib/qubes/usb-reset" --replace "#!/usr/bin/python3" "#!${python3}/bin/python3"

    # we have udevadm by way of kmod, skip the check since resholve won't handle it
    substituteInPlace "$out/lib/qubes/usb-import" --replace '[ -f "/usr/bin/udevadm" ] && ' ' '

    # sudo isn't handled by resholve. ideally we'd just do a single substituteInPlace for sudo here
    # but the keep statement would result in usb-export being left unresolved. we can hack around this
    # by turning it into a variable and adding an explicit fix resolution
    substituteInPlace "$out/etc/qubes-rpc/qubes.USB" --replace "sudo" "/run/wrappers/bin/sudo" \
      --replace "/usr/lib/qubes/usb-export" "\$QUBES_USB_EXPORT"

    substituteInPlace "$out/etc/qubes-rpc/qubes.USBAttach" --replace "/usr/lib/qubes/usb-import" "\$QUBES_USB_IMPORT"

    rm -rf $out/usr
  '';

  solutions = {
    default = {
      scripts = [
        "lib/qubes/usb-detach-all"
        "lib/qubes/usb-export"
        "lib/qubes/usb-import"
        "etc/qubes-rpc/qubes.USB"
        "etc/qubes-rpc/qubes.USBAttach"
        "etc/qubes-rpc/qubes.USBDetach"
      ];
      interpreter = "none";
      fix = {
        "/usr/lib/qubes/usb-reset" = true;
        "/usr/lib/qubes/usb-export" = true;
        "$QUBES_USB_EXPORT" = ["${placeholder "out"}/lib/qubes/usb-export"];
        "$QUBES_USB_IMPORT" = ["${placeholder "out"}/lib/qubes/usb-import"];
      };
      fake = {
        external = [
          "usbguard"
        ];
      };
      inputs = [
        "lib/qubes"
        coreutils
        gnugrep
        kmod
        nettools
        qubes-core-qrexec
        qubes-core-qubesdb
        systemd
        usbutils
      ];
      keep = {
        "/run/wrappers/bin/sudo" = true;
        "${placeholder "out"}/lib/qubes/usb-export" = true;
        "${placeholder "out"}/lib/qubes/usb-import" = true;
      };
      execer = [
        "cannot:${kmod}/bin/modprobe"
        "cannot:${qubes-core-qrexec}/bin/qrexec-client-vm"
        "cannot:${systemd}/bin/udevadm"
        "cannot:lib/qubes/usb-reset"
        "cannot:lib/qubes/usb-export"
      ];
    };
  };

  meta = with lib; {
    description = "The Qubes service for proxying USB devices";
    homepage = "https://qubes-os.org";
    license = licenses.gpl2Plus;
    maintainers = [];
    platforms = platforms.linux;
  };
}

================
File: hosts/qubes-templatevm/profiles/qubes.nix
================
{
  config,
  lib,
  pkgs,
  ...
}: {
  services.qubes.qrexec.enable = true;
  services.qubes.gui.enable = true;
  services.qubes.networking.enable = true;
  services.qubes.usb.enable = true;

  fonts.enableDefaultPackages = true;

  # When running in PVH mode, the qubes init script will bind mount the kernel modules here
  systemd.tmpfiles.rules = [
    "d /lib/modules 0755 root root"
  ];
  # When running in PVH mode, the qubes init script expects /sbin/init to exist
  boot.loader.initScript.enable = true;

  # Don't use the GRUB 2 boot loader since it conflicts with initScript.enable
  boot.loader.grub.enable = false;
}

================
File: hosts/qubes-templatevm/tools/rpm.nix
================
{
  lib,
  fetchFromGitHub,
  nixpkgs,
  pkgs,
  nixosConfig,
  qubesVersion,
}: let
  version = "4.0.6";
  rootImg = import "${nixpkgs}/nixos/lib/make-disk-image.nix" {
    inherit lib pkgs;
    config = nixosConfig.config;
    contents = [
      {
        source = ../examples/configuration.nix;
        target = "/etc/nixos/configuration.nix";
      }
      {
        source = ../examples/flake.nix;
        target = "/etc/nixos/flake.nix";
      }
    ];
    diskSize = 10240; # 10G
    partitionTableType = "hybrid";
    name = "root";
  };
in
  pkgs.stdenvNoCC.mkDerivation {
    name = "qubes-template-rpm";

    src = fetchFromGitHub {
      owner = "QubesOS";
      repo = "qubes-linux-template-builder";
      rev = "v${version}";
      hash = "sha256-ABfhqyg9PypuKWYe6yhEr99hxf7qWsYCwRyToGhPKZA=";
    };

    nativeBuildInputs = [
      pkgs.rpm
      pkgs.coreutils
      pkgs.gnutar
    ];

    dontConfigure = true;
    dontFixup = true;

    buildPhase = ''
      set -x

      mkdir -p qubeized_images/nixos
      ln -s ${rootImg}/nixos.img qubeized_images/nixos/root.img

      ln -s "appmenus_generic" appmenus
      cp template_generic.conf template.conf

      date +"%Y%m%d%H%M" > build_timestamp_nixos
      echo ${qubesVersion} > version

      DIST=nixos ./build_template_rpm nixos
    '';

    installPhase = ''
      mkdir $out/
      mv rpm/noarch/*.rpm $out/
    '';
  }

================
File: hosts/qubes-templatevm/.git
================
gitdir: ../../.git/modules/hosts/qubes-templatevm

================
File: hosts/qubes-templatevm/flake.lock
================
{
  "nodes": {
    "nixpkgs": {
      "locked": {
        "lastModified": 1731676054,
        "narHash": "sha256-OZiZ3m8SCMfh3B6bfGC/Bm4x3qc1m2SVEAlkV6iY7Yg=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "5e4fbfb6b3de1aa2872b76d49fafc942626e2add",
        "type": "github"
      },
      "original": {
        "id": "nixpkgs",
        "ref": "nixos-unstable",
        "type": "indirect"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

================
File: hosts/qubes-templatevm/flake.nix
================
{
  description = "nixos templatevm configurations";

  inputs = {
    nixpkgs.url = "nixpkgs/nixos-unstable";
  };

  outputs = {
    self,
    nixpkgs,
    ...
  }: let
    lib = nixpkgs.lib;
    system = "x86_64-linux";
    qubesPackages = final: prev: {
      qubes-core-qubesdb = prev.callPackage ./pkgs/qubes-core-qubesdb {};
      qubes-core-vchan-xen = prev.callPackage ./pkgs/qubes-core-vchan-xen {};
      qubes-core-qrexec = prev.callPackage ./pkgs/qubes-core-qrexec {};
      qubes-core-agent-linux = prev.callPackage ./pkgs/qubes-core-agent-linux {};
      qubes-linux-utils = prev.callPackage ./pkgs/qubes-linux-utils {};
      qubes-gui-common = prev.callPackage ./pkgs/qubes-gui-common {};
      qubes-gui-agent-linux = prev.callPackage ./pkgs/qubes-gui-agent-linux {};
      qubes-sshd = prev.callPackage ./pkgs/qubes-sshd {};
      qubes-usb-proxy = prev.callPackage ./pkgs/qubes-usb-proxy {};
    };

    pkgs = import nixpkgs {
      inherit system;
      overlays = [
        qubesPackages
      ];
    };
  in {
    overlays.default = qubesPackages;
    nixosModules.default = {
      config,
      lib,
      pkgs,
      ...
    }: {
      imports = [
        ./modules/qubes/core.nix
        ./modules/qubes/db.nix
        ./modules/qubes/gui.nix
        ./modules/qubes/networking.nix
        ./modules/qubes/qrexec.nix
        ./modules/qubes/sshd.nix
        ./modules/qubes/updates.nix
        ./modules/qubes/usb.nix
      ];
    };
    nixosProfiles.default = {
      config,
      lib,
      pkgs,
      ...
    }: {
      imports = [
        ./profiles/qubes.nix
      ];
    };
    rpm = pkgs.callPackage ./tools/rpm.nix {
      inherit nixpkgs;
      qubesVersion = "4.2.0";
      nixosConfig =
        lib.nixosSystem
        {
          inherit pkgs system;
          modules = [
            self.nixosModules.default
            self.nixosProfiles.default
            ./examples/configuration.nix
          ];
        };
    };
  };
}

================
File: hosts/qubes-templatevm/LICENSE
================
The MIT License (MIT)

Copyright (c) 2024 eV Quirk

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: hosts/qubes-templatevm/README.md
================
# nix expressions for creating a qubes templatevm

## getting started

*warning*: proceed at your own risk, this involves copying files to dom0 and installing a template
without gpg signature verification

1. download the template rpm
2. copy the template rpm to dom0
```
qvm-run --pass-io <YOUR_DOWNLOAD_VM> 'cat <FULL_RPM_PATH>' > qubes-template-nixos-4.2.0-unavailable.noarch.rpm
```
3. install the template
```
qvm-template install qubes-template-nixos-4.2.0-unavailable.noarch.rpm --nogpgcheck
```
4. start the template and wait about 30s ( see qrexec notes. )
```
qvm-start nixos
```
5. start a terminal in the template
```
qvm-run nixos xterm
```

at this point you can customize the template and use it like any other NixOS install. the example config has been copied to `/etc/nixos`.

## issues with the qubes updates proxy

by default a qubes template does not have direct internet access and instead uses the qubes updates proxy
over qrpc. nix does not have a concept of a global proxy setting and as such is tricky to correctly 
configure in a way that doesn't involve simply setting `all_proxy` everywhere. 

as a compromise the packaging sets `all_proxy` for nix-daemon but not all downloads go through nix-daemon. the qubes packaging in this repo creates aliases for interactive shells that wrap a few of the common nix programs to pass proxy info. however this leaves various edge cases, a few of which are noted below. remember that you can always set `all_proxy` in your environment manually or in the worst case, switch to giving the template direct internet access.

### issues with sudo nix commands

due to the above, you're likely to run into issues when running `sudo nix...` - in these cases you can instead first get an interactive root shell e.g. via `sudo su`.

### issues with remote nix configs on github

you may run into issues if you pull a remote nix config over ssh from github. to workaround
you can add the following to `~/.ssh/config` ( the host and port overrides are necessary since these
qubes updates proxy filters port 22. ):
```
Host github.com
  HostName ssh.github.com
  Port 443
  ProxyCommand nc -X connect -x 127.0.0.1:8082 %h %p
```

## notes

### what works
- qrexec eventually works
- appvm networking
- xorg
- copy / paste
- qvm-copy
- ssh over qrexec ( handy for using --target-host with nixos-rebuild )
- memory reporting / ballooning
- qubes update checks
- qubes update triggers ( requires unmerged upstream changes )
- usb proxy
- building an rpm for the templatevm
- update proxy

### what doesn't work / untested
- qrexec startup isn't clean, commands can fail initially
- populating application shortcuts
- using a non-xen provided kernel
- using as netvm or usbvm
- time sync via rpc ( currently handled is systemd-timesyncd, but per vm ntp sync creates more attack surface area? )
- audio
- grow root fs

### bugs
- memory resizing seems to cause crashes in ff

### todo
- deal with substituteInPlace deprecation
- should be using 4.2.x package versions across the board, there's a couple 4.3.x packages atm

================
File: modules/darwin/config/karabiner/automatic_backups/karabiner_20241118.json
================
{
    "profiles": [
       {
          "complex_modifications": {
             "rules": [
                {
                   "description": "YABAI SPACE: MIRROR (Flip)                                                                                                     [⌥] option    +   [⌘] command  +  { f }",
                   "manipulators": [
                      {
                         "from": {
                            "key_code": "x",
                            "modifiers": {
                               "mandatory": [
                                  "shift",
                                  "option"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m space --mirror x-axis "
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "y",
                            "modifiers": {
                               "mandatory": [
                                  "shift",
                                  "option"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m space --mirror y-axis "
                            }
                         ],
                         "type": "basic"
                      }
                   ]
                },
                {
                   "description": "YABAI SPACE: MOVE (Next/Prev)                                                                                                [⇧] shift       +   [⌥] option        +  { n, p }",
                   "manipulators": [
                      {
                         "from": {
                            "key_code": "n",
                            "modifiers": {
                               "mandatory": [
                                  "shift",
                                  "option"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --space next"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "p",
                            "modifiers": {
                               "mandatory": [
                                  "shift",
                                  "option"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --space prev"
                            }
                         ],
                         "type": "basic"
                      }
                   ]
                },
                {
                   "description": "YABAI SPACE: ROTATE                                                                                                                                                             [⇧] shift       +   [⌥] option        +  { ⏴j  ;⏵ }",
                   "manipulators": [
                      {
                         "from": {
                            "key_code": "semicolon",
                            "modifiers": {
                               "mandatory": [
                                  "shift",
                                  "option"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m space --rotate 270"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "j",
                            "modifiers": {
                               "mandatory": [
                                  "shift",
                                  "option"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m space --rotate 90"
                            }
                         ],
                         "type": "basic"
                      }
                   ]
                },
                {
                   "description": "YABAI WINDOW: MOVE (Split)                                                                                                                                  [⌃] control   +   [⌘] command  +  { ⏴j ⏶k l⏷ ;⏵ }",
                   "manipulators": [
                      {
                         "from": {
                            "key_code": "j",
                            "modifiers": {
                               "mandatory": [
                                  "control",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --warp west"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "k",
                            "modifiers": {
                               "mandatory": [
                                  "control",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --warp north"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "l",
                            "modifiers": {
                               "mandatory": [
                                  "control",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --warp south"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "semicolon",
                            "modifiers": {
                               "mandatory": [
                                  "control",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --warp east"
                            }
                         ],
                         "type": "basic"
                      }
                   ]
                },
                {
                   "description": "YABAI WINDOW: SWAP                                                                                                                                                      [⌥] option    +   [⌘] command  +  { ⏴j ⏶k l⏷ ;⏵ }",
                   "manipulators": [
                      {
                         "from": {
                            "key_code": "j",
                            "modifiers": {
                               "mandatory": [
                                  "option",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/usr/local/bin/yabai -m window --swap west"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "k",
                            "modifiers": {
                               "mandatory": [
                                  "option",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/usr/local/bin/yabai -m window --swap north"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "l",
                            "modifiers": {
                               "mandatory": [
                                  "option",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/usr/local/bin/yabai -m window --swap south"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "semicolon",
                            "modifiers": {
                               "mandatory": [
                                  "option",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/usr/local/bin/yabai -m window --swap east"
                            }
                         ],
                         "type": "basic"
                      }
                   ]
                },
                {
                   "description": "YABAI WINDOW: SIZE (Up)                                                                                                                              [⇧] shift       +   [⌘] command  +  { ⏴j ⏶k l⏷ ;⏵ }",
                   "manipulators": [
                      {
                         "from": {
                            "key_code": "j",
                            "modifiers": {
                               "mandatory": [
                                  "shift",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:-100:0"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "k",
                            "modifiers": {
                               "mandatory": [
                                  "shift",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize top_left:0:-100"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "l",
                            "modifiers": {
                               "mandatory": [
                                  "shift",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:0:100"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "semicolon",
                            "modifiers": {
                               "mandatory": [
                                  "shift",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:100:0"
                            }
                         ],
                         "type": "basic"
                      }
                   ]
                },
                {
                   "description": "YABAI WINDOW: SIZE (Down)                                                                                                                                                                                                   [⌃] control   +   [⌘] command  +  [⇧] shift +  { ⏴j ⏶k l⏷ ;⏵ }",
                   "manipulators": [
                      {
                         "from": {
                            "key_code": "j",
                            "modifiers": {
                               "mandatory": [
                                  "control",
                                  "shift",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:-100:0"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "k",
                            "modifiers": {
                               "mandatory": [
                                  "control",
                                  "shift",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize top_right:0:100"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "l",
                            "modifiers": {
                               "mandatory": [
                                  "control",
                                  "shift",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:0:-100"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "semicolon",
                            "modifiers": {
                               "mandatory": [
                                  "control",
                                  "shift",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:100:0"
                            }
                         ],
                         "type": "basic"
                      }
                   ]
                },
                {
                   "description": "YABAI WINDOW: FOCUS                                                                                                                     [⌥] option    +   { ⏴j ⏶k l⏷ ;⏵ }",
                   "manipulators": [
                      {
                         "from": {
                            "key_code": "j",
                            "modifiers": {
                               "mandatory": [
                                  "option"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --focus west"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "k",
                            "modifiers": {
                               "mandatory": [
                                  "option"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --focus north"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "l",
                            "modifiers": {
                               "mandatory": [
                                  "option"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --focus south"
                            }
                         ],
                         "type": "basic"
                      },
                      {
                         "from": {
                            "key_code": "semicolon",
                            "modifiers": {
                               "mandatory": [
                                  "option"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --focus east"
                            }
                         ],
                         "type": "basic"
                      }
                   ]
                },
                {
                   "description": "YABAI WINDOW: TOGGLE(Float)                                                                                            [⌥] option    +   [⌘] command  +  { f }",
                   "manipulators": [
                      {
                         "from": {
                            "key_code": "f",
                            "modifiers": {
                               "mandatory": [
                                  "option",
                                  "command"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --toggle float --grid 4:4:1:1:2:2"
                            }
                         ],
                         "type": "basic"
                      }
                   ]
                },
                {
                   "description": "YABAI WINDOW: TOGGLE(Fullscreen)                                                                                                  [⇧] shift       +   [⌘] option        +  { m }",
                   "manipulators": [
                      {
                         "from": {
                            "key_code": "m",
                            "modifiers": {
                               "mandatory": [
                                  "shift",
                                  "option"
                               ]
                            }
                         },
                         "to": [
                            {
                               "shell_command": "/run/current-system/sw/bin/yabai -m window --toggle zoom-fullscreen"
                            }
                         ],
                         "type": "basic"
                      }
                   ]
                }
             ]
          },
          "name": "Default profile",
          "selected": true,
          "virtual_hid_keyboard": {
             "keyboard_type_v2": "ansi"
          }
       }
    ],
    "rules": [
       {
          "description": "YABAI WINDOW: FOCUS              |    [⌥] option    +  { ⏴j, ⏶k, ⏷l, ⏵; }",
          "manipulators": [
             {
                "from": {
                   "key_code": "j",
                   "modifiers": {
                      "mandatory": [
                         "option"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --focus west"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "k",
                   "modifiers": {
                      "mandatory": [
                         "option"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --focus north"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "l",
                   "modifiers": {
                      "mandatory": [
                         "option"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --focus south"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "semicolon",
                   "modifiers": {
                      "mandatory": [
                         "option"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --focus east"
                   }
                ],
                "type": "basic"
             }
          ]
       },
       {
          "description": "YABAI WINDOW: FOCUS              |    [fn] function +  {n,p,tab} ",
          "manipulators": [
             {
                "from": {
                   "key_code": "n",
                   "modifiers": {
                      "mandatory": [
                         "fn"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m query --windows --space | /usr/local/bin/jq '.[-1].id' | xargs -I{} /run/current-system/sw/bin/yabai -m window --focus {}"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "p",
                   "modifiers": {
                      "mandatory": [
                         "fn"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m query --windows --space | /usr/local/bin/jq '.[1].id' | xargs -I{} /run/current-system/sw/bin/yabai -m window --focus {}"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "tab",
                   "modifiers": {
                      "mandatory": [
                         "fn"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --focus next"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "tab",
                   "modifiers": {
                      "mandatory": [
                         "fn",
                         "shift"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --focus prev"
                   }
                ],
                "type": "basic"
             }
          ]
       },
       {
          "description": "YABAI WINDOW: SIZE (UP)          |    [⇧] shift       +   [⌘] command  +  { ⏴j, ⏶k, ⏷l, ⏵; }",
          "manipulators": [
             {
                "from": {
                   "key_code": "j",
                   "modifiers": {
                      "mandatory": [
                         "shift",
                         "command"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:-100:0"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "k",
                   "modifiers": {
                      "mandatory": [
                         "shift",
                         "command"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize top_left:0:-100"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "l",
                   "modifiers": {
                      "mandatory": [
                         "shift",
                         "command"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:0:100"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "semicolon",
                   "modifiers": {
                      "mandatory": [
                         "shift",
                         "command"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:100:0"
                   }
                ],
                "type": "basic"
             }
          ]
       },
       {
          "description": "YABAI WINDOW: SIZE (DOWN)    |    [⇧] shift      +   [⌘] command   +  [⌃] control +  { ⏴j, ⏶k, ⏷l, ⏵; }",
          "manipulators": [
             {
                "from": {
                   "key_code": "h",
                   "modifiers": {
                      "mandatory": [
                         "fn",
                         "shift",
                         "control"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:-100:0"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "j",
                   "modifiers": {
                      "mandatory": [
                         "fn",
                         "shift",
                         "control"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize top_right:0:100"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "k",
                   "modifiers": {
                      "mandatory": [
                         "fn",
                         "shift",
                         "control"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:0:-100"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "l",
                   "modifiers": {
                      "mandatory": [
                         "fn",
                         "shift",
                         "control"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:100:0"
                   }
                ],
                "type": "basic"
             }
          ]
       },
       {
          "description": "YABAI WINDOW: SWAP                |    [⌥] option    +   [⌘] command  +  { ⏴j, ⏶k, ⏷l, ⏵; }",
          "manipulators": [
             {
                "from": {
                   "key_code": "j",
                   "modifiers": {
                      "mandatory": [
                         "option",
                         "command"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/usr/local/bin/yabai -m window --swap west"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "k",
                   "modifiers": {
                      "mandatory": [
                         "option",
                         "command"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/usr/local/bin/yabai -m window --swap north"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "l",
                   "modifiers": {
                      "mandatory": [
                         "option",
                         "command"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/usr/local/bin/yabai -m window --swap south"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "semicolon",
                   "modifiers": {
                      "mandatory": [
                         "option",
                         "command"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/usr/local/bin/yabai -m window --swap east"
                   }
                ],
                "type": "basic"
             }
          ]
       },
       {
          "description": "YABAI WINDOW: WARP                |    [⌃] control   +   [⌘] command  +  { ⏴j, ⏶k, ⏷l, ⏵; }",
          "manipulators": [
             {
                "from": {
                   "key_code": "j",
                   "modifiers": {
                      "mandatory": [
                         "control",
                         "command"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --warp west"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "k",
                   "modifiers": {
                      "mandatory": [
                         "control",
                         "command"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --warp north"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "l",
                   "modifiers": {
                      "mandatory": [
                         "control",
                         "command"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --warp south"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "semicolon",
                   "modifiers": {
                      "mandatory": [
                         "control",
                         "command"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m window --warp east"
                   }
                ],
                "type": "basic"
             }
          ]
       },
       {
          "description": "YABAI SPACE: layout [fn] +  { b, f }",
          "manipulators": [
             {
                "from": {
                   "key_code": "b",
                   "modifiers": {
                      "mandatory": [
                         "fn"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m space --layout bsp"
                   }
                ],
                "type": "basic"
             },
             {
                "from": {
                   "key_code": "f",
                   "modifiers": {
                      "mandatory": [
                         "fn"
                      ]
                   }
                },
                "to": [
                   {
                      "shell_command": "/run/current-system/sw/bin/yabai -m space --layout float"
                   }
                ],
                "type": "basic"
             }
          ]
       }
    ],
    "selected": true,
    "virtual_hid_keyboard": {
       "keyboard_type_v2": "ansi"
    },
    "title": "lessuseless Karabiner Configuration"
 }

================
File: modules/darwin/config/karabiner/karabiner.json
================
{
    "profiles": [
        {
            "complex_modifications": {
                "rules": [
                    {
                        "description": "YABAI SPACE: MIRROR (Flip)                                                                                                     [⌥] option    +   [⌘] command  +  { f }",
                        "manipulators": [
                            {
                                "from": {
                                    "key_code": "x",
                                    "modifiers": { "mandatory": ["shift", "option"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m space --mirror x-axis " }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "y",
                                    "modifiers": { "mandatory": ["shift", "option"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m space --mirror y-axis " }],
                                "type": "basic"
                            }
                        ]
                    },
                    {
                        "description": "YABAI SPACE: MOVE (Next/Prev)                                                                                                [⇧] shift       +   [⌥] option        +  { n, p }",
                        "manipulators": [
                            {
                                "from": {
                                    "key_code": "n",
                                    "modifiers": { "mandatory": ["shift", "option"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --space next" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "p",
                                    "modifiers": { "mandatory": ["shift", "option"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --space prev" }],
                                "type": "basic"
                            }
                        ]
                    },
                    {
                        "description": "YABAI SPACE: ROTATE                                                                                                                                                             [⇧] shift       +   [⌥] option        +  { ⏴j  ;⏵ }",
                        "manipulators": [
                            {
                                "from": {
                                    "key_code": "semicolon",
                                    "modifiers": { "mandatory": ["shift", "option"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m space --rotate 270" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "j",
                                    "modifiers": { "mandatory": ["shift", "option"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m space --rotate 90" }],
                                "type": "basic"
                            }
                        ]
                    },
                    {
                        "description": "YABAI WINDOW: MOVE (Split)                                                                                                                                  [⌃] control   +   [⌘] command  +  { ⏴j ⏶k l⏷ ;⏵ }",
                        "manipulators": [
                            {
                                "from": {
                                    "key_code": "j",
                                    "modifiers": { "mandatory": ["control", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --warp west" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "k",
                                    "modifiers": { "mandatory": ["control", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --warp north" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "l",
                                    "modifiers": { "mandatory": ["control", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --warp south" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "semicolon",
                                    "modifiers": { "mandatory": ["control", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --warp east" }],
                                "type": "basic"
                            }
                        ]
                    },
                    {
                        "description": "YABAI WINDOW: SWAP                                                                                                                                                      [⌥] option    +   [⌘] command  +  { ⏴j ⏶k l⏷ ;⏵ }",
                        "manipulators": [
                            {
                                "from": {
                                    "key_code": "j",
                                    "modifiers": { "mandatory": ["option", "command"] }
                                },
                                "to": [{ "shell_command": "/usr/local/bin/yabai -m window --swap west" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "k",
                                    "modifiers": { "mandatory": ["option", "command"] }
                                },
                                "to": [{ "shell_command": "/usr/local/bin/yabai -m window --swap north" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "l",
                                    "modifiers": { "mandatory": ["option", "command"] }
                                },
                                "to": [{ "shell_command": "/usr/local/bin/yabai -m window --swap south" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "semicolon",
                                    "modifiers": { "mandatory": ["option", "command"] }
                                },
                                "to": [{ "shell_command": "/usr/local/bin/yabai -m window --swap east" }],
                                "type": "basic"
                            }
                        ]
                    },
                    {
                        "description": "YABAI WINDOW: SIZE (Up)                                                                                                                              [⇧] shift       +   [⌘] command  +  { ⏴j ⏶k l⏷ ;⏵ }",
                        "manipulators": [
                            {
                                "from": {
                                    "key_code": "j",
                                    "modifiers": { "mandatory": ["shift", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:-100:0" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "k",
                                    "modifiers": { "mandatory": ["shift", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:0:-100" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "l",
                                    "modifiers": { "mandatory": ["shift", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:0:100" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "semicolon",
                                    "modifiers": { "mandatory": ["shift", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:100:0" }],
                                "type": "basic"
                            }
                        ]
                    },
                    {
                        "description": "YABAI WINDOW: SIZE (Down)                                                                                                                                                                                                   [⌃] control   +   [⌘] command  +  [⇧] shift +  { ⏴j ⏶k l⏷ ;⏵ }",
                        "manipulators": [
                            {
                                "from": {
                                    "key_code": "j",
                                    "modifiers": { "mandatory": ["control", "shift", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:-100:0" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "k",
                                    "modifiers": { "mandatory": ["control", "shift", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize top_right:0:100" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "l",
                                    "modifiers": { "mandatory": ["control", "shift", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:0:-100" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "semicolon",
                                    "modifiers": { "mandatory": ["control", "shift", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:100:0" }],
                                "type": "basic"
                            }
                        ]
                    },
                    {
                        "description": "YABAI WINDOW: FOCUS                                                                                                                     [⌥] option    +   { ⏴j ⏶k l⏷ ;⏵ }",
                        "manipulators": [
                            {
                                "from": {
                                    "key_code": "j",
                                    "modifiers": { "mandatory": ["option"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --focus west" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "k",
                                    "modifiers": { "mandatory": ["option"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --focus north" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "l",
                                    "modifiers": { "mandatory": ["option"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --focus south" }],
                                "type": "basic"
                            },
                            {
                                "from": {
                                    "key_code": "semicolon",
                                    "modifiers": { "mandatory": ["option"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --focus east" }],
                                "type": "basic"
                            }
                        ]
                    },
                    {
                        "description": "YABAI WINDOW: TOGGLE(Float)                                                                                            [⌥] option    +   [⌘] command  +  { f }",
                        "manipulators": [
                            {
                                "from": {
                                    "key_code": "f",
                                    "modifiers": { "mandatory": ["option", "command"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --toggle float --grid 4:4:1:1:2:2" }],
                                "type": "basic"
                            }
                        ]
                    },
                    {
                        "description": "YABAI WINDOW: TOGGLE(Fullscreen)                                                                                                  [⇧] shift       +   [⌘] option        +  { m }",
                        "manipulators": [
                            {
                                "from": {
                                    "key_code": "m",
                                    "modifiers": { "mandatory": ["shift", "option"] }
                                },
                                "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --toggle zoom-fullscreen" }],
                                "type": "basic"
                            }
                        ]
                    }
                ]
            },
            "name": "Default profile",
            "selected": true,
            "virtual_hid_keyboard": { "keyboard_type_v2": "ansi" }
        }
    ],
    "rules": [
        {
            "description": "YABAI WINDOW: FOCUS              |    [⌥] option    +  { ⏴j, ⏶k, ⏷l, ⏵; }",
            "manipulators": [
                {
                    "from": {
                        "key_code": "j",
                        "modifiers": { "mandatory": ["option"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --focus west" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "k",
                        "modifiers": { "mandatory": ["option"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --focus north" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "l",
                        "modifiers": { "mandatory": ["option"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --focus south" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "semicolon",
                        "modifiers": { "mandatory": ["option"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --focus east" }],
                    "type": "basic"
                }
            ]
        },
        {
            "description": "YABAI WINDOW: FOCUS              |    [fn] function +  {n,p,tab} ",
            "manipulators": [
                {
                    "from": {
                        "key_code": "n",
                        "modifiers": { "mandatory": ["fn"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m query --windows --space | /usr/local/bin/jq '.[-1].id' | xargs -I{} /run/current-system/sw/bin/yabai -m window --focus {}" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "p",
                        "modifiers": { "mandatory": ["fn"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m query --windows --space | /usr/local/bin/jq '.[1].id' | xargs -I{} /run/current-system/sw/bin/yabai -m window --focus {}" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "tab",
                        "modifiers": { "mandatory": ["fn"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --focus next" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "tab",
                        "modifiers": { "mandatory": ["fn", "shift"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --focus prev" }],
                    "type": "basic"
                }
            ]
        },
        {
            "description": "YABAI WINDOW: SIZE (UP)          |    [⇧] shift       +   [⌘] command  +  { ⏴j, ⏶k, ⏷l, ⏵; }",
            "manipulators": [
                {
                    "from": {
                        "key_code": "j",
                        "modifiers": { "mandatory": ["shift", "command"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:-100:0" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "k",
                        "modifiers": { "mandatory": ["shift", "command"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize top_left:0:-100" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "l",
                        "modifiers": { "mandatory": ["shift", "command"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:0:100" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "semicolon",
                        "modifiers": { "mandatory": ["shift", "command"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:100:0" }],
                    "type": "basic"
                }
            ]
        },
        {
            "description": "YABAI WINDOW: SIZE (DOWN)    |    [⇧] shift      +   [⌘] command   +  [⌃] control +  { ⏴j, ⏶k, ⏷l, ⏵; }",
            "manipulators": [
                {
                    "from": {
                        "key_code": "h",
                        "modifiers": { "mandatory": ["fn", "shift", "control"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:-100:0" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "j",
                        "modifiers": { "mandatory": ["fn", "shift", "control"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize top_right:0:100" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "k",
                        "modifiers": { "mandatory": ["fn", "shift", "control"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:0:-100" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "l",
                        "modifiers": { "mandatory": ["fn", "shift", "control"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:100:0" }],
                    "type": "basic"
                }
            ]
        },
        {
            "description": "YABAI WINDOW: SWAP                |    [⌥] option    +   [⌘] command  +  { ⏴j, ⏶k, ⏷l, ⏵; }",
            "manipulators": [
                {
                    "from": {
                        "key_code": "j",
                        "modifiers": { "mandatory": ["option", "command"] }
                    },
                    "to": [{ "shell_command": "/usr/local/bin/yabai -m window --swap west" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "k",
                        "modifiers": { "mandatory": ["option", "command"] }
                    },
                    "to": [{ "shell_command": "/usr/local/bin/yabai -m window --swap north" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "l",
                        "modifiers": { "mandatory": ["option", "command"] }
                    },
                    "to": [{ "shell_command": "/usr/local/bin/yabai -m window --swap south" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "semicolon",
                        "modifiers": { "mandatory": ["option", "command"] }
                    },
                    "to": [{ "shell_command": "/usr/local/bin/yabai -m window --swap east" }],
                    "type": "basic"
                }
            ]
        },
        {
            "description": "YABAI WINDOW: WARP                |    [⌃] control   +   [⌘] command  +  { ⏴j, ⏶k, ⏷l, ⏵; }",
            "manipulators": [
                {
                    "from": {
                        "key_code": "j",
                        "modifiers": { "mandatory": ["control", "command"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --warp west" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "k",
                        "modifiers": { "mandatory": ["control", "command"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --warp north" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "l",
                        "modifiers": { "mandatory": ["control", "command"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --warp south" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "semicolon",
                        "modifiers": { "mandatory": ["control", "command"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m window --warp east" }],
                    "type": "basic"
                }
            ]
        },
        {
            "description": "YABAI SPACE: layout [fn] +  { b, f }",
            "manipulators": [
                {
                    "from": {
                        "key_code": "b",
                        "modifiers": { "mandatory": ["fn"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m space --layout bsp" }],
                    "type": "basic"
                },
                {
                    "from": {
                        "key_code": "f",
                        "modifiers": { "mandatory": ["fn"] }
                    },
                    "to": [{ "shell_command": "/run/current-system/sw/bin/yabai -m space --layout float" }],
                    "type": "basic"
                }
            ]
        }
    ],
    "selected": true,
    "title": "lessuseless Karabiner Configuration",
    "virtual_hid_keyboard": { "keyboard_type_v2": "ansi" }
}

================
File: modules/darwin/config/sketchybar/sketchybar.nix
================
{ 
  config, 
  #lib, 
  pkgs, 
  ... 
  }:

with lib;

let
  cfg = config.heywoodlh.darwin.sketchybar;
  space-sh = pkgs.writeShellScriptBin "space.sh" ''
    if [ "$SELECTED" = "true" ]
    then
      sketchybar -m --set $NAME background.color=0xff81a1c1
    else
      sketchybar -m --set $NAME background.color=0xff57627A
    fi
  '';
  window-title-sh = pkgs.writeShellScriptBin "window_title.sh" ''
    WINDOW_TITLE=$(${pkgs.yabai}/bin/yabai -m query --windows --window | ${pkgs.jq}/bin/jq -r '.app')
    if [[ $WINDOW_TITLE != "" ]]; then
      sketchybar -m --set title label="$WINDOW_TITLE"
    else
      sketchybar -m --set title label=None
    fi
  '';
  date-time-sh = pkgs.writeShellScriptBin "date-time.sh" ''
    sketchybar -m --set $NAME label="$(date '+%a %d %b %H:%M')"
  '';
  top-mem-sh = pkgs.writeShellScriptBin "top-mem.sh" ''
    TOPPROC=$(ps axo "%cpu,ucomm" | sort -nr | tail +1 | head -n1 | awk '{printf "%.0f%% %s\n", $1, $2}' | sed -e 's/com.apple.//g')
    TOPMEM=$(ps axo "rss" | sort -nr | tail +1 | head -n1 | awk '{printf "%.0fMB %s\n", $1 / 1024, $2}' | sed -e 's/com.apple.//g')
    MEM=$(echo $TOPMEM | sed -nr 's/([^MB]+).*/\1/p')
    sketchybar -m --set $NAME label="$TOPMEM"
  '';
  cpu-sh = pkgs.writeShellScriptBin "cpu.sh" ''
    CORE_COUNT=$(sysctl -n machdep.cpu.thread_count)
    CPU_INFO=$(ps -eo pcpu,user)
    CPU_SYS=$(echo "$CPU_INFO" | grep -v $(whoami) | sed "s/[^ 0-9\.]//g" | awk "{sum+=\$1} END {print sum/(100.0 * $CORE_COUNT)}")
    CPU_USER=$(echo "$CPU_INFO" | grep $(whoami) | sed "s/[^ 0-9\.]//g" | awk "{sum+=\$1} END {print sum/(100.0 * $CORE_COUNT)}")
    sketchybar -m --set  cpu_percent label=$(echo "$CPU_SYS $CPU_USER" | awk '{printf "%.0f\n", ($1 + $2)*100}')%
  '';
  caffeine-sh = pkgs.writeShellScriptBin "caffeine.sh" ''
    if pgrep -q 'caffeinate'
    then
      sketchybar --set $NAME icon="󰅶"
    else
      sketchybar --set $NAME icon="󰛊"
    fi
  '';
  caffeine-click-sh = pkgs.writeShellScriptBin "caffeine-click.sh" ''
    if pgrep -q 'caffeinate'
    then
      killall caffeinate
      sketchybar --set $NAME icon="󰛊"
    else
      caffeinate -d & disown
      sketchybar --set $NAME icon="󰅶"
    fi
  '';
  battery-sh = pkgs.writeShellScriptBin "battery.sh" ''
    if pmset -g ac | grep -q 'Family Code = 0x0000' # No battery (i.e. Mac Mini, Mac Pro, etc.)
    then
      sketchybar \
        --set $NAME \
          icon.color="0xFFFFFFFF" \
          icon="󰚥" \
          label="AC"
    else
      data=$(pmset -g batt)
      battery_percent=$(echo $data | grep -Eo "\d+%" | cut -d% -f1)
      charging=$(echo $data | grep 'AC Power')

      case "$battery_percent" in
        100)    icon="󰁹" color=0xFFFFFFFF ;;
        9[0-9]) icon="󰂂" color=0xFFFFFFFF ;;
        8[0-9]) icon="󰂁" color=0xFFFFFFFF ;;
        7[0-9]) icon="󰂀" color=0xFFFFFFFF ;;
        6[0-9]) icon="󰁿" color=0xFFFFFFFF ;;
        5[0-9]) icon="󰁾" color=0xFFFFFFFF ;;
        4[0-9]) icon="󰁽" color=0xFFFFFFFF ;;
        3[0-9]) icon="󰁼" color=0xFFFFFFFF ;;
        2[0-9]) icon="󰁻" color=0xFFFFFFFF ;;
        1[0-9]) icon="󰁺" color=0xFFFFFFFF ;;
        *)      icon="󰂃" color=0xFFFFFFFF ;;
      esac

      # if is charging
      if ! [ -z "$charging" ]; then
        icon="$icon 󰚥"
      fi

      sketchybar \
        --set $NAME \
          icon.color="$color" \
          icon="$icon" \
          label="$battery_percent%"
    fi
  '';
  top-proc-sh = pkgs.writeShellScriptBin "top-proc.sh" ''
    TOPPROC=$(ps axo "%cpu,ucomm" | sort -nr | tail +1 | head -n1 | awk '{printf "%.0f%% %s\n", $1, $2}' | sed -e 's/com.apple.//g')
    CPUP=$(echo $TOPPROC | sed -nr 's/([^\%]+).*/\1/p')
    if [ $CPUP -gt 75 ]; then
      sketchybar -m --set $NAME label="$TOPPROC"
    else
      sketchybar -m --set $NAME label=""
    fi
  '';
  spotify-indicator-sh = pkgs.writeShellScriptBin "spotify-indicator.sh" ''
    RUNNING="$(osascript -e 'if application "Spotify" is running then return 0')"
    if [ $RUNNING != 0 ]
    then
      RUNNING=1
    fi
    PLAYING=1
    TRACK=""
    ALBUM=""
    ARTIST=""
    if [[ $RUNNING -eq 0 ]]
    then
      [[ "$(osascript -e 'if application "Spotify" is running then tell application "Spotify" to get player state')" == "playing" ]] && PLAYING=0
      TRACK="$(osascript -e 'tell application "Spotify" to get name of current track')"
      ARTIST="$(osascript -e 'tell application "Spotify" to get artist of current track')"
      ALBUM="$(osascript -e 'tell application "Spotify" to get album of current track')"
    fi
    if [[ -n "$TRACK" ]]
    then
      sketchybar -m --set "$NAME" drawing=on
      [[ "$PLAYING" -eq 0 ]] && ICON=""
      [[ "$PLAYING" -eq 1 ]] && ICON=""
      if [ "$ARTIST" == "" ]
      then
        sketchybar -m --set "$NAME" label="''${ICON} ''${TRACK} - ''${ALBUM}"
      else
        sketchybar -m --set "$NAME" label="''${ICON} ''${TRACK} - ''${ARTIST}"
      fi
    else
      sketchybar -m --set "$NAME" label="" drawing=off
    fi
  '';
in {

  options = {
    heywoodlh.darwin.sketchybar.enable = mkOption {
      default = false;
      description = ''
        Enable heywoodlh nord-themed sketchybar.
      '';
      type = types.bool;
    };
  };

  config = mkIf cfg.enable {
    system.defaults.NSGlobalDomain._HIHideMenuBar = true; # Disable menu bar
    homebrew = {
      casks = [
        "font-jetbrains-mono-nerd-font"
      ];
    };
    services.sketchybar = {
      enable = true;
      extraPackages = with pkgs; [
        jetbrains-mono
      ];
      config = ''
        ############## BAR ##############
          sketchybar -m --bar \
            height=32 \
            position=top \
            padding_left=5 \
            padding_right=5 \
            color=0xff2e3440 \
            shadow=off \
            sticky=on \
            topmost=off

        ############## GLOBAL DEFAULTS ##############
          sketchybar -m --default \
            updates=when_shown \
            drawing=on \
            cache_scripts=on \
            icon.font="JetBrainsMono Nerd Font Mono:Bold:18.0" \
            icon.color=0xffffffff \
            label.font="JetBrainsMono Nerd Font Mono:Bold:12.0" \
            label.color=0xffeceff4 \
            label.highlight_color=0xff8CABC8

        ############## SPACE DEFAULTS ##############
          sketchybar -m --default \
            label.padding_left=5 \
            label.padding_right=2 \
            icon.padding_left=8 \
            label.padding_right=8

        ############## PRIMARY DISPLAY SPACES ##############
          # APPLE ICON
          sketchybar -m --add item apple left \
            --set apple icon= \
            --set apple icon.font="JetBrainsMono Nerd Font Mono:Regular:20.0" \
            --set apple label.padding_right=0 \

          # SPACE 1: WEB ICON
          sketchybar -m --add space web left \
            --set web icon= \
            --set web icon.highlight_color=0xff8CABC8 \
            --set web associated_space=1 \
            --set web icon.padding_left=5 \
            --set web icon.padding_right=5 \
            --set web label.padding_right=0 \
            --set web label.padding_left=0 \
            --set web label.color=0xffeceff4 \
            --set web background.color=0xff57627A  \
            --set web background.height=21 \
            --set web background.padding_left=12 \
            --set web click_script="open -a Firefox.app" \

          # SPACE 2: CODE ICON
          sketchybar -m --add space code left \
            --set code icon= \
            --set code associated_space=2 \
            --set code icon.padding_left=5 \
            --set code icon.padding_right=5 \
            --set code label.padding_right=0 \
            --set code label.padding_left=0 \
            --set code label.color=0xffeceff4 \
            --set code background.color=0xff57627A  \
            --set code background.height=21 \
            --set code background.padding_left=7 \
            --set code click_script="$HOME/.nix-profile/bin/wezterm" \

          # SPACE 3: MUSIC ICON
          #sketchybar -m --add space music left \
          #  --set music icon= \
          #  --set music icon.highlight_color=0xff8CABC8 \
          #  --set music associated_display=1 \
          #  --set music associated_space=5 \
          #  --set music icon.padding_left=5 \
          #  --set music icon.padding_right=5 \
          #  --set music label.padding_right=0 \
          #  --set music label.padding_left=0 \
          #  --set music label.color=0xffeceff4 \
          #  --set music background.color=0xff57627A  \
          #  --set music background.height=21 \
          #  --set music background.padding_left=7 \
          #  --set music click_script="open -a Spotify.app" \

          # SPOTIFY STATUS
          # CURRENT SPOTIFY SONG
          # Adding custom events which can listen on distributed notifications from other running processes
          #sketchybar -m --add event spotify_change "com.spotify.client.PlaybackStateChanged" \
          #  --add item spotify_indicator left \
          #  --set spotify_indicator background.color=0xff57627A  \
          #  --set spotify_indicator background.height=21 \
          #  --set spotify_indicator background.padding_left=7 \
          #  --set spotify_indicator script="${spotify-indicator-sh}/bin/spotify-indicator.sh" \
          #  --set spotify_indicator click_script="osascript -e 'tell application \"Spotify\" to pause'" \
          #  --subscribe spotify_indicator spotify_change \

        ############## ITEM DEFAULTS ###############
          sketchybar -m --default \
            label.padding_left=2 \
            icon.padding_right=2 \
            icon.padding_left=6 \
            label.padding_right=6

        ############## RIGHT ITEMS ##############
          # DATE TIME
          sketchybar -m --add item date_time right \
            --set date_time icon= \
            --set date_time icon.padding_left=8 \
            --set date_time icon.padding_right=0 \
            --set date_time label.padding_right=9 \
            --set date_time label.padding_left=6 \
            --set date_time label.color=0xffeceff4 \
            --set date_time update_freq=20 \
            --set date_time background.color=0xff57627A \
            --set date_time background.height=21 \
            --set date_time background.padding_right=12 \
            # --set date_time script="${date-time-sh}/bin/date-time.sh" \

          # Battery STATUS
          sketchybar -m --add item battery right \
            --set battery icon.font="JetBrainsMono Nerd Font Mono:Bold:10.0" \
            --set battery icon.padding_left=8 \
            --set battery icon.padding_right=8 \
            --set battery label.padding_right=8 \
            --set battery label.padding_left=0 \
            --set battery label.color=0xffffffff \
            --set battery background.color=0xff57627A  \
            --set battery background.height=21 \
            --set battery background.padding_right=7 \
            --set battery update_freq=10 \
            # --set battery script="${battery-sh}/bin/battery.sh" \

          # RAM USAGE
          sketchybar -m --add item topmem right \
            --set topmem icon= \
            --set topmem icon.padding_left=8 \
            --set topmem icon.padding_right=0 \
            --set topmem label.padding_right=8 \
            --set topmem label.padding_left=6 \
            --set topmem label.color=0xffeceff4 \
            --set topmem background.color=0xff57627A  \
            --set topmem background.height=21 \
            --set topmem background.padding_right=7 \
            --set topmem update_freq=2 \
            # --set topmem script="${top-mem-sh}/bin/top-mem.sh" \

          # CPU USAGE
          sketchybar -m --add item cpu_percent right \
            --set cpu_percent icon= \
            --set cpu_percent icon.padding_left=8 \
            --set cpu_percent icon.padding_right=0 \
            --set cpu_percent label.padding_right=8 \
            --set cpu_percent label.padding_left=6 \
            --set cpu_percent label.color=0xffeceff4 \
            --set cpu_percent background.color=0xff57627A  \
            --set cpu_percent background.height=21 \
            --set cpu_percent background.padding_right=7 \
            --set cpu_percent update_freq=2 \
            # --set cpu_percent script="${cpu-sh}/bin/cpu.sh" \

          # CAFFEINE
          sketchybar -m --add item caffeine right \
            --set caffeine icon.padding_left=8 \
            --set caffeine icon.padding_right=0 \
            --set caffeine label.padding_right=0 \
            --set caffeine label.padding_left=6 \
            --set caffeine label.color=0xffeceff4 \
            --set caffeine background.color=0xff57627A  \
            --set caffeine background.height=21 \
            --set caffeine background.padding_right=7 \
            # --set caffeine script="${caffeine-sh}/bin/caffeine.sh" \
            # --set caffeine click_script="${caffeine-click-sh}/bin/caffeine-click.sh" \

          # TOP PROCESS
          sketchybar -m --add item topproc right \
            --set topproc drawing=on \
            --set topproc label.padding_right=10 \
            --set topproc update_freq=15 \
            # --set topproc script="${top-proc-sh}/bin/topproc.sh"

        ###################### CENTER ITEMS ###################


        ############## FINALIZING THE SETUP ##############
        sketchybar -m --update

        echo "sketchybar configuration loaded.."
      '';
    };
  };
}

================
File: modules/darwin/config/yabai/yabai.nix
================
# { 
#   config, 
#   pkgs, 
#   ... 
#   }:

# {
#   services = {
#     yabai = {
#       enable = true;
#       config = {
#         layout = "bsp";
#         # external_bar = "off:40:0";
#         # menubar_opacity = "1.0";
#         # mouse_follows_focus = "off";
#         # focus_follows_mouse = "off";
#         # display_arrangement_order = [ "default" ];
        
#         insert_feedback_color = "0xffd75f5f";
#         split_ratio = 0.50;
#         split_type = "auto";
#         auto_balance = false;

#         # # Window Spacing
#         top_padding = "3";
#         bottom_padding = "3";
#         left_padding = "3";
#         right_padding = "3";
#         window_gap = "3";

#         # # Window Properties
#         # window_origin_display = "default";
#         # window_placement = "second_child";
#         # window_zoom_persist = true;
#         # window_shadow = true;
#         # window_animation_duration = 0.0;
#         # window_animation_easing = "ease_out_circ";
#         # window_opacity_duration = 0.0;
#         # active_window_opacity = 1.0;
#         # normal_window_opacity = 0.90;
#         # window_opacity = false;
#         window_shadow = "float";
#       };
#     };
#   };
# }

================
File: modules/darwin/config/yabai/yabairc
================
# #!/usr/bin/env sh

# # bar settings
# # yabai -m config status_bar                     off
# # yabai -m config status_bar_text_font           "Helvetica Neue:Bold:12.0"
# # yabai -m config status_bar_icon_font           "FontAwesome:Regular:12.0"
# # yabai -m config status_bar_background_color    0xff202020
# # yabai -m config status_bar_foreground_color    0xffa8a8a8
# # yabai -m config status_bar_space_icon_strip    I II III IV V VI VII VIII IX X
# # yabai -m config status_bar_power_icon_strip
# # yabai -m config status_bar_space_icon  
# # yabai -m config status_bar_clock_icon      
# yabai -m config external_bar                     off:40:0
# yabai -m config menubar_opacity                  1.0


# yabai -m config mouse_follows_focus              off
# yabai -m config focus_follows_mouse              off
# yabai -m config display_arrangement_order        default

# yabai -m config insert_feedback_color            0xffd75f5f
# yabai -m config split_ratio                      0.50
# yabai -m config split_type                       auto
# yabai -m config auto_balance                     false

# # Window Spacing
# yabai -m config layout                           bsp
# yabai -m config top_padding                      30
# yabai -m config bottom_padding                   30
# yabai -m config left_padding                     30
# yabai -m config right_padding                    30
# yabai -m config window_gap                       30

# # Window Properties
# yabai -m config window_origin_display            default
# yabai -m config window_placement                 second_child
# yabai -m config window_zoom_persist              true
# yabai -m config window_shadow                    true
# yabai -m config window_animation_duration        0.0
# yabai -m config window_animation_easing          ease_out_circ
# yabai -m config window_opacity_duration          0.0
# yabai -m config active_window_opacity            1.0
# yabai -m config normal_window_opacity            0.90

# # window_opacity = false
# # window_shadow = float

# # Mouse Properties
# yabai -m config mouse_modifier                   ctrl 
# yabai -m config mouse_drop_action                stack     
# yabai -m config mouse_action1                    move
# # mouse_action2 = resize
# # mouse_drop_action = swap

# yabai -m rule   --add app=OBS                    display=east
# yabai -m rule   --add app=Spotify                display=east

# yabai -m rule   --add app="Cardhop"              manage=off
# yabai -m rule   --add app="Pop"                  manage=off
# yabai -m rule   --add app="System Settings"      manage=off
# yabai -m rule   --add app="Timery"               manage=off

# yabai -m signal --add event=display_added        action=yabai -m rule --remove label=calendar && yabai -m rule --add app=Fantastical label=calendar display=east         active=yes
# yabai -m signal --add event=display_removed      action=yabai -m rule --remove label=calendar && yabai -m rule --add app=Fantastical label=calendar native-fullscreen=on active=yes

================
File: modules/darwin/dock/default.nix
================
{ config, pkgs, lib, ... }:

# Original source: https://gist.github.com/antifuchs/10138c4d838a63c0a05e725ccd7bccdd

with lib;
let
  cfg = config.local.dock;
  inherit (pkgs) stdenv dockutil;
in
{
  options = {
    local.dock.enable = mkOption {
      description = "Enable dock";
      default = stdenv.isDarwin;
      example = false;
    };

    local.dock.entries = mkOption
      {
        description = "Entries on the Dock";
        type = with types; listOf (submodule {
          options = {
            path = lib.mkOption { type = str; };
            section = lib.mkOption {
              type = str;
              default = "apps";
            };
            options = lib.mkOption {
              type = str;
              default = "";
            };
          };
        });
        readOnly = true;
      };
  };

  config =
    mkIf cfg.enable
      (
        let
          normalize = path: if hasSuffix ".app" path then path + "/" else path;
          entryURI = path: "file://" + (builtins.replaceStrings
            [" "   "!"   "\""  "#"   "$"   "%"   "&"   "'"   "("   ")"]
            ["%20" "%21" "%22" "%23" "%24" "%25" "%26" "%27" "%28" "%29"]
            (normalize path)
          );
          wantURIs = concatMapStrings
            (entry: "${entryURI entry.path}\n")
            cfg.entries;
          createEntries = concatMapStrings
            (entry: "${dockutil}/bin/dockutil --no-restart --add '${entry.path}' --section ${entry.section} ${entry.options}\n")
            cfg.entries;
        in
        {
          system.activationScripts.postUserActivation.text = ''
            echo >&2 "Setting up the Dock..."
            haveURIs="$(${dockutil}/bin/dockutil --list | ${pkgs.coreutils}/bin/cut -f2)"
            if ! diff -wu <(echo -n "$haveURIs") <(echo -n '${wantURIs}') >&2 ; then
              echo >&2 "Resetting Dock."
              ${dockutil}/bin/dockutil --no-restart --remove all
              ${createEntries}
              killall Dock
            else
              echo >&2 "Dock setup complete."
            fi
          '';
        }
      );
}

================
File: modules/darwin/casks.nix
================
_:

[
  # AI Tools 
  "claude"
  "chatgpt"
  "lm-studio"
  "ollama"

  
  # Automation Tools
  # "hammerspoon"
  # "kit"

  # Document Tools
  "adobe-acrobat-reader"

  # Development Tools
  # "homebrew/cask/docker"
  # "visual-studio-code"
  "cursor"

  "orbstack" # pre-install/login required
  "talon"
  "qflipper"
  # "warp"
  "sonic-pi"

  # Communication Tools
  # "discord"
  # "notion"
  # "slack"
  #"telegram"
  "zoom"
  "beeper" # pre-install/login required

  # Crypto Tools
  "ledger-live"

  # Utility Tools
  "syncthing"
  "1password@nightly"
  "spacedrive"
  "bazecor"
  "homerow"
  "sdformatter"
  "hiddenbar"
  "karabiner-elements"
  "keycastr"
  "disk-inventory-x"
  "raspberry-pi-imager"
  "bettertouchtool"
  
  # Entertainment Tools
  "vlc"
  "transmission"

  # Productivity Tools
  "raycast"
  "obsidian"

  # Browsers
  "brave-browser"
  "duckduckgo"
  "firefox"
  "google-chrome"
  "orion"
  
  # Security Tools
  "silentknight"
  "xprocheck"
  "secretive"
  
  # Virtualization
  "utm"
  "crystalfetch"

  # Networking
  "tailscale" # pre-install/login required
  "wireshark"
  # "yabai"
  
  # VScode/Cursor

  # Extensions


]

================
File: modules/darwin/files.nix
================
{ user, config, pkgs, ... }:

let
  xdg_configHome = "${config.users.users.${user}.home}/.config";
  xdg_dataHome   = "${config.users.users.${user}.home}/.local/share";
  xdg_stateHome  = "${config.users.users.${user}.home}/.local/state"; in
{

  # Raycast script so that "Run Emacs" is available and uses Emacs daemon
  "${xdg_dataHome}/bin/emacsclient" = {
    executable = true;
    text = ''
      #!/bin/zsh
      #
      # Required parameters:
      # @raycast.schemaVersion 1
      # @raycast.title Run Emacs
      # @raycast.mode silent
      #
      # Optional parameters:
      # @raycast.packageName Emacs
      # @raycast.icon ${xdg_dataHome}/img/icons/Emacs.icns
      # @raycast.iconDark ${xdg_dataHome}/img/icons/Emacs.icns

      if [[ $1 = "-t" ]]; then
        # Terminal mode
        ${pkgs.emacs}/bin/emacsclient -t $@
      else
        # GUI mode
        ${pkgs.emacs}/bin/emacsclient -c -n $@
      fi
    '';
  };
  # Initialize Karabiner-Elements
  "${xdg_configHome}/karabiner/karabiner.json" = {
    text = builtins.readFile ../darwin/config/karabiner/karabiner.json;
  };

  # Initialize Yabai
  # "${xdg_configHome}/yabai/yabairc" = {
  #   text = builtins.readFile ../darwin/config/yabai/yabairc;
  # };
##################################################
# ┌┬┬  move config to home-manager modules ← ← ← #
# ↓↓↓ ############################################
#   "${xdg_configHome}/karabiner/karabiner.json" = {
#     text = ''
# {
#    "profiles": [
#       {
#          "complex_modifications": {
#             "rules": [
#                {
#                   "description": "YABAI SPACE: MIRROR (Flip)                                                                                                     [⌥] option    +   [⌘] command  +  { f }",
#                   "manipulators": [
#                      {
#                         "from": {
#                            "key_code": "x",
#                            "modifiers": {
#                               "mandatory": [
#                                  "shift",
#                                  "option"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m space --mirror x-axis "
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "y",
#                            "modifiers": {
#                               "mandatory": [
#                                  "shift",
#                                  "option"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m space --mirror y-axis "
#                            }
#                         ],
#                         "type": "basic"
#                      }
#                   ]
#                },
#                {
#                   "description": "YABAI SPACE: MOVE (Next/Prev)                                                                                                [⇧] shift       +   [⌥] option        +  { n, p }",
#                   "manipulators": [
#                      {
#                         "from": {
#                            "key_code": "n",
#                            "modifiers": {
#                               "mandatory": [
#                                  "shift",
#                                  "option"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --space next"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "p",
#                            "modifiers": {
#                               "mandatory": [
#                                  "shift",
#                                  "option"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --space prev"
#                            }
#                         ],
#                         "type": "basic"
#                      }
#                   ]
#                },
#                {
#                   "description": "YABAI SPACE: ROTATE                                                                                                                                                             [⇧] shift       +   [⌥] option        +  { ⏴j  ;⏵ }",
#                   "manipulators": [
#                      {
#                         "from": {
#                            "key_code": "semicolon",
#                            "modifiers": {
#                               "mandatory": [
#                                  "shift",
#                                  "option"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m space --rotate 270"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "j",
#                            "modifiers": {
#                               "mandatory": [
#                                  "shift",
#                                  "option"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m space --rotate 90"
#                            }
#                         ],
#                         "type": "basic"
#                      }
#                   ]
#                },
#                {
#                   "description": "YABAI WINDOW: MOVE (Split)                                                                                                                                  [⌃] control   +   [⌘] command  +  { ⏴j ⏶k l⏷ ;⏵ }",
#                   "manipulators": [
#                      {
#                         "from": {
#                            "key_code": "j",
#                            "modifiers": {
#                               "mandatory": [
#                                  "control",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --warp west"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "k",
#                            "modifiers": {
#                               "mandatory": [
#                                  "control",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --warp north"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "l",
#                            "modifiers": {
#                               "mandatory": [
#                                  "control",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --warp south"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "semicolon",
#                            "modifiers": {
#                               "mandatory": [
#                                  "control",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --warp east"
#                            }
#                         ],
#                         "type": "basic"
#                      }
#                   ]
#                },
#                {
#                   "description": "YABAI WINDOW: SWAP                                                                                                                                                      [⌥] option    +   [⌘] command  +  { ⏴j ⏶k l⏷ ;⏵ }",
#                   "manipulators": [
#                      {
#                         "from": {
#                            "key_code": "j",
#                            "modifiers": {
#                               "mandatory": [
#                                  "option",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/usr/local/bin/yabai -m window --swap west"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "k",
#                            "modifiers": {
#                               "mandatory": [
#                                  "option",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/usr/local/bin/yabai -m window --swap north"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "l",
#                            "modifiers": {
#                               "mandatory": [
#                                  "option",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/usr/local/bin/yabai -m window --swap south"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "semicolon",
#                            "modifiers": {
#                               "mandatory": [
#                                  "option",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/usr/local/bin/yabai -m window --swap east"
#                            }
#                         ],
#                         "type": "basic"
#                      }
#                   ]
#                },
#                {
#                   "description": "YABAI WINDOW: SIZE (Up)                                                                                                                              [⇧] shift       +   [⌘] command  +  { ⏴j ⏶k l⏷ ;⏵ }",
#                   "manipulators": [
#                      {
#                         "from": {
#                            "key_code": "j",
#                            "modifiers": {
#                               "mandatory": [
#                                  "shift",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:-100:0"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "k",
#                            "modifiers": {
#                               "mandatory": [
#                                  "shift",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize top_left:0:-100"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "l",
#                            "modifiers": {
#                               "mandatory": [
#                                  "shift",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:0:100"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "semicolon",
#                            "modifiers": {
#                               "mandatory": [
#                                  "shift",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:100:0"
#                            }
#                         ],
#                         "type": "basic"
#                      }
#                   ]
#                },
#                {
#                   "description": "YABAI WINDOW: SIZE (Down)                                                                                                                                                                                                   [⌃] control   +   [⌘] command  +  [⇧] shift +  { ⏴j ⏶k l⏷ ;⏵ }",
#                   "manipulators": [
#                      {
#                         "from": {
#                            "key_code": "j",
#                            "modifiers": {
#                               "mandatory": [
#                                  "control",
#                                  "shift",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:-100:0"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "k",
#                            "modifiers": {
#                               "mandatory": [
#                                  "control",
#                                  "shift",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize top_right:0:100"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "l",
#                            "modifiers": {
#                               "mandatory": [
#                                  "control",
#                                  "shift",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:0:-100"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "semicolon",
#                            "modifiers": {
#                               "mandatory": [
#                                  "control",
#                                  "shift",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:100:0"
#                            }
#                         ],
#                         "type": "basic"
#                      }
#                   ]
#                },
#                {
#                   "description": "YABAI WINDOW: FOCUS                                                                                                                     [⌥] option    +   { ⏴j ⏶k l⏷ ;⏵ }",
#                   "manipulators": [
#                      {
#                         "from": {
#                            "key_code": "j",
#                            "modifiers": {
#                               "mandatory": [
#                                  "option"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --focus west"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "k",
#                            "modifiers": {
#                               "mandatory": [
#                                  "option"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --focus north"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "l",
#                            "modifiers": {
#                               "mandatory": [
#                                  "option"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --focus south"
#                            }
#                         ],
#                         "type": "basic"
#                      },
#                      {
#                         "from": {
#                            "key_code": "semicolon",
#                            "modifiers": {
#                               "mandatory": [
#                                  "option"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --focus east"
#                            }
#                         ],
#                         "type": "basic"
#                      }
#                   ]
#                },
#                {
#                   "description": "YABAI WINDOW: TOGGLE(Float)                                                                                            [⌥] option    +   [⌘] command  +  { f }",
#                   "manipulators": [
#                      {
#                         "from": {
#                            "key_code": "f",
#                            "modifiers": {
#                               "mandatory": [
#                                  "option",
#                                  "command"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --toggle float --grid 4:4:1:1:2:2"
#                            }
#                         ],
#                         "type": "basic"
#                      }
#                   ]
#                },
#                {
#                   "description": "YABAI WINDOW: TOGGLE(Fullscreen)                                                                                                  [⇧] shift       +   [⌘] option        +  { m }",
#                   "manipulators": [
#                      {
#                         "from": {
#                            "key_code": "m",
#                            "modifiers": {
#                               "mandatory": [
#                                  "shift",
#                                  "option"
#                               ]
#                            }
#                         },
#                         "to": [
#                            {
#                               "shell_command": "/run/current-system/sw/bin/yabai -m window --toggle zoom-fullscreen"
#                            }
#                         ],
#                         "type": "basic"
#                      }
#                   ]
#                }
#             ]
#          },
#          "name": "Default profile",
#          "selected": true,
#          "virtual_hid_keyboard": {
#             "keyboard_type_v2": "ansi"
#          }
#       }
#    ],
#    "rules": [
#       {
#          "description": "YABAI WINDOW: FOCUS              |    [⌥] option    +  { ⏴j, ⏶k, ⏷l, ⏵; }",
#          "manipulators": [
#             {
#                "from": {
#                   "key_code": "j",
#                   "modifiers": {
#                      "mandatory": [
#                         "option"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --focus west"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "k",
#                   "modifiers": {
#                      "mandatory": [
#                         "option"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --focus north"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "l",
#                   "modifiers": {
#                      "mandatory": [
#                         "option"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --focus south"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "semicolon",
#                   "modifiers": {
#                      "mandatory": [
#                         "option"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --focus east"
#                   }
#                ],
#                "type": "basic"
#             }
#          ]
#       },
#       {
#          "description": "YABAI WINDOW: FOCUS              |    [fn] function +  {n,p,tab} ",
#          "manipulators": [
#             {
#                "from": {
#                   "key_code": "n",
#                   "modifiers": {
#                      "mandatory": [
#                         "fn"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m query --windows --space | /usr/local/bin/jq '.[-1].id' | xargs -I{} /run/current-system/sw/bin/yabai -m window --focus {}"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "p",
#                   "modifiers": {
#                      "mandatory": [
#                         "fn"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m query --windows --space | /usr/local/bin/jq '.[1].id' | xargs -I{} /run/current-system/sw/bin/yabai -m window --focus {}"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "tab",
#                   "modifiers": {
#                      "mandatory": [
#                         "fn"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --focus next"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "tab",
#                   "modifiers": {
#                      "mandatory": [
#                         "fn",
#                         "shift"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --focus prev"
#                   }
#                ],
#                "type": "basic"
#             }
#          ]
#       },
#       {
#          "description": "YABAI WINDOW: SIZE (UP)          |    [⇧] shift       +   [⌘] command  +  { ⏴j, ⏶k, ⏷l, ⏵; }",
#          "manipulators": [
#             {
#                "from": {
#                   "key_code": "j",
#                   "modifiers": {
#                      "mandatory": [
#                         "shift",
#                         "command"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:-100:0"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "k",
#                   "modifiers": {
#                      "mandatory": [
#                         "shift",
#                         "command"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize top_left:0:-100"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "l",
#                   "modifiers": {
#                      "mandatory": [
#                         "shift",
#                         "command"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:0:100"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "semicolon",
#                   "modifiers": {
#                      "mandatory": [
#                         "shift",
#                         "command"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:100:0"
#                   }
#                ],
#                "type": "basic"
#             }
#          ]
#       },
#       {
#          "description": "YABAI WINDOW: SIZE (DOWN)    |    [⇧] shift      +   [⌘] command   +  [⌃] control +  { ⏴j, ⏶k, ⏷l, ⏵; }",
#          "manipulators": [
#             {
#                "from": {
#                   "key_code": "h",
#                   "modifiers": {
#                      "mandatory": [
#                         "fn",
#                         "shift",
#                         "control"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:-100:0"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "j",
#                   "modifiers": {
#                      "mandatory": [
#                         "fn",
#                         "shift",
#                         "control"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize top_right:0:100"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "k",
#                   "modifiers": {
#                      "mandatory": [
#                         "fn",
#                         "shift",
#                         "control"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_right:0:-100"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "l",
#                   "modifiers": {
#                      "mandatory": [
#                         "fn",
#                         "shift",
#                         "control"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --resize bottom_left:100:0"
#                   }
#                ],
#                "type": "basic"
#             }
#          ]
#       },
#       {
#          "description": "YABAI WINDOW: SWAP                |    [⌥] option    +   [⌘] command  +  { ⏴j, ⏶k, ⏷l, ⏵; }",
#          "manipulators": [
#             {
#                "from": {
#                   "key_code": "j",
#                   "modifiers": {
#                      "mandatory": [
#                         "option",
#                         "command"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/usr/local/bin/yabai -m window --swap west"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "k",
#                   "modifiers": {
#                      "mandatory": [
#                         "option",
#                         "command"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/usr/local/bin/yabai -m window --swap north"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "l",
#                   "modifiers": {
#                      "mandatory": [
#                         "option",
#                         "command"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/usr/local/bin/yabai -m window --swap south"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "semicolon",
#                   "modifiers": {
#                      "mandatory": [
#                         "option",
#                         "command"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/usr/local/bin/yabai -m window --swap east"
#                   }
#                ],
#                "type": "basic"
#             }
#          ]
#       },
#       {
#          "description": "YABAI WINDOW: WARP                |    [⌃] control   +   [⌘] command  +  { ⏴j, ⏶k, ⏷l, ⏵; }",
#          "manipulators": [
#             {
#                "from": {
#                   "key_code": "j",
#                   "modifiers": {
#                      "mandatory": [
#                         "control",
#                         "command"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --warp west"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "k",
#                   "modifiers": {
#                      "mandatory": [
#                         "control",
#                         "command"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --warp north"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "l",
#                   "modifiers": {
#                      "mandatory": [
#                         "control",
#                         "command"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --warp south"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "semicolon",
#                   "modifiers": {
#                      "mandatory": [
#                         "control",
#                         "command"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m window --warp east"
#                   }
#                ],
#                "type": "basic"
#             }
#          ]
#       },
#       {
#          "description": "YABAI SPACE: layout [fn] +  { b, f }",
#          "manipulators": [
#             {
#                "from": {
#                   "key_code": "b",
#                   "modifiers": {
#                      "mandatory": [
#                         "fn"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m space --layout bsp"
#                   }
#                ],
#                "type": "basic"
#             },
#             {
#                "from": {
#                   "key_code": "f",
#                   "modifiers": {
#                      "mandatory": [
#                         "fn"
#                      ]
#                   }
#                },
#                "to": [
#                   {
#                      "shell_command": "/run/current-system/sw/bin/yabai -m space --layout float"
#                   }
#                ],
#                "type": "basic"
#             }
#          ]
#       }
#    ],
#    "selected": true,
#    "virtual_hid_keyboard": {
#       "keyboard_type_v2": "ansi"
#    },
#    "title": "lessuseless Karabiner Configuration"
# }
#     '';
#   };
}

================
File: modules/darwin/home-manager.nix
================
{ config, pkgs, lib, home-manager, ... }:

let
  user = "lessuseless";
  # Define the content of your file as a derivation
  myEmacsLauncher = pkgs.writeScript "emacs-launcher.command" ''
    #!/bin/sh
      emacsclient -c -n &
  '';
  sharedFiles = import ../shared/files.nix { inherit config pkgs; };
  additionalFiles = import ./files.nix { inherit user config pkgs; };
in
{
  imports = [
  #  ../darwin/config/karabiner/karabiner.json
  #  ../darwin/config/yabai/yabairc
   ./dock
  ];

  # It me
  users.users.${user} = {
    name = "${user}";
    home = "/Users/${user}";
    isHidden = false;
    shell = pkgs.zsh;
  };

  homebrew = {
    # This is a module from nix-darwin
    # Homebrew is *installed* via the flake input nix-homebrew
    enable = true;
    casks = pkgs.callPackage ./casks.nix {};
    
    # If shell gives compinit errors and completions
    # or shell elements are broken, 
    # imparitively run:
    # `brew upgrade && brew cleanup && brew completions link`

    # These app IDs are from using the mas CLI app
    # mas = mac app store
    # https://github.com/mas-cli/mas
    #
    # $ nix shell nixpkgs#mas
    # $ mas search <app name>
    #:
    masApps = {
    #  "1password" = 1333542190;
    #  "hidden-bar" = 1452453066;
    #  "wireguard" = 1451685025;
      "gordian seed tool" = 1545088229;
    };
  };

  networking.knownNetworkServices = [
    "Wi-Fi" 
    "USB 10/100/1000 LAN" 
    "Bluetooth PAN" 
    "Thunderbolt Bridge" 
    ];

  # Enable home-manager
  home-manager = {
    useGlobalPkgs = true;
    users.${user} = { pkgs, config, lib, ... }:{
      home = {
        enableNixpkgsReleaseCheck = false;
        packages = pkgs.callPackage ./packages.nix {};
        file = lib.mkMerge [
          sharedFiles
          additionalFiles
          { 
          "emacs-launcher.command".source = myEmacsLauncher; 
          "Downloads".source = config.lib.file.mkOutOfStoreSymlink "${config.home.homeDirectory}/.local/share/downloads";
          }
            
        ];

        stateVersion = "24.11";
      };

      programs = {} // import ../shared/home-manager.nix { inherit config pkgs lib; };

      # Marked broken Oct 20, 2022 check later to remove this
      # https://github.com/nix-community/home-manager/issues/3344
      manual.manpages.enable = false;
    };
  };

  # Fully declarative dock using the latest from Nix Store
  local = {
    dock.enable = true;
    dock.entries = [
      # { path = "${pkgs.warp}/Applications/Warp.app/"; }
      # { path = "/System/Applications/Facetime.app/"; }
      { path = "${pkgs.alacritty}/Applications/Alacritty.app/"; }
      { path = "${pkgs.emacs}/Applications/Emacs.app/"; }
      
      #{ path = "/Applications/Slack.app/"; }
      #{ path = "/System/Applications/Messages.app/"; }
      #{ path = "/System/Applications/Facetime.app/"; }
      #{ path = "/Applications/Telegram.app/"; }
      #{ path = "${pkgs.alacritty}/Applications/Alacritty.app/"; }
      #{ path = "/System/Applications/Music.app/"; }
      #{ path = "/System/Applications/News.app/"; }
      #{ path = "/System/Applications/Photos.app/"; }
      #{ path = "/System/Applications/Photo Booth.app/"; }
      #{ path = "/System/Applications/TV.app/"; }
      #{ path = "${pkgs.jetbrains.phpstorm}/Applications/PhpStorm.app/"; }
      #{ path = "/Applications/TablePlus.app/"; }
      #{ path = "/Applications/Asana.app/"; }
      #{ path = "/Applications/Drafts.app/"; }
      #{ path = "/System/Applications/Home.app/"; }
      { path = "/Applications/iPhone Mirroring.app/"; }
      {
        path = toString myEmacsLauncher;
        section = "others";
      }
      {
        path = "${config.users.users.${user}.home}/.local/share/";
        section = "others";
        options = "--sort name --view grid --display folder";
      }
      {
        path = "${config.users.users.${user}.home}/.local/share/downloads";
        section = "others";
        options = "--sort name --view grid --display stack";
      }
    ];
  };
}

================
File: modules/darwin/packages.nix
================
{ pkgs }:

with pkgs;
let shared-packages = import ../shared/packages.nix { inherit pkgs; }; in
shared-packages ++ [
  dockutil
  gh
  pinentry_mac
  # yabai
  mods
  mas
  iina
  # heimdall
  # heimdall-gui
]

================
File: modules/darwin/README.md
================
## Layout
```
.
├── dock               # MacOS dock configuration
├── casks.nix          # List of homebrew casks
├── default.nix        # Defines module, system-level config
├── files.nix          # Non-Nix, static configuration files (now immutable!)
├── home-manager.nix   # Defines user programs
├── packages.nix       # List of packages to install for MacOS
```

================
File: modules/darwin/secrets.nix
================
{ config, pkgs, agenix, secrets, ... }:

let user = "lessuseless"; in
{
  age.identityPaths = [
    "/Users/${user}/.ssh/id_ed25519"
  ];

  # Your secrets go here
  #
  # Note: the installWithSecrets command you ran to boostrap the machine actually copies over
  #       a Github key pair. However, if you want to store the keypair in your nix-secrets repo
  #       instead, you can reference the age files and specify the symlink path here. Then add your
  #       public key in shared/files.nix.
  #
  #       If you change the key name, you'll need to update the SSH configuration in shared/home-manager.nix
  #       so Github reads it correctly.

  # age.secrets."github-ssh-key" = {
  #   symlink = true;
  #   path = "/Users/${user}/.ssh/id_github";
  #   file =  "${secrets}/github-ssh-key.age";
  #   mode = "600";
  #   owner = "${user}";
  #   group = "staff";
  # };

  # age.secrets."github-signing-key" = {
  #   symlink = false;
  #   path = "/Users/${user}/.ssh/pgp_github.key";
  #   file =  "${secrets}/github-signing-key.age";
  #   mode = "600";
  #   owner = "${user}";
  # };

}

================
File: modules/nixos/config/polybar/bars.ini
================
;; ┌────────────────────────────────────────────────────┐
;; │░█▀█░█▀█░█░░░█░█░█▀▄░█▀█░█▀▄░░░░░░░░░█▀▄░█▀█░█▀▄░█▀▀│
;; │░█▀▀░█░█░█░░░░█░░█▀▄░█▀█░█▀▄░░░░▀░░░░█▀▄░█▀█░█▀▄░▀▀█│
;; │░▀░░░▀▀▀░▀▀▀░░▀░░▀▀░░▀░▀░▀░▀░░░░▀░░░░▀▀░░▀░▀░▀░▀░▀▀▀│
;; │░Created░By░Aditya░Shakya░@adi1090x░░░░░░░░░░░░░░░░░│
;; └────────────────────────────────────────────────────┘

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[bar]
fill = 
empty = 
indicator = ⏽
; Nerd font :   ,  ⏽,  樂 籠 錄 , 雷 絛

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/volume]
type = internal/alsa

; Soundcard to be used
; Usually in the format hw:# where # is the card number
; You can find the different card numbers in `/proc/asound/cards`
master-soundcard = default
speaker-soundcard = default
headphone-soundcard = default

; Name of the master, speaker and headphone mixers
; Use the following command to list available mixer controls:
; $ amixer scontrols | sed -nr "s/.*'([[:alnum:]]+)'.*/\1/p"
; If master, speaker or headphone-soundcard isn't the default, 
; use `amixer -c # scontrols` instead where # is the number 
; of the master, speaker or headphone soundcard respectively
;
; Default: Master
master-mixer = Master

; Optionally define speaker and headphone mixers
; Default: none
;;speaker-mixer = Speaker
; Default: none
;;headphone-mixer = Headphone

; NOTE: This is required if headphone_mixer is defined
; Use the following command to list available device controls
; $ amixer controls | sed -r "/CARD/\!d; s/.*=([0-9]+).*name='([^']+)'.*/printf '%3.0f: %s\n' '\1' '\2'/e" | sort
; You may also need to use `amixer -c # controls` as above for the mixer names
; Default: none
;;headphone-id = 9

; Use volume mapping (similar to amixer -M and alsamixer), where the increase in volume is linear to the ear
; Default: false
;;mapped = true

; Interval for volume increase/decrease (in percent points)
; Default: 5
interval = 5

; Available tags:
;   <label-volume> (default)
;   <ramp-volume>
;   <bar-volume>
format-volume = <ramp-volume> <bar-volume>

; Available tags:
;   <label-muted> (default)
;   <ramp-volume>
;   <bar-volume>
format-muted = <label-muted>
format-muted-prefix = 

; Available tokens:
;   %percentage% (default)
label-volume = %percentage%%

; Available tokens:
;   %percentage% (default
label-muted = " Muted"
label-muted-foreground = ${color.foreground-alt}

; Only applies if <ramp-volume> is used
ramp-volume-0 = 
ramp-volume-1 = 
ramp-volume-2 = 

; Only applies if <bar-volume> is used
bar-volume-width = 10
bar-volume-gradient = false

bar-volume-indicator = ${bar.indicator}
bar-volume-indicator-foreground = ${color.foreground}

bar-volume-fill = ${bar.fill}
bar-volume-foreground-0 = ${color.foreground}
bar-volume-foreground-1 = ${color.foreground}
bar-volume-foreground-2 = ${color.foreground}

bar-volume-empty = ${bar.empty}
bar-volume-empty-foreground = ${color.foreground}

; If defined, it will replace <ramp-volume> when
; headphones are plugged in to `headphone_control_numid`
; If undefined, <ramp-volume> will be used for both
; Only applies if <ramp-volume> is used
ramp-headphones-0 = 

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/brightness]
;type = internal/xbacklight
type = internal/backlight

; Use the following command to list available cards:
; $ ls -1 /sys/class/backlight/
;card = intel_backlight
card = amdgpu_bl0

; Available tags:
;   <label> (default)
;   <ramp>
;   <bar>
format = <ramp> <bar>

; Available tokens:
;   %percentage% (default)
label = %percentage%%

; Only applies if <ramp> is used
ramp-0 = 
ramp-1 = 
ramp-2 = 
ramp-3 = 
ramp-4 = 

; Only applies if <bar> is used
bar-width = 10
bar-gradient = false

bar-indicator = ${bar.indicator}
bar-indicator-foreground = ${color.foreground}

bar-fill = ${bar.fill}
bar-foreground-0 = ${color.foreground}
bar-foreground-1 = ${color.foreground}
bar-foreground-2 = ${color.foreground}

bar-empty = ${bar.empty}
bar-empty-foreground = ${color.foreground}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/battery_bar]
type = internal/battery

; This is useful in case the battery never reports 100% charge
full-at = 99

; Use the following command to list batteries and adapters:
; $ ls -1 /sys/class/power_supply/
battery = BAT1
adapter = ACAD

; If an inotify event haven't been reported in this many
; seconds, manually poll for new values.
;
; Needed as a fallback for systems that don't report events
; on sysfs/procfs.
;
; Disable polling by setting the interval to 0.
;
; Default: 5
poll-interval = 2

; see "man date" for details on how to format the time string
; NOTE: if you want to use syntax tags here you need to use %%{...}
; Default: %H:%M:%S
time-format = %H:%M

; Available tags:
;   <label-charging> (default)
;   <bar-capacity>
;   <ramp-capacity>
;   <animation-charging>
format-charging = <bar-capacity>
format-charging-prefix = " "

; Available tags:
;   <label-discharging> (default)
;   <bar-capacity>
;   <ramp-capacity>
;   <animation-discharging>
format-discharging = <bar-capacity>
format-discharging-prefix = " " 

; Available tags:
;   <label-full> (default)
;   <bar-capacity>
;   <ramp-capacity>
format-full = <label-full>
format-full-prefix = " "

; Available tokens:
;   %percentage% (default)
;   %time%
;   %consumption% (shows current charge rate in watts)

label-charging = %percentage%%

; Available tokens:
;   %percentage% (default)
;   %time%
;   %consumption% (shows current discharge rate in watts)
label-discharging = %percentage%%

; Available tokens:
;   %percentage% (default)
label-full = " Full"

; Only applies if <bar-capacity> is used
bar-capacity-width = 10
bar-capacity-gradient = false

bar-capacity-indicator = ${bar.indicator}
bar-capacity-indicator-foreground = ${color.foreground}

bar-capacity-fill = ${bar.fill}
bar-capacity-foreground-0 = ${color.foreground}
bar-capacity-foreground-1 = ${color.foreground}
bar-capacity-foreground-2 = ${color.foreground}

bar-capacity-empty = ${bar.empty}
bar-capacity-empty-foreground = ${color.foreground}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/cpu_bar]
type = internal/cpu

; Seconds to sleep between updates
; Default: 1
interval = 0.5

; Available tags:
;   <label> (default)
;   <bar-load>
;   <ramp-load>
;   <ramp-coreload>
;;format = <label> <ramp-coreload>
format = <bar-load> <label>
format-prefix = " "

; Available tokens:
;   %percentage% (default) - total cpu load averaged over all cores
;   %percentage-sum% - Cumulative load on all cores
;   %percentage-cores% - load percentage for each core
;   %percentage-core[1-9]% - load percentage for specific core
label = "%percentage%%"

; Only applies if <bar-load> is used
bar-load-width = 10
bar-load-gradient = false

bar-load-indicator = ${bar.indicator}
bar-load-indicator-foreground = ${color.foreground}

bar-load-fill = ${bar.fill}
bar-load-foreground-0 = ${color.foreground}
bar-load-foreground-1 = ${color.foreground}
bar-load-foreground-2 = ${color.foreground}

bar-load-empty = ${bar.empty}
bar-load-empty-foreground = ${color.foreground}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/filesystem_bar]
type = internal/fs

; Mountpoints to display
mount-0 = /
;;mount-1 = /home
;;mount-2 = /var

; Seconds to sleep between updates
; Default: 30
interval = 30

; Display fixed precision values
; Default: false
fixed-values = false

; Spacing between entries
; Default: 2
;;spacing = 4

; Available tags:
;   <label-mounted> (default)
;   <bar-free>
;   <bar-used>
;   <ramp-capacity>
format-mounted = <bar-used> <label-mounted>
format-mounted-prefix = " "

; Available tags:
;   <label-unmounted> (default)
format-unmounted = <label-unmounted>
format-unmounted-prefix = " "

; Available tokens:
;   %mountpoint%
;   %type%
;   %fsname%
;   %percentage_free%
;   %percentage_used%
;   %total%
;   %free%
;   %used%
; Default: %mountpoint% %percentage_free%%
label-mounted = %used%/%total%

; Available tokens:
;   %mountpoint%
; Default: %mountpoint% is not mounted
label-unmounted = "%mountpoint%: not mounted"

; Only applies if <bar-used> is used
bar-used-width = 10
bar-used-gradient = false

bar-used-indicator = ${bar.indicator}
bar-used-indicator-foreground = ${color.foreground}

bar-used-fill = ${bar.fill}
bar-used-foreground-0 = ${color.foreground}
bar-used-foreground-1 = ${color.foreground}
bar-used-foreground-2 = ${color.foreground}

bar-used-empty = ${bar.empty}
bar-used-empty-foreground = ${color.foreground}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/memory_bar]
type = internal/memory

; Seconds to sleep between updates
; Default: 1
interval = 2

; Available tags:
;   <label> (default)
;   <bar-used>
;   <bar-free>
;   <ramp-used>
;   <ramp-free>
;   <bar-swap-used>
;   <bar-swap-free>
;   <ramp-swap-used>
;   <ramp-swap-free>
format = <bar-used> <label>
format-prefix = " "

; Available tokens:
;   %percentage_used% (default)
;   %percentage_free%
;   %gb_used%
;   %gb_free%
;   %gb_total%
;   %mb_used%
;   %mb_free%
;   %mb_total%
;   %percentage_swap_used%
;   %percentage_swap_free%
;   %mb_swap_total%
;   %mb_swap_free%
;   %mb_swap_used%
;   %gb_swap_total%
;   %gb_swap_free%
;   %gb_swap_used%

label = "%mb_used%"

; Only applies if <bar-used> is used
bar-used-width = 10
bar-used-gradient = false

bar-used-indicator = ${bar.indicator}
bar-used-indicator-foreground = ${color.foreground}

bar-used-fill = ${bar.fill}
bar-used-foreground-0 = ${color.foreground}
bar-used-foreground-1 = ${color.foreground}
bar-used-foreground-2 = ${color.foreground}

bar-used-empty = ${bar.empty}
bar-used-empty-foreground = ${color.foreground}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/mpd_bar]
type = internal/mpd

; Host where mpd is running (either ip or domain name)
; Can also be the full path to a unix socket where mpd is running.
;;host = 127.0.0.1
;;port = 6600
;;password = mysecretpassword

; Seconds to sleep between progressbar/song timer sync
; Default: 1
interval = 1

; Available tags:
;   <label-song> (default)
;   <label-time>
;   <bar-progress>
;   <toggle> - gets replaced with <icon-(pause|play)>
;   <toggle-stop> - gets replaced with <icon-(stop|play)>
;   <icon-random>
;   <icon-repeat>
;   <icon-repeatone> (deprecated)
;   <icon-single> - Toggle playing only a single song. Replaces <icon-repeatone>
;   <icon-consume>
;   <icon-prev>
;   <icon-stop>
;   <icon-play>
;   <icon-pause>
;   <icon-next>
;   <icon-seekb>
;   <icon-seekf>
format-online = <label-song> <bar-progress> <label-time>
format-online-prefix = 

;format-playing = ${self.format-online}
;format-paused = ${self.format-online}
;format-stopped = ${self.format-online}

; Available tags:
;   <label-offline>
format-offline = <label-offline>
format-offline-prefix = 

; Available tokens:
;   %artist%
;   %album-artist%
;   %album%
;   %date%
;   %title%
; Default: %artist% - %title%
label-song =  " %artist% - %title%"
label-song-maxlen = 25
label-song-ellipsis = true

; Available tokens:
;   %elapsed%
;   %total%
; Default: %elapsed% / %total%
label-time = %elapsed% / %total%

; Available tokens:
;   None
label-offline = " Offline"

; Only applies if <icon-X> is used
icon-play = 
icon-pause = 
icon-stop = 
icon-next = 
icon-prev = 
icon-seekf = 
icon-seekb = 
icon-random = 
icon-repeat = 
icon-repeatone = 
icon-single = 
icon-consume =

; Used to display the state of random/repeat/repeatone/single
; Only applies if <icon-[random|repeat|repeatone|single]> is used
toggle-on-foreground = ${color.primary}
toggle-off-foreground = ${color.secondary}

; Only applies if <bar-progress> is used
bar-progress-width = 10
bar-progress-gradient = false

bar-progress-indicator = ${bar.indicator}
bar-progress-indicator-foreground = ${color.foreground}

bar-progress-fill = ${bar.fill}
bar-progress-foreground-0 = ${color.foreground}
bar-progress-foreground-1 = ${color.foreground}
bar-progress-foreground-2 = ${color.foreground}

bar-progress-empty = ${bar.empty}
bar-progress-empty-foreground = ${color.foreground}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

================
File: modules/nixos/config/polybar/colors.ini
================
[color]

background = #1F1F1F
foreground = #FFFFFF
foreground-alt = #8F8F8F
module-fg = #FFFFFF
primary = #546e7a
secondary = #E53935
alternate = #7cb342

================
File: modules/nixos/config/polybar/config.ini
================
[global/wm]
; Adjust the _NET_WM_STRUT_PARTIAL top value
; Used for top aligned bars
margin-bottom = 0

; Adjust the _NET_WM_STRUT_PARTIAL bottom value
; Used for bottom aligned bars
margin-top = 0

;; Bar Settings

[bar/main]
; Use either of the following command to list available outputs:
; If unspecified, the application will pick the first one it finds.
; $ polybar -m | cut -d ':' -f 1
; $ xrandr -q | grep " connected" | cut -d ' ' -f1
monitor =

; Use the specified monitor as a fallback if the main one is not found.
monitor-fallback =

; Require the monitor to be in connected state
; XRandR sometimes reports my monitor as being disconnected (when in use)
monitor-strict = false

; Tell the Window Manager not to configure the window.
; Use this to detach the bar if your WM is locking its size/position.
override-redirect = false

; Put the bar at the bottom of the screen
bottom = false

; Prefer fixed center position for the `modules-center` block
; When false, the center position will be based on the size of the other blocks.
fixed-center = true

; Dimension defined as pixel value (e.g. 35) or percentage (e.g. 50%),
; the percentage can optionally be extended with a pixel offset like so:
; 50%:-10, this will result in a width or height of 50% minus 10 pixels
width = 98%
height = 40

; Offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
; the percentage can optionally be extended with a pixel offset like so:
; 50%:-10, this will result in an offset in the x or y direction 
; of 50% minus 10 pixels
offset-x = 1%
offset-y = 2%:-12

; Background ARGB color (e.g. #f00, #ff992a, #ddff1023)
background = ${color.background}

; Foreground ARGB color (e.g. #f00, #ff992a, #ddff1023)
foreground = ${color.foreground}

; Value used for drawing rounded corners
; Individual top/bottom values can be defined using:
;   radius-{top,bottom}
radius-top = 2.0
radius-bottom = 2.0

; Under-/overline pixel size and argb color
; Individual values can be defined using:
;   {overline,underline}-size
;   {overline,underline}-color
line-size = 2
line-color = ${color.primary}

; Values applied to all borders
; Individual side values can be defined using:
;   border-{left,top,right,bottom}-size
;   border-{left,top,right,bottom}-color
border-bottom-size = 0
border-bottom-color = ${color.primary}

; Number of spaces to add at the beginning/end of the bar
; Individual side values can be defined using:
;   padding-{left,right}
padding = 0

; Number of spaces to add before/after each module
; Individual side values can be defined using:
;   module-margin-{left,right}
module-margin-left = 2
module-margin-right = 2

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

; Fonts
font-0 = "@font0@"
font-1 = "@font1@"

; Modules
modules-left = launcher workspaces
modules-center = date popup-calendar
modules-right = pulseaudio memory cpu updates sysmenu

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

; The separator will be inserted between the output of each module
separator =

; Opacity value between 0.0 and 1.0 used on fade in/out
dim-value = 1.0

; Value to be used to set the WM_NAME atom
; If the value is empty or undefined, the atom value
; will be created from the following template: polybar-[BAR]_[MONITOR]
wm-name = bspwm

; Locale used to localize various module data (e.g. date)
; Expects a valid libc locale, for example: sv_SE.UTF-8
locale = 

; Position of the system tray window
; If empty or undefined, tray support will be disabled
; NOTE: A center aligned tray will cover center aligned modules
;
; Available positions:
;   left
;   center
;   right
;   none
tray-position = none

; If true, the bar will not shift its
; contents when the tray changes
tray-detached = false

; Tray icon max size
tray-maxsize = 16

; Background color for the tray container 
; ARGB color (e.g. #f00, #ff992a, #ddff1023)
; By default the tray container will use the bar
; background color.
tray-background = ${color.background}

; Tray offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
tray-offset-x = 0
tray-offset-y = 0

; Pad the sides of each tray icon
tray-padding = 0

; Scale factor for tray clients
tray-scale = 1.0

; Restack the bar window and put it above the
; selected window manager's root
;
; Fixes the issue where the bar is being drawn
; on top of fullscreen window's
;
; Available options:
;   bspwm
;   i3 (requires: `override-redirect = true`)
wm-restack = bspwm

; Set a DPI values used when rendering text
; This only affects scalable fonts
; dpi = 

; Enable support for inter-process messaging
; See the Messaging wiki page for more details.
enable-ipc = true

; Fallback click handlers that will be called if
; there's no matching module handler found.
click-left = 
click-middle = bspc desktop -l next
click-right =
double-click-left =
double-click-middle =
double-click-right =

; Requires polybar to be built with xcursor support (xcb-util-cursor)
; Possible values are:
; - default   : The default pointer as before, can also be an empty string (default)
; - pointer   : Typically in the form of a hand
; - ns-resize : Up and down arrows, can be used to indicate scrolling
cursor-click = 
cursor-scroll = 

; bspwm
scroll-up = bspc desktop -f prev.local
scroll-down = bspc desktop -f next.local

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

;; Application Settings

[settings]
; The throttle settings lets the eventloop swallow up til X events
; if they happen within Y millisecond after first event was received.
throttle-output = 5
throttle-output-for = 10

; Time in milliseconds that the input handler will wait between processing events
;throttle-input-for = 30

; Reload upon receiving XCB_RANDR_SCREEN_CHANGE_NOTIFY events
screenchange-reload = false

; Compositing operators
; @see: https://www.cairographics.org/manual/cairo-cairo-t.html#cairo-operator-t
compositing-background = source
compositing-foreground = over
compositing-overline = over
compositing-underline = over
compositing-border = over

; Enables pseudo-transparency for the bar
; If set to true the bar can be transparent without a compositor.
pseudo-transparency = false

================
File: modules/nixos/config/polybar/modules.ini
================
;; ┌────────────────────────────────────────────────────────────────┐
;; │░█▀█░█▀█░█░░░█░█░█▀▄░█▀█░█▀▄░░░░░░░░░█▄█░█▀█░█▀▄░█░█░█░░░█▀▀░█▀▀│
;; │░█▀▀░█░█░█░░░░█░░█▀▄░█▀█░█▀▄░░░░▀░░░░█░█░█░█░█░█░█░█░█░░░█▀▀░▀▀█│
;; │░▀░░░▀▀▀░▀▀▀░░▀░░▀▀░░▀░▀░▀░▀░░░░▀░░░░▀░▀░▀▀▀░▀▀░░▀▀▀░▀▀▀░▀▀▀░▀▀▀│
;; │░Created░By░Aditya░Shakya░@adi1090x░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
;; └────────────────────────────────────────────────────────────────┘

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/alsa]
type = internal/alsa

; Soundcard to be used
; Usually in the format hw:# where # is the card number
; You can find the different card numbers in `/proc/asound/cards`
master-soundcard = default
speaker-soundcard = default
headphone-soundcard = default

; Name of the master, speaker and headphone mixers
; Use the following command to list available mixer controls:
; $ amixer scontrols | sed -nr "s/.*'([[:alnum:]]+)'.*/\1/p"
; If master, speaker or headphone-soundcard isn't the default, 
; use `amixer -c # scontrols` instead where # is the number 
; of the master, speaker or headphone soundcard respectively
;
; Default: Master
master-mixer = Master

; Optionally define speaker and headphone mixers
; Default: none
;;speaker-mixer = Speaker
; Default: none
;;headphone-mixer = Headphone

; NOTE: This is required if headphone_mixer is defined
; Use the following command to list available device controls
; $ amixer controls | sed -r "/CARD/\!d; s/.*=([0-9]+).*name='([^']+)'.*/printf '%3.0f: %s\n' '\1' '\2'/e" | sort
; You may also need to use `amixer -c # controls` as above for the mixer names
; Default: none
;;headphone-id = 9

; Use volume mapping (similar to amixer -M and alsamixer), where the increase in volume is linear to the ear
; Default: false
;;mapped = true

; Interval for volume increase/decrease (in percent points)
; Default: 5
interval = 5

; Available tags:
;   <label-volume> (default)
;   <ramp-volume>
;   <bar-volume>
format-volume = <ramp-volume> <label-volume>

; Available tags:
;   <label-muted> (default)
;   <ramp-volume>
;   <bar-volume>
format-muted = <label-muted>
format-muted-prefix = 

; Available tokens:
;   %percentage% (default)
label-volume = %percentage%%

; Available tokens:
;   %percentage% (default
label-muted = " Muted"
label-muted-foreground = ${color.foreground-alt}

; Only applies if <ramp-volume> is used
ramp-volume-0 = 
ramp-volume-1 = 
ramp-volume-2 = 

; If defined, it will replace <ramp-volume> when
; headphones are plugged in to `headphone_control_numid`
; If undefined, <ramp-volume> will be used for both
; Only applies if <ramp-volume> is used
ramp-headphones-0 = 
;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/cpu]
type = internal/cpu

; Seconds to sleep between updates
; Default: 1
interval = 1

; Available tags:
;   <label> (default)
;   <bar-load>
;   <ramp-load>
;   <ramp-coreload>
;;format = <label> <ramp-coreload>
format = <label>
format-prefix = 

; Available tokens:
;   %percentage% (default) - total cpu load averaged over all cores
;   %percentage-sum% - Cumulative load on all cores
;   %percentage-cores% - load percentage for each core
;   %percentage-core[1-9]% - load percentage for specific core
label = " %percentage%%"

; Spacing between individual per-core ramps
;;ramp-coreload-spacing = 1
;;ramp-coreload-0 = ${cpu.load0}
;;ramp-coreload-1 = ${cpu.load1}

;;ramp-load-0 = ${cpu.load0}
;;ramp-load-1 = ${cpu.load1}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/date]
type = internal/date

; Seconds to sleep between updates
interval = 1.0

; See "http://en.cppreference.com/w/cpp/io/manip/put_time" for details on how to format the date string
; NOTE: if you want to use syntax tags here you need to use %%{...}
;;date = %Y-%m-%d%

; Optional time format
time = " %I:%M %p"

; if `date-alt` or `time-alt` is defined, clicking
; the module will toggle between formats
;;date-alt = %A, %d %B %Y
#time-alt = " %a, %d %b %Y"

; Available tags:
;   <label> (default)
format = <label>

; Available tokens:
;   %date%
;   %time%
; Default: %date%
label = %time%

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/filesystem]
type = internal/fs

; Mountpoints to display
mount-0 = /
;;mount-1 = /home
;;mount-2 = /var

; Seconds to sleep between updates
; Default: 30
interval = 30

; Display fixed precision values
; Default: false
fixed-values = true

; Spacing between entries
; Default: 2
;;spacing = 4

; Available tags:
;   <label-mounted> (default)
;   <bar-free>
;   <bar-used>
;   <ramp-capacity>
format-mounted = <label-mounted>
format-mounted-prefix = 

; Available tags:
;   <label-unmounted> (default)
format-unmounted = <label-unmounted>
format-unmounted-prefix = 

; Available tokens:
;   %mountpoint%
;   %type%
;   %fsname%
;   %percentage_free%
;   %percentage_used%
;   %total%
;   %free%
;   %used%
; Default: %mountpoint% %percentage_free%%
label-mounted = " %free%"

; Available tokens:
;   %mountpoint%
; Default: %mountpoint% is not mounted
label-unmounted = " %mountpoint%: not mounted"

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/memory]
type = internal/memory

; Seconds to sleep between updates
; Default: 1
interval = 1

; Available tags:
;   <label> (default)
;   <bar-used>
;   <bar-free>
;   <ramp-used>
;   <ramp-free>
;   <bar-swap-used>
;   <bar-swap-free>
;   <ramp-swap-used>
;   <ramp-swap-free>
format = <label>
format-prefix = 

; Available tokens:
;   %percentage_used% (default)
;   %percentage_free%
;   %gb_used%
;   %gb_free%
;   %gb_total%
;   %mb_used%
;   %mb_free%
;   %mb_total%
;   %percentage_swap_used%
;   %percentage_swap_free%
;   %mb_swap_total%
;   %mb_swap_free%
;   %mb_swap_used%
;   %gb_swap_total%
;   %gb_swap_free%
;   %gb_swap_used%

label = " %mb_used%"

; Only applies if <ramp-used> is used
;;ramp-used-0 = ${memory.used0}
;;ramp-used-1 = ${memory.used1}
;;ramp-used-2 = ${memory.used2}

; Only applies if <ramp-free> is used
;;ramp-free-0 = ${memory.free0}
;;ramp-free-1 = ${memory.free1}
;;ramp-free-2 = ${memory.free2}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/mpd]
type = internal/mpd

; Host where mpd is running (either ip or domain name)
; Can also be the full path to a unix socket where mpd is running.
;;host = 127.0.0.1
;;port = 6600
;;password = mysecretpassword

; Seconds to sleep between progressbar/song timer sync
; Default: 1
interval = 1

; Available tags:
;   <label-song> (default)
;   <label-time>
;   <bar-progress>
;   <toggle> - gets replaced with <icon-(pause|play)>
;   <toggle-stop> - gets replaced with <icon-(stop|play)>
;   <icon-random>
;   <icon-repeat>
;   <icon-repeatone> (deprecated)
;   <icon-single> - Toggle playing only a single song. Replaces <icon-repeatone>
;   <icon-consume>
;   <icon-prev>
;   <icon-stop>
;   <icon-play>
;   <icon-pause>
;   <icon-next>
;   <icon-seekb>
;   <icon-seekf>
format-online = <label-song> <icon-prev> <toggle> <icon-next>
format-online-prefix = 

;format-playing = ${self.format-online}
;format-paused = ${self.format-online}
;format-stopped = ${self.format-online}

; Available tags:
;   <label-offline>
format-offline = <label-offline>
format-offline-prefix = 

; Available tokens:
;   %artist%
;   %album-artist%
;   %album%
;   %date%
;   %title%
; Default: %artist% - %title%
label-song =  " %artist% - %title%"
label-song-maxlen = 25
label-song-ellipsis = true

; Available tokens:
;   %elapsed%
;   %total%
; Default: %elapsed% / %total%
label-time = %elapsed% / %total%

; Available tokens:
;   None
label-offline = " Offline"

; Only applies if <icon-X> is used
icon-play = 
icon-pause = 
icon-stop = 
icon-next = 
icon-prev = 
icon-seekf = 
icon-seekb = 
icon-random = 
icon-repeat = 
icon-repeatone = 
icon-single = 
icon-consume =

; Used to display the state of random/repeat/repeatone/single
; Only applies if <icon-[random|repeat|repeatone|single]> is used
toggle-on-foreground = ${color.primary}
toggle-off-foreground = ${color.secondary}

; Only applies if <bar-progress> is used
;;bar-progress-width = 45
;;bar-progress-indicator = |
;;bar-progress-fill = ─
;;bar-progress-empty = ─

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

; If you use both a wired and a wireless network, just add 2 module definitions. For example
[module/wired-network]
type = internal/network
interface = eth0

; Seconds to sleep between updates
; Default: 1
interval = 1.0

; Test connectivity every Nth update
; A value of 0 disables the feature
; NOTE: Experimental (needs more testing)
; Default: 0
;ping-interval = 3

; @deprecated: Define min width using token specifiers (%downspeed:min% and %upspeed:min%)
; Minimum output width of upload/download rate
; Default: 3
;;udspeed-minwidth = 5

; Accumulate values from all interfaces
; when querying for up/downspeed rate
; Default: false
accumulate-stats = true

; Consider an `UNKNOWN` interface state as up.
; Some devices have an unknown state, even when they're running
; Default: false
unknown-as-up = true

; Available tags:
;   <label-connected> (default)
;   <ramp-signal>
format-connected = <label-connected>
format-connected-prefix = 

; Available tags:
;   <label-disconnected> (default)
format-disconnected = <label-disconnected>
format-disconnected-prefix = 

; Available tags:
;   <label-connected> (default)
;   <label-packetloss>
;   <animation-packetloss>
;;format-packetloss = <animation-packetloss> <label-connected>

; Available tokens:
;   %ifname%    [wireless+wired]
;   %local_ip%  [wireless+wired]
;   %local_ip6% [wireless+wired]
;   %essid%     [wireless]
;   %signal%    [wireless]
;   %upspeed%   [wireless+wired]
;   %downspeed% [wireless+wired]
;   %linkspeed% [wired]
; Default: %ifname% %local_ip%
label-connected = "%{A1:networkmanager_dmenu &:} %essid%%{A}"

; Available tokens:
;   %ifname%    [wireless+wired]
; Default: (none)
label-disconnected = "%{A1:networkmanager_dmenu &:} Offline%{A}"
;;label-disconnected-foreground = #66ffffff

; Available tokens:
;   %ifname%    [wireless+wired]
;   %local_ip%  [wireless+wired]
;   %local_ip6% [wireless+wired]
;   %essid%     [wireless]
;   %signal%    [wireless]
;   %upspeed%   [wireless+wired]
;   %downspeed% [wireless+wired]
;   %linkspeed% [wired]
; Default: (none)
;label-packetloss = %essid%
;label-packetloss-foreground = #eefafafa

; Only applies if <ramp-signal> is used
ramp-signal-0 = 
ramp-signal-1 = 
ramp-signal-2 = 

; Only applies if <animation-packetloss> is used
;;animation-packetloss-0 = ⚠
;;animation-packetloss-0-foreground = #ffa64c
;;animation-packetloss-1 = ⚠
;;animation-packetloss-1-foreground = #000000
; Framerate in milliseconds
;;animation-packetloss-framerate = 500

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/pulseaudio]
type = internal/pulseaudio

; Sink to be used, if it exists (find using `pacmd list-sinks`, name field)
; If not, uses default sink
; sink = @pulseaudiosink@

; Use PA_VOLUME_UI_MAX (~153%) if true, or PA_VOLUME_NORM (100%) if false
; Default: true
use-ui-max = false

; Interval for volume increase/decrease (in percent points)
; Default: 5
interval = 5

; Available tags:
;   <label-volume> (default)
;   <ramp-volume>
;   <bar-volume>
format-volume = <ramp-volume> <label-volume>

; Available tags:
;   <label-muted> (default)
;   <ramp-volume>
;   <bar-volume>
format-muted = <label-muted>
format-muted-prefix = 

; Available tokens:
;   %percentage% (default)
label-volume = %percentage%%

; Available tokens:
;   %percentage% (default
label-muted = " Muted"
label-muted-foreground = ${color.foreground-alt}

; Only applies if <ramp-volume> is used
ramp-volume-0 = 
ramp-volume-1 = 
ramp-volume-2 = 

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/temperature]
type = internal/temperature

; Seconds to sleep between updates
; Default: 1
interval = 0.5

; Thermal zone to use
; To list all the zone types, run 
; $ for i in /sys/class/thermal/thermal_zone*; do echo "$i: $(<$i/type)"; done
; Default: 0
thermal-zone = 0

; Full path of temperature sysfs path
; Use `sensors` to find preferred temperature source, then run
; $ for i in /sys/class/hwmon/hwmon*/temp*_input; do echo "$(<$(dirname $i)/name): $(cat ${i%_*}_label 2>/dev/null || echo $(basename ${i%_*})) $(readlink -f $i)"; done
; to find path to desired file
; Default reverts to thermal zone setting
;;hwmon-path = /sys/devices/platform/coretemp.0/hwmon/hwmon2/temp1_input
hwmon-path = /sys/devices/pci0000:00/0000:00:01.3/0000:01:00.0/hwmon/hwmon0/temp1_input

; Threshold temperature to display warning label (in degrees celsius)
; Default: 80
warn-temperature = 65

; Whether or not to show units next to the temperature tokens (°C, °F)
; Default: true
units = true

; Available tags:
;   <label> (default)
;   <ramp>
format = <ramp> <label>

; Available tags:
;   <label-warn> (default)
;   <ramp>
format-warn = <ramp> <label-warn>

; Available tokens:
;   %temperature% (deprecated)
;   %temperature-c%   (default, temperature in °C)
;   %temperature-f%   (temperature in °F)
label = %temperature-c%

; Available tokens:
;   %temperature% (deprecated)
;   %temperature-c%   (default, temperature in °C)
;   %temperature-f%   (temperature in °F)
label-warn = "%temperature-c%"
label-warn-foreground = ${color.secondary}

; Requires the <ramp> tag
; The icon selection will range from 0 to `warn-temperature`
; with the current temperature as index.
ramp-0 = 
ramp-1 = 
ramp-2 = 
ramp-3 = 
ramp-4 = 

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/keyboard]
type = internal/xkeyboard

; List of indicators to ignore
blacklist-0 = num lock
blacklist-1 = scroll lock

; Available tags:
;   <label-layout> (default)
;   <label-indicator> (default)
format = <label-layout> <label-indicator>
format-prefix = 

; Available tokens:
;   %layout%
;   %name%
;   %number%
; Default: %layout%
label-layout = " %layout%"

; Available tokens:
;   %name%
; Default: %name%
label-indicator-on = %name%
label-indicator-on-foreground = ${color.primary}

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/title]
type = internal/xwindow

; Available tags:
;   <label> (default)
format = <label>
format-prefix = 

; Available tokens:
;   %title%
; Default: %title%
label = " %title%"
label-maxlen = 30

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/workspaces]
type = internal/xworkspaces

; Only show workspaces defined on the same output as the bar
;
; Useful if you want to show monitor specific workspaces
; on different bars
;
; Default: false
pin-workspaces = true

; Create click handler used to focus desktop
; Default: true
enable-click = true

; Create scroll handlers used to cycle desktops
; Default: true
enable-scroll = true

; icon-[0-9]+ = <desktop-name>;<icon>
; NOTE: The desktop name needs to match the name configured by the WM
; You can get a list of the defined desktops using:
; $ xprop -root _NET_DESKTOP_NAMES

; Emacs, Calendar, News (General)
icon-0 = 1;
; Terminal, Emacs (IDE)
icon-1 = 2;
; Slack, Dev Tools Browser
icon-2 = 3;
; Chat, News (Financial)
icon-3 = 4;
; Apple Music, Media
icon-4 = 5;
; Monitoring, Emacs (Journal)
icon-5 = 6;
icon-default = 

; Available tags:
;   <label-monitor>
;   <label-state> - gets replaced with <label-(active|urgent|occupied|empty)>
; Default: <label-state>
format = <label-state>
format-padding = 0

; Available tokens:
;   %name%
; Default: %name%
label-monitor = %name%

; Available tokens:
;   %name%
;   %icon%
;   %index%
; Default: %icon%  %name%
label-active = %icon%
label-active-foreground = ${color.primary}
label-active-overline = ${color.primary}

; Available tokens:
;   %name%
;   %icon%
;   %index%
; Default: %icon%  %name%
label-occupied = %icon%
label-occupied-foreground = ${color.alternate}

; Available tokens:
;   %name%
;   %icon%
;   %index%
; Default: %icon%  %name%
label-urgent = %icon%
label-urgent-foreground = ${color.secondary}

; Available tokens:
;   %name%
;   %icon%
;   %index%
; Default: %icon%  %name%
label-empty = %icon%

label-active-padding = 2
label-urgent-padding = 2
label-occupied-padding = 2
label-empty-padding = 2

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

================
File: modules/nixos/config/polybar/user_modules.ini
================
;; ┌──────────────────────────────────────────────────────────────────────────────-----┐
;; │░█▀█░█▀█░█░░░█░█░█▀▄░█▀█░█▀▄░░░░░░░░░█░█░█▀▀░█▀▀░█▀▄░░░█▄█░█▀█░█▀▄░█░█░█░░░█▀▀░█▀▀ │
;; │░█▀▀░█░█░█░░░░█░░█▀▄░█▀█░█▀▄░░░░▀░░░░█░█░▀▀█░█▀▀░█▀▄░░░█░█░█░█░█░█░█░█░█░░░█▀▀░▀▀█ │
;; │░▀░░░▀▀▀░▀▀▀░░▀░░▀▀░░▀░▀░▀░▀░░░░▀░░░░▀▀▀░▀▀▀░▀▀▀░▀░▀░░░▀░▀░▀▀▀░▀▀░░▀▀▀░▀▀▀░▀▀▀░▀▀▀ │
;; │░Created░By░Aditya░Shakya░@adi1090x░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│
;; └──────────────────────────────────────────────────────────────────────────────-----┘

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/updates]
type = custom/script

; Available tokens:
;   %counter%
; Command to be executed (using "/usr/bin/env sh -c [command]")
exec = @packages@

; Conditional command that, if defined, needs to exit successfully
; before the main exec command is invoked.
; Default: ""
;;exec-if = ""

; Will the script output continous content?
; Default: false
tail = true

; Seconds to sleep between updates
; Default: 2 (0 if `tail = true`)
interval = 0

; Available tags:
;   <output> - deprecated
;   <label> (default)
format = <label>
format-prefix = 

; Available tokens:
;   %output%
; Default: %output%
label = %output%

; Available tokens:
;   %counter%
;   %pid%
;
click-left = @searchpkgs@

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/launcher]
type = custom/text
content =  
content-background = ${color.primary}
content-foreground = ${color.module-fg}
content-padding = 2
click-left = @launcher@

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[module/popup-calendar]
type = custom/script
exec = @calendar@
interval = 5
click-left = @calendar@ --popup &

[module/sysmenu]
type = custom/text
content = 
content-background = ${color.primary}
content-foreground = ${color.module-fg}
content-padding = 2
click-left = @powermenu@ &

;; _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

================
File: modules/nixos/config/rofi/colors.rasi
================
/* colors */

* {
  al:   #00000000;
  bg:   #1F1F1FFF;
  bga:  #546e7a33;
  bar:  #FFFFFFFF;
  fg:   #FFFFFFFF;
  ac:   #546e7aFF;
}

================
File: modules/nixos/config/rofi/confirm.rasi
================
/* Confirm Dialog */

@import "colors.rasi"

* {
    background-color:       @bg;
    text-color:             @fg;
	font:				 	"Iosevka Nerd Font 10";
}

window {
    width:      			225px;
    padding:    			25px;
    border:					0px 0px 2px 0px;
    border-radius:          0px;
    border-color:           @ac;
    location:               center;
    y-offset:               -2em;
}

entry {
    expand: 				true;
    text-color:				@ac;
}

================
File: modules/nixos/config/rofi/launcher.rasi
================
/*
 *
 * Author  : Aditya Shakya
 * Mail    : adi1090x@gmail.com
 * Github  : @adi1090x
 * Twitter : @adi1090x
 *
 */

configuration {
	font:                "Iosevka Nerd Font 10";
	show-icons:          true;
	icon-theme:          "Papirus";
	display-drun:        "";
	drun-display-format: "{name}";
	disable-history:     false;
	fullscreen:          false;
	hide-scrollbar:      true;
	sidebar-mode:        false;
}

@import "colors.rasi"

window {
	transparency:      "real";
	background-color:  @bg;
	text-color:        @fg;
	border:            0px 0px 2px 0px;
	border-color:      @ac;
	border-radius:     0px;
	width:             350px;
	location:          center;
	x-offset:          0;
	y-offset:          0;
}

prompt {
	enabled:          true;
	padding:          0px;
	background-color: @al;
	text-color:       @bar;
	font:             "feather 12";
}

entry {
	background-color:     @al;
	text-color:           @bar;
	placeholder-color:    @bar;
	expand:               true;
	horizontal-align:     0;
	placeholder:          "Search...";
	padding:              0px 0px 0px 10px;
	blink:                true;
}

inputbar {
	children:            [ prompt, entry ];
	background-color:     @ac;
	text-color:           @bar;
	expand:               false;
	border:               0px;
	border-radius:        0px;
	border-color:         @ac;
	margin:               0px;
	padding:              12px;
}

listview {
	background-color: @al;
	padding:          0px;
	columns:          1;
	lines:            5;
	spacing:          5px;
	cycle:            true;
	dynamic:          true;
	layout:           vertical;
}

mainbox {
	background-color: @al;
	border:           0px;
	border-radius:    0px;
	border-color:     @ac;
	children:         [ inputbar, listview ];
	spacing:          0px;
	padding:          0px;
}

element {
	background-color: @al;
	text-color:       @fg;
	orientation:      horizontal;
	border-radius:    0px;
	padding:          10px;
}

element-icon {
	background-color: transparent;
	text-color:       inherit;
	size:             24px;
	border:           0px;
}

element-text {
	background-color: transparent;
	text-color:       inherit;
	expand:           true;
	horizontal-align: 0;
	vertical-align:   0.5;
	margin:           0px 2.5px 0px 2.5px;
}

element selected {
	background-color: @bga;
	text-color:       @fg;
	border:           0px 0px 0px 0px;
	border-radius:    0px;
	border-color:     @ac;
}

================
File: modules/nixos/config/rofi/message.rasi
================
/* Confirm Dialog */

@import "colors.rasi"

* {
    background-color:       @bg;
    text-color:             @fg;
	font:				 	"Iosevka Nerd Font 10";
}

window {
    width:      			320px;
    padding:    			25px;
    border:					0px 0px 2px 0px;
    border-radius:          0px;
    border-color:           @ac;
    location:               center;
    y-offset:               -2em;
}

entry {
    expand: 				true;
    text-color:				@ac;
}

================
File: modules/nixos/config/rofi/networkmenu.rasi
================
/*
 *
 * Author  : Aditya Shakya
 * Mail    : adi1090x@gmail.com
 * Github  : @adi1090x
 * Twitter : @adi1090x
 *
 */

configuration {
	font:                "Iosevka Nerd Font 10";
	show-icons:          true;
	icon-theme:          "Papirus";
	display-drun:        "";
	drun-display-format: "{name}";
	disable-history:     false;
	fullscreen:          false;
	hide-scrollbar:      true;
	sidebar-mode:        false;
}

@import "colors.rasi"

window {
	transparency:      "real";
	background-color:  @bg;
	text-color:        @fg;
	border:            0px 0px 2px 0px;
	border-color:      @ac;
	border-radius:     0px;
	width:             400px;
	location:          center;
	x-offset:          0;
	y-offset:          0;
}

prompt {
	enabled:          true;
	padding:          0px 0px 0px 5px;
	background-color: @al;
	text-color:       @bar;
}

textbox-prompt-colon {
	background-color: @al;
	text-color:       @bar;
	expand:           false;
	str:              "";
	font:             "feather 12";
}

entry {
	background-color:     @al;
	text-color:           @bar;
	placeholder-color:    @bar;
	expand:               true;
	horizontal-align:     0;
	placeholder:          "Search...";
	padding:              0px 0px 0px 10px;
	blink:                true;
}

inputbar {
	children:            [ textbox-prompt-colon, prompt ];
	background-color:     @ac;
	text-color:           @bar;
	expand:               false;
	border:               0px;
	border-radius:        0px;
	border-color:         @ac;
	margin:               0px;
	padding:              12px;
}

listview {
	background-color: @al;
	padding:          0px;
	columns:          1;
	lines:            8;
	spacing:          5px;
	cycle:            true;
	dynamic:          true;
	layout:           vertical;
}

mainbox {
	background-color: @al;
	border:           0px;
	border-radius:    0px;
	border-color:     @ac;
	children:         [ inputbar, listview ];
	spacing:          0px;
	padding:          0px;
}

element {
	background-color: @al;
	text-color:       @fg;
	orientation:      horizontal;
	border-radius:    0px;
	padding:          10px 10px 10px -17px;
}

element-icon {
	background-color: transparent;
	text-color:       inherit;
	size:             24px;
	border:           0px;
}

element-text {
	background-color: transparent;
	text-color:       inherit;
	expand:           true;
	horizontal-align: 0;
	vertical-align:   0.5;
	margin:           0px 2.5px 0px 2.5px;
}

element selected {
	background-color: @bga;
	text-color:       @fg;
	border:           0px 0px 0px 0px;
	border-radius:    0px;
	border-color:     @ac;
}

================
File: modules/nixos/config/rofi/powermenu.rasi
================
/*
 *
 * Author  : Aditya Shakya
 * Mail    : adi1090x@gmail.com
 * Github  : @adi1090x
 * Twitter : @adi1090x
 *
 */

configuration {
	font:                "Iosevka Nerd Font 10";
	show-icons:          true;
	icon-theme:          "Papirus";
	display-drun:        "";
	drun-display-format: "{name}";
	disable-history:     false;
	fullscreen:          false;
	hide-scrollbar:      true;
	sidebar-mode:        false;
}

@import "colors.rasi"

window {
	transparency:      "real";
	background-color:  @bg;
	text-color:        @fg;
	border:            0px 0px 2px 0px;
	border-color:      @ac;
	border-radius:     0px;
	width:             350px;
	location:          center;
	x-offset:          0;
	y-offset:          0;
}

prompt {
	enabled:          true;
	padding:          0px 0px 0px 5px;
	background-color: @al;
	text-color:       @bar;
}

textbox-prompt-colon {
	background-color: @al;
	text-color:       @bar;
	expand:           false;
	str:              "";
	font:             "feather 12";
}

entry {
	background-color:     @al;
	text-color:           @bar;
	placeholder-color:    @bar;
	expand:               true;
	horizontal-align:     0;
	placeholder:          "Search...";
	padding:              0px 0px 0px 10px;
	blink:                true;
}

inputbar {
	children:            [ textbox-prompt-colon, prompt ];
	background-color:     @ac;
	text-color:           @bar;
	expand:               false;
	border:               0px;
	border-radius:        0px;
	border-color:         @ac;
	margin:               0px;
	padding:              12px;
}

listview {
	background-color: @al;
	padding:          0px;
	columns:          1;
	lines:            5;
	spacing:          5px;
	cycle:            true;
	dynamic:          true;
	layout:           vertical;
}

mainbox {
	background-color: @al;
	border:           0px;
	border-radius:    0px;
	border-color:     @ac;
	children:         [ inputbar, listview ];
	spacing:          0px;
	padding:          0px;
}

element {
	background-color: @al;
	text-color:       @fg;
	orientation:      horizontal;
	border-radius:    0px;
	padding:          10px 10px 10px -17px;
}

element-icon {
	background-color: transparent;
	text-color:       inherit;
	size:             24px;
	border:           0px;
}

element-text {
	background-color: transparent;
	text-color:       inherit;
	expand:           true;
	horizontal-align: 0;
	vertical-align:   0.5;
	margin:           0px 2.5px 0px 2.5px;
}

element selected {
	background-color: @bga;
	text-color:       @fg;
	border:           0px 0px 0px 0px;
	border-radius:    0px;
	border-color:     @ac;
}

================
File: modules/nixos/config/rofi/styles.rasi
================
/*
 *
 * Author  : Aditya Shakya
 * Mail    : adi1090x@gmail.com
 * Github  : @adi1090x
 * Twitter : @adi1090x
 *
 */

configuration {
	font:                "Iosevka Nerd Font 10";
	show-icons:          true;
	icon-theme:          "Papirus";
	display-drun:        "";
	drun-display-format: "{name}";
	disable-history:     false;
	fullscreen:          false;
	hide-scrollbar:      true;
	sidebar-mode:        false;
}

@import "colors.rasi"

window {
	transparency:      "real";
	background-color:  @bg;
	text-color:        @fg;
	border:            0px 0px 2px 0px;
	border-color:      @ac;
	border-radius:     0px;
	width:             350px;
	location:          center;
	x-offset:          0;
	y-offset:          0;
}

prompt {
	enabled:          true;
	padding:          0px 0px 0px 5px;
	background-color: @al;
	text-color:       @bar;
}

textbox-prompt-colon {
	background-color: @al;
	text-color:       @bar;
	expand:           false;
	str:              "";
	font:             "feather 12";
}

entry {
	background-color:     @al;
	text-color:           @bar;
	placeholder-color:    @bar;
	expand:               true;
	horizontal-align:     0;
	placeholder:          "Search...";
	padding:              0px 0px 0px 5px;
	blink:                true;
}

inputbar {
	children:            [ textbox-prompt-colon, entry ];
	background-color:     @ac;
	text-color:           @bar;
	expand:               false;
	border:               0px;
	border-radius:        0px;
	border-color:         @ac;
	margin:               0px;
	padding:              12px;
}

listview {
	background-color: @al;
	padding:          0px;
	columns:          1;
	lines:            5;
	spacing:          5px;
	cycle:            true;
	dynamic:          true;
	layout:           vertical;
}

mainbox {
	background-color: @al;
	border:           0px;
	border-radius:    0px;
	border-color:     @ac;
	children:         [ inputbar, listview ];
	spacing:          0px;
	padding:          0px;
}

element {
	background-color: @al;
	text-color:       @fg;
	orientation:      horizontal;
	border-radius:    0px;
	padding:          10px 10px 10px -17px;
}

element-icon {
	background-color: transparent;
	text-color:       inherit;
	size:             24px;
	border:           0px;
}

element-text {
	background-color: transparent;
	text-color:       inherit;
	expand:           true;
	horizontal-align: 0;
	vertical-align:   0.5;
	margin:           0px 2.5px 0px 2.5px;
}

element selected {
	background-color: @bga;
	text-color:       @fg;
	border:           0px 0px 0px 0px;
	border-radius:    0px;
	border-color:     @ac;
}

================
File: modules/nixos/disk-config.nix
================
_: {
  # This formats the disk with the ext4 filesystem
  # Other examples found here: https://github.com/nix-community/disko/tree/master/example
  disko.devices = {
    disk = {
      vdb = {
        device = "/dev/%DISK%";
        type = "disk";
        content = {
          type = "gpt";
          partitions = {
            ESP = {
              type = "EF00";
              size = "100M";
              content = {
                type = "filesystem";
                format = "vfat";
                mountpoint = "/boot";
              };
            };
            root = {
              size = "100%";
              content = {
                type = "filesystem";
                format = "ext4";
                mountpoint = "/";
              };
            };
          };
        };
      };
    };
  };
}

================
File: modules/nixos/files.nix
================
{ user, ... }:

let
  home           = builtins.getEnv "HOME";
  xdg_configHome = "${home}/.config";
  xdg_dataHome   = "${home}/.local/share";
  xdg_stateHome  = "${home}/.local/state"; in
{

  "${xdg_configHome}/bspwm/bspwmrc" = {
    executable = true;
    text = ''
      #! /bin/sh
      #
      # Set the number of workspaces
      bspc monitor -d 1 2 3 4 5 6

      # Launch keybindings daemon
      pgrep -x sxhkd > /dev/null || sxhkd &

      # Window configurations
      bspc config border_width         0
      bspc config window_gap          16
      bspc config split_ratio          0.52
      bspc config borderless_monocle   true
      bspc config gapless_monocle      true

      # Padding outside of the window
      bspc config top_padding            60
      bspc config bottom_padding         60
      bspc config left_padding           60
      bspc config right_padding          60

      # Move floating windows
      bspc config pointer_action1 move

      # Resize floating windows
      bspc config pointer_action2 resize_side
      bspc config pointer_action2 resize_corner

      # Set background and top bar
      systemctl --user start polybar

      sleep .25

      # Wait for the network to be up
      notify-send 'Waiting for network...'
      while ! systemctl is-active --quiet network-online.target; do sleep 1; done
      notify-send 'Network found.'

      # Wait for the Emacs daemon
      notify-send 'Starting Emacs...'
      /run/current-system/sw/bin/emacsclient -a "" -e '(progn)' &

      # Wait for Emacs daemon to be ready
      while ! /run/current-system/sw/bin/emacsclient -e '(progn)' &>/dev/null; do
      sleep 1
      done
      notify-send 'Emacs daemon started.'
    '';
  };

  "${xdg_configHome}/sxhkd/sxhkdrc" = {
    text = ''
    # Close window
    alt + F4
          bspc node --close

    # Make split ratios equal
    super + equal
          bspc node @/ --equalize

    # Make split ratios balanced
    super + minus
          bspc node @/ --balance

    # Toogle tiling of window
    super + d
          bspc query --nodes -n focused.tiled && state=floating || state=tiled; \
          bspc node --state \~$state

    # Toggle fullscreen of window
    super + f
          bspc node --state \~fullscreen

    # Swap the current node and the biggest window
    super + g
          bspc node -s biggest.window

    # Swap the current node and the smallest window
    super + shift + g
          bspc node -s biggest.window

    # Alternate between the tiled and monocle layout
    super + m
          bspc desktop -l next

    # Move between windows in monocle layout
    super + {_, alt + }m
          bspc node -f {next, prev}.local.!hidden.window

    # Focus the node in the given direction
    super + {_,shift + }{h,j,k,l}
          bspc node -{f,s} {west,south,north,east}

    # Focus left/right occupied desktop
    super + {Left,Right}
          bspc desktop --focus {prev,next}.occupied

    # Focus left/right occupied desktop
    super + {Up,Down}
          bspc desktop --focus {prev,next}.occupied

    # Focus left/right desktop
    ctrl + alt + {Left,Right}
          bspc desktop --focus {prev,next}

    # Focus left/right desktop
    ctrl + alt + {Up, Down}
          bspc desktop --focus {prev,next}

    # Focus the older or newer node in the focus history
    super + {o,i}
          bspc wm -h off; \
          bspc node {older,newer} -f; \
          bspc wm -h on

    # Focus or send to the given desktop
    super + {_,shift + }{1-9,0}
          bspc {desktop -f,node -d} '^{1-9,10}'

    # Preselect the direction
    super + alt + {h,j,k,l}
          bspc node -p {west,south,north,east}

    # Cancel the preselect
    # For context on syntax: https://github.com/baskerville/bspwm/issues/344
    super + alt + {_,shift + }Escape
          bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

    # Preselect the direction
    super + ctrl + {h,j,k,l}
          bspc node -p {west,south,north,east}

    # Cancel the preselect
    # For context on syntax: https://github.com/baskerville/bspwm/issues/344
    super + ctrl + {_,shift + }Escape
          bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

    # Set the node flags
    super + ctrl + {m,x,s,p}
          bspc node -g {marked,locked,sticky,private}

    # Send the newest marked node to the newest preselected node
    super + y
          bspc node newest.marked.local -n newest.!automatic.local

    # Program launcher
    super + @space
          rofi -config -no-lazy-grab -show drun -modi drun -theme /home/${user}/.config/rofi/launcher.rasi

    # Terminal emulator
    super + Return
          bspc rule -a Alacritty -o state=floating rectangle=1024x768x0x0 center=true && /etc/profiles/per-user/${user}/bin/alacritty

    # Terminal emulator
    super + ctrl + Return
          /etc/profiles/per-user/${user}/bin/alacritty

    # Jump to workspaces
    super + t
          bspc desktop --focus ^2
    super + b
          bspc desktop --focus ^1
    super + w
          bspc desktop --focus ^4
    super + Tab
          bspc {node,desktop} -f last

    # Keepass XC
    super + shift + x
          /etc/profiles/per-user/${user}/bin/keepassxc

    # Emacs
    # -c flag is --create-frame
    # -a flag is fallback to plain emacs if daemon fails
    super + alt + Return
         emacsclient -c -a emacs

    super + alt + e
         systemctl --user restart emacs.service && \
         emacsclient -c -a emacs

    # Web browser
    ctrl + alt + Return
         google-chrome-stable

    # File browser at home dir
    super + shift + @space
         pcmanfm

    # Take a screenshot with PrintSc
    Print
         flameshot gui -c -p $HOME/.local/share/img/screenshots

    # Lock the screen
    ctrl + alt + BackSpace
         i3lock

    # Audio controls for + volume
    XF86AudioRaiseVolume
        pactl set-sink-volume @DEFAULT_SINK@ +5%

    # Audio controls for - volume
    XF86AudioLowerVolume
        pactl set-sink-volume @DEFAULT_SINK@ -5%

    # Audio controls for mute
    XF86AudioMute
        pactl set-sink-mute @DEFAULT_SINK@ toggle
    '';
  };

  "${xdg_configHome}/polybar/bin/popup-calendar.sh" = {
    executable = true;
    text = ''
      #!/bin/sh

      DATE="$(/run/current-system/sw/bin/date +"%B %d, %Y")"
      SCREEN_WIDTH=$(/run/current-system/sw/bin/xrandr | /run/current-system/sw/bin/grep '*' | /run/current-system/sw/bin/awk '{print $1}' | /run/current-system/sw/bin/cut -d 'x' -f1)
      POSX=$(( (SCREEN_WIDTH / 2) - ((SCREEN_WIDTH / 2 * 625) / 10000) ))

      case "$1" in
      --popup)
          /etc/profiles/per-user/${user}/bin/yad --calendar --fixed \
            --posx=$POSX --posy=80 --no-buttons --borders=0 --title="yad-calendar" \
            --close-on-unfocus
        ;;
      *)
          echo "$DATE"
        ;;
      esac
    '';
  };

  "${xdg_configHome}/polybar/bin/check-nixos-updates.sh" = {
    executable = true;
    text = ''
      #!/bin/sh

      /run/current-system/sw/bin/git -C ~/.local/share/src/nixpkgs fetch upstream master
      UPDATES=$(/run/current-system/sw/bin/git -C ~/.local/share/src/nixpkgs rev-list origin/master..upstream/master --count 2>/dev/null);
      /run/current-system/sw/bin/echo " $UPDATES"; # Extra space for presentation with icon
      /run/current-system/sw/bin/sleep 1800;
    '';
  };

  "${xdg_configHome}/polybar/bin/search-nixos-updates.sh" = {
    executable = true;
    text = ''
      #!/bin/sh

      /etc/profiles/per-user/${user}/bin/google-chrome-stable --new-window "https://search.nixos.org/packages"
    '';
  };

  "${xdg_configHome}/rofi/colors.rasi".text = builtins.readFile ./config/rofi/colors.rasi;
  "${xdg_configHome}/rofi/confirm.rasi".text = builtins.readFile ./config/rofi/confirm.rasi;
  "${xdg_configHome}/rofi/launcher.rasi".text = builtins.readFile ./config/rofi/launcher.rasi;
  "${xdg_configHome}/rofi/message.rasi".text = builtins.readFile ./config/rofi/message.rasi;
  "${xdg_configHome}/rofi/networkmenu.rasi".text = builtins.readFile ./config/rofi/networkmenu.rasi;
  "${xdg_configHome}/rofi/powermenu.rasi".text = builtins.readFile ./config/rofi/powermenu.rasi;
  "${xdg_configHome}/rofi/styles.rasi".text = builtins.readFile ./config/rofi/styles.rasi;

  "${xdg_configHome}/rofi/bin/launcher.sh" = {
    executable = true;
    text = ''
      #!/bin/sh

      rofi -no-config -no-lazy-grab -show drun -modi drun -theme ${xdg_configHome}/rofi/launcher.rasi
    '';
  };

  # @todo: Don't use hardcoded src paths
  "${xdg_configHome}/rofi/bin/powermenu.sh" = {
    executable = true;
    text = ''
      #!/bin/sh

      configDir="${xdg_configHome}/rofi"
      uptime=$(uptime -p | sed -e 's/up //g')
      rofi_command="rofi -no-config -theme $configDir/powermenu.rasi"

      # Options
      shutdown=" Shutdown"
      reboot=" Restart"
      lock=" Lock"
      suspend=" Sleep"
      logout=" Logout"

      # Confirmation
      confirm_exit() {
	      rofi -dmenu\
              -no-config\
		      -i\
		      -no-fixed-num-lines\
		      -p "Are You Sure? : "\
		      -theme $configDir/confirm.rasi
      }

      # Message
      msg() {
	      rofi -no-config -theme "$configDir/message.rasi" -e "Available Options  -  yes / y / no / n"
      }

      # Variable passed to rofi
      options="$lock\n$suspend\n$logout\n$reboot\n$shutdown"
      chosen="$(echo -e "$options" | $rofi_command -p "Uptime: $uptime" -dmenu -selected-row 0)"
      case $chosen in
          $shutdown)
		      ans=$(confirm_exit &)
		      if [[ $ans == "yes" || $ans == "YES" || $ans == "y" || $ans == "Y" ]]; then
			      systemctl poweroff
		      elif [[ $ans == "no" || $ans == "NO" || $ans == "n" || $ans == "N" ]]; then
			      exit 0
              else
			      msg
              fi
              ;;
          $reboot)
		      ans=$(confirm_exit &)
		      if [[ $ans == "yes" || $ans == "YES" || $ans == "y" || $ans == "Y" ]]; then
			      systemctl reboot
		      elif [[ $ans == "no" || $ans == "NO" || $ans == "n" || $ans == "N" ]]; then
			      exit 0
              else
			      msg
              fi
              ;;
          $lock)
          betterlockscreen -l
              ;;
          $suspend)
		      ans=$(confirm_exit &)
		      if [[ $ans == "yes" || $ans == "YES" || $ans == "y" || $ans == "Y" ]]; then
			      mpc -q pause
			      amixer set Master mute
			      systemctl suspend
		      elif [[ $ans == "no" || $ans == "NO" || $ans == "n" || $ans == "N" ]]; then
			      exit 0
              else
			      msg
              fi
              ;;
          $logout)
		      ans=$(confirm_exit &)
		      if [[ $ans == "yes" || $ans == "YES" || $ans == "y" || $ans == "Y" ]]; then
			      bspc quit
		      elif [[ $ans == "no" || $ans == "NO" || $ans == "n" || $ans == "N" ]]; then
			      exit 0
              else
			      msg
              fi
              ;;
      esac
   '';
  };
}

================
File: modules/nixos/home-manager.nix
================
{ config, pkgs, lib, ... }:

let
  user = "lessuseless";
  xdg_configHome  = "/home/${user}/.config";
  shared-programs = import ../shared/home-manager.nix { inherit config pkgs lib; };
  shared-files = import ../shared/files.nix { inherit config pkgs; };
  
  zsh = {
    initExtraFirst = ''
    export SSH_AUTH_SOCK=/Users/lessuseless/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh
    '';
  };
  
  polybar-user_modules = builtins.readFile (pkgs.substituteAll {
    src = ./config/polybar/user_modules.ini;
    packages = "${xdg_configHome}/polybar/bin/check-nixos-updates.sh";
    searchpkgs = "${xdg_configHome}/polybar/bin/search-nixos-updates.sh";
    launcher = "${xdg_configHome}/polybar/bin/launcher.sh";
    powermenu = "${xdg_configHome}/rofi/bin/powermenu.sh";
    calendar = "${xdg_configHome}/polybar/bin/popup-calendar.sh";
  });

  polybar-config = pkgs.substituteAll {
    src = ./config/polybar/config.ini;
    font0 = "DejaVu Sans:size=12;3";
    font1 = "feather:size=12;3"; # from overlay
  };

  polybar-modules = builtins.readFile ./config/polybar/modules.ini;
  polybar-bars = builtins.readFile ./config/polybar/bars.ini;
  polybar-colors = builtins.readFile ./config/polybar/colors.ini;

in
{
  home = {
    enableNixpkgsReleaseCheck = false;
    username = "${user}";
    homeDirectory = "/home/${user}";
    packages = pkgs.callPackage ./packages.nix {};
    file = shared-files // import ./files.nix { inherit user; };
    stateVersion = "21.05";
  };

  # Use a dark theme
  gtk = {
    enable = true;
    iconTheme = {
      name = "Adwaita-dark";
      package = pkgs.gnome.adwaita-icon-theme;
    };
    theme = {
      name = "Adwaita-dark";
      package = pkgs.gnome.adwaita-icon-theme;
    };
  };

  # Screen lock
  services = {
    screen-locker = {
      enable = true;
      inactiveInterval = 10;
      lockCmd = "${pkgs.i3lock-fancy-rapid}/bin/i3lock-fancy-rapid 10 15";
    };

    # Auto mount devices
    udiskie.enable = true;

    polybar = {
      enable = true;
      config = polybar-config;
      extraConfig = polybar-bars + polybar-colors + polybar-modules + polybar-user_modules;
      package = pkgs.polybarFull;
      script = "polybar main &";
    };

    dunst = {
      enable = true;
      package = pkgs.dunst;
      settings = {
        global = {
          monitor = 0;
          follow = "mouse";
          border = 0;
          height = 400;
          width = 320;
          offset = "33x65";
          indicate_hidden = "yes";
          shrink = "no";
          separator_height = 0;
          padding = 32;
          horizontal_padding = 32;
          frame_width = 0;
          sort = "no";
          idle_threshold = 120;
          font = "Noto Sans";
          line_height = 4;
          markup = "full";
          format = "<b>%s</b>\n%b";
          alignment = "left";
          transparency = 10;
          show_age_threshold = 60;
          word_wrap = "yes";
          ignore_newline = "no";
          stack_duplicates = false;
          hide_duplicate_count = "yes";
          show_indicators = "no";
          icon_position = "left";
          icon_theme = "Adwaita-dark";
          sticky_history = "yes";
          history_length = 20;
          history = "ctrl+grave";
          browser = "google-chrome-stable";
          always_run_script = true;
          title = "Dunst";
          class = "Dunst";
          max_icon_size = 64;
        };
      };
    };
  };

  programs = shared-programs // { gpg.enable = true; };

}

================
File: modules/nixos/packages.nix
================
{ pkgs }:

with pkgs;
let shared-packages = import ../shared/packages.nix { inherit pkgs; }; in
shared-packages ++ [

  # Security and authentication
  yubikey-agent
  keepassxc

  # App and package management
  appimage-run
  gnumake
  cmake
  home-manager

  # Media and design tools
  vlc
  fontconfig
  font-manager

  # Productivity tools
  bc # old school calculator
  galculator

  # Audio tools
  cava # Terminal audio visualizer
  pavucontrol # Pulse audio controls

  # Testing and development tools
  direnv
  rofi
  rofi-calc
  postgresql
  libtool # for Emacs vterm

  # Screenshot and recording tools
  flameshot

  # Text and terminal utilities
  feh # Manage wallpapers
  screenkey
  tree
  unixtools.ifconfig
  unixtools.netstat
  xclip # For the org-download package in Emacs
  xorg.xwininfo # Provides a cursor to click and learn about windows
  xorg.xrandr

  # File and system utilities
  inotify-tools # inotifywait, inotifywatch - For file system events
  i3lock-fancy-rapid
  libnotify
  pcmanfm # File browser
  sqlite
  xdg-utils

  # Other utilities
  yad # yad-calendar is used with polybar
  xdotool
  google-chrome

  # PDF viewer
  zathura

  # Music and entertainment
  spotify
]

================
File: modules/nixos/README.md
================
## Layout
```
.
├── config             # Config files not written in Nix
├── default.nix        # Defines module, system-level config,
├── disk-config.nix    # Disks, partitions, and filesystems
├── files.nix          # Non-Nix, static configuration files (now immutable!)
├── home-manager.nix   # Defines user programs
├── packages.nix       # List of packages to install for NixOS
├── secrets.nix        # Age-encrypted secrets with agenix
```

================
File: modules/nixos/secrets.nix
================
{ config, pkgs, agenix, secrets, ... }:

let user = "lessuseless"; in
{
  age.identityPaths = [
    "/home/${user}/.ssh/id_ed25519"
  ];

  # Your secrets go here
  #
  # Note: the installWithSecrets command you ran to boostrap the machine actually copies over
  #       a Github key pair. However, if you want to store the keypair in your nix-secrets repo
  #       instead, you can reference the age files and specify the symlink path here. Then add your
  #       public key in shared/files.nix.
  #
  #       If you change the key name, you'll need to update the SSH configuration in shared/home-manager.nix
  #       so Github reads it correctly.

  #
  # age.secrets."github-ssh-key" = {
  #   symlink = false;
  #   path = "/home/${user}/.ssh/id_github";
  #   file =  "${secrets}/github-ssh-key.age";
  #   mode = "600";
  #   owner = "${user}";
  #   group = "wheel";
  # };

}

================
File: modules/shared/config/emacs/.gitignore
================
config.el

================
File: modules/shared/config/emacs/config.org
================
#+TITLE: Emacs
#+STARTUP: content

* Configuration   :emacs:
** About my Emacs
This is my detailed Emacs configuration. It's an ~org~ file that is transpiled to ~emacs-lisp~ as part of the Nix build process. 

Why an org file? My Emacs config is large, and this enables me to greatly improve readability of its documentation. I edit this file the same way you're reading it (nicely formatted) as I use Emacs and Emacs speaks org. Sounds complicated, but it's really not; [[https://github.com/dustinlyons/nixos-config/blob/main/nixos/default.nix#L215][just a few lines]] in my Nix config. [[https://github.com/dustinlyons/nixos-config/blob/main/darwin/default.nix#L28][MacOS too.]]

This is the main configuration, but there also exists one more init file, ~init.el~ , that bootstraps ~org-mode~ before this file is interpreted. That's defined [[https://github.com/dustinlyons/nixos-config/blob/main/shared/files.nix#L5][here]].

/Each block of code below is the actual Emacs configuration./ Formally, this style of configuration is named [[https://en.wikipedia.org/wiki/Literate_programming]["literate programming"]].

** Personal Information
Just me!

#+NAME: personal-info
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ashley Barr"
    user-mail-address "lessuseless@duck.com")
#+END_SRC

** Initialization
*** Booting up
Mainly splash screen settings. In the future we may look to optimize performance here.

#+NAME: startup
#+BEGIN_SRC emacs-lisp
  ;; Turn off the splash screen
  (setq inhibit-startup-screen t)
  ;; Turn off the splash screen
  (setq initial-scratch-message nil)
  ;; Confirm before exiting Emacs
  (setq confirm-kill-emacs #'yes-or-no-p)
  ;; Set default frame size and position

  (defun adjust-frame-size-and-position (&optional frame)
    "Adjust size and position of FRAME based on its type."
    (if (display-graphic-p frame)
        (let* ((w 150)  ; Set to desired width in characters
              (h 50)   ; Set to desired height in lines
              (width (* w (frame-char-width frame)))
              (height (* h (frame-char-height frame)))
              (left (max 0 (floor (/ (- (x-display-pixel-width) width) 2))))
              (top (max 0 (floor (/ (- (x-display-pixel-height) height) 2)))))

          (set-frame-size frame w h)
          (set-frame-position frame left top))
      ;; Ensure the menu bar is off in terminal mode
      (when (and (not (display-graphic-p frame))
                (menu-bar-mode 1))
        (menu-bar-mode -1))))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (select-frame frame)
                  (when (system-is-mac) (adjust-frame-size-and-position frame)))
    (adjust-frame-size-and-position)))
  #+END_SRC

*** Add package sources
This associates our package manager with the right source (MELPA).

#+NAME: package-sources
#+BEGIN_SRC emacs-lisp
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
  (unless (assoc-default "nongnu" package-archives)
    (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t))
#+END_SRC

*** System Definitions
**** Conditionals

#+BEGIN_SRC emacs-lisp
  (defun system-is-mac ()
    "Return true if system is darwin-based (Mac OS X)"
    (string-equal system-type "darwin"))

  (defun system-is-linux ()
    "Return true if system is GNU/Linux-based"
    (string-equal system-type "gnu/linux"))

  ;; Set path for darwin
  (when (system-is-mac)
    (setenv "PATH" (concat (getenv "PATH") ":/Users/lessuseless/.nix-profile/bin:/usr/bin"))
    (setq exec-path (append '("/Users/lessuseless/bin" "/profile/bin" "/Users/lessuseless/.npm-packages/bin" "/Users/lessuseless/.nix-profile/bin" "/nix/var/nix/profiles/default/bin" "/usr/local/bin" "/usr/bin") exec-path)))
#+END_SRC

*** Counsel/Ivy framework
Ivy and associated helpers that uses the minibuffer. Ivy describes itself as "a generic completion mechanism for Emacs." Basically, it's a prettier popup window to input Emacs commands. I've defined this to show at the bottom of the screen, which is conveniently also the default.

#+NAME: ivy-framework
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :demand t
    :bind (("M-x" . counsel-M-x)
      ("C-x b" . counsel-ibuffer)
      ("C-x C-f" . counsel-find-file)
      ("C-M-j" . counsel-switch-buffer)
    :map minibuffer-local-map
      ("C-r" . 'counsel-minibuffer-history))
    :custom
      (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
      (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  (use-package prescient
    :config
      (prescient-persist-mode 1))

  (use-package ivy
    :bind (("C-s" . swiper-all)
    :map ivy-minibuffer-map
      ("TAB" . ivy-partial-or-done)
      ("C-f" . ivy-alt-done)
      ("C-l" . ivy-alt-done)
      ("C-j" . ivy-next-line)
      ("C-k" . ivy-previous-line)
    :map ivy-switch-buffer-map
      ("C-k" . ivy-previous-line)
      ("C-l" . ivy-done)
      ("C-d" . ivy-switch-buffer-kill)
    :map ivy-reverse-i-search-map
      ("C-k" . ivy-previous-line)
      ("C-d" . ivy-reverse-i-search-kill))
    :init
      (ivy-mode 1)
    :config
      (setq ivy-use-virtual-buffers t)
      (setq ivy-wrap t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t))

  (use-package ivy-rich
    :init (ivy-rich-mode 1))

  (use-package ivy-prescient
    :after ivy
    :custom
      (prescient-save-file "~/.emacs.d/prescient-data")
      (prescient-filter-method 'fuzzy)
    :config
      (ivy-prescient-mode t))

  (use-package all-the-icons-ivy
    :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+END_SRC

*** Leader keys
I use ~general.el~ to define groups of keybindings under my 'leader' definition. You will see these definitions sprinkled throughout this file; they are just quick shortcuts. For more info, [[https://medium.com/usevim/vim-101-what-is-the-leader-key-f2f5c1fa610f][here]] is a good explanation on leader keys.

#+NAME: keybindings
#+BEGIN_SRC emacs-lisp
  ;; ESC will also cancel/quit/etc.
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (use-package general
    :init
      (setq evil-want-keybinding nil)
    :config
      (general-evil-setup t)
      (general-create-definer dl/leader-keys
        :keymaps '(normal visual emacs)
        :prefix ","))
#+END_SRC

**** Emacs cleanup
Helpful keybindings to help keep Emacs sane.

#+NAME: emacs-cleanup
#+BEGIN_SRC emacs-lisp
  (dl/leader-keys
    "k"  '(:ignore k :which-key "cleanup")
    "ko" '(kill-buffer-and-window :which-key "kill buffer and window")
    "kk" '(kill-some-buffers :which-key "cleanup buffers"))
  (global-set-key (kbd "C-x -") 'kill-buffer-and-window)
#+END_SRC

**** Treemacs
#+NAME: treemacs
#+BEGIN_SRC emacs-lisp
  (dl/leader-keys
    "t"  '(:ignore t :which-key "treemacs")
    "tt" '(treemacs :which-key "toggle treemacs")
    "tx" '(treemacs-collapse-all-projects :which-key "collapse projects")
    "to" '(treemacs-select-window :which-key "select treemacs")
    "tw" '(treemacs-toggle-fixed-width :which-key "size treemacs"))
#+END_SRC

**** Toggles
Various UI related toggles.
#+NAME: toggles-ui
#+BEGIN_SRC emacs-lisp
  (dl/leader-keys
    "h" '(counsel-load-theme :which-key "choose theme"))
#+END_SRC

***** Rotate windows
Various helpers and packages I find useful for window management.

#+BEGIN_SRC emacs-lisp
  ;; Rotates windows and layouts
  (use-package rotate
    :config)

  (dl/leader-keys
    "r"   '(:ignore t :which-key "rotate")
    "rw"  '(rotate-window :which-key "rotate window")
    "rl"  '(rotate-layout :which-key "rotate layout"))
#+END_SRC

*** Gutter
**** Line numbers
These functions define vim-style relative line numbers. This means my line numbers look like -1, -2, 0, 1, 2...

*** Modes
**** Window minor modes
I like these window related minor modes.

#+NAME: windows-ui-settings
#+BEGIN_SRC emacs-lisp
  ;; Turn off UI junk
  ;; Note to future self: If you have problems with these later,
  ;; move these into custom file and set variable custom-file
  (column-number-mode)
  (scroll-bar-mode 0)
  (menu-bar-mode -1)
  (tool-bar-mode 0)
  (winner-mode 1) ;; ctrl-c left, ctrl-c right for window undo/redo
#+END_SRC

**** Set mode margins
This is used primarily to center org mode text.

#+NAME: mode-margins
#+BEGIN_SRC emacs-lisp
  (defun dl/org-mode-visual-fill ()
    (setq visual-fill-column-width 110
        visual-fill-column-center-text t))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . dl/org-mode-visual-fill))
#+END_SRC

**** Don't blink the cursor
#+NAME: cursor-mode
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC

**** Colors
***** Rainbow delimiters
Makes my lisp parens pretty, and easy to spot.

#+NAME: rainbow-delmiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

***** Color definitions
Define a global set of colors to be used everywhere in Emacs.

#+NAME: color-definitions
#+BEGIN_SRC emacs-lisp
  (defvar dl/black-color "#1F2528")
  (defvar dl/red-color "#EC5F67")
  (defvar dl/yellow-color "#FAC863")
  (defvar dl/blue-color "#6699CC")
  (defvar dl/green-color "#99C794")
  (defvar dl/purple-color "#C594C5")
  (defvar dl/teal-color "#5FB3B3")
  (defvar dl/light-grey-color "#C0C5CE")
  (defvar dl/dark-grey-color "#65737E")
#+END_SRC

**** Addons
***** "Powerline"
Keeps info at my fingertips. Modeline is much better than Vim's Powerline (sorry Vim).

#+NAME: modeline
#+BEGIN_SRC emacs-lisp
  ;; Run M-x all-the-icons-install-fonts to install
  (use-package all-the-icons)
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC

***** Treemacs
Although I'm primarily a keyboard user and use Projectile for quickly finding files, I still find the need to browse through files in a more visual way. Treemacs does the job, and beautifully might I add.

#+NAME: treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :config
      (setq treemacs-is-never-other-window 1)
    :bind
      ("C-c t" . treemacs-find-file)
      ("C-c b" . treemacs-bookmark))

  (use-package treemacs-icons-dired)
  (use-package treemacs-all-the-icons)
  (use-package treemacs-projectile)
  (use-package treemacs-magit)
  (use-package treemacs-evil)
#+END_SRC

**** Easy window motions with ace-window
Predefine windows with hotkeys and jump to them.

#+NAME: easy-window-motions
#+BEGIN_SRC emacs-lisp
;; Remove binding for facemap-menu, use for ace-window instead
(global-unset-key (kbd "M-o"))

(use-package ace-window
  :bind (("M-o" . ace-window))
  :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
  :config
    (ace-window-display-mode 1))
#+END_SRC

*** Package managers
Using ~straight.el~ under the hood of ~use-package~ enables us to download packages using ~git~. This is preferred for easier hacking; I maintain my own ~org-roam~ fork, for example, and it's just another directory where I organize code. I configure ~straight.el~ with one line to use it.

*** Windows
**** Fonts
#+NAME: fonts
#+BEGIN_SRC emacs-lisp
  ;; Set the default pitch face
  (when (system-is-linux)
    (set-face-attribute 'default nil :font "JetBrainsMono" :height 100))
  (when (system-is-mac)
    (set-face-attribute 'default nil :font "JetBrains Mono" :height 140))

  ;; Set the fixed pitch face
  (when (system-is-linux)
    (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono" :weight 'normal :height 100))
  (when (system-is-mac)
    (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :weight 'normal :height 150))

  ;; Set the variable pitch face
  (when (system-is-linux)
    (set-face-attribute 'variable-pitch nil :font "Helvetica LT Std Condensed" :weight 'normal :height 140))
  (when (system-is-mac)
    (set-face-attribute 'variable-pitch nil :font "Helvetica" :weight 'normal :height 170))

#+END_SRC

*** Dashboard
#+NAME: dashboard-settings
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner 'ascii
        dashboard-center-content t
        dashboard-items '((projects . 5)
                           (recents  . 5)))
  (setq dashboard-set-footer nil))

  (setq dashboard-banner-logo-title "Welcome to your life")
  (setq dashboard-set-file-icons t)
  (setq dashboard-projects-backend 'projectile)

  (setq initial-buffer-choice (lambda ()
                                  (get-buffer-create "*dashboard*")
                                  (dashboard-refresh-buffer)))
  (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
#+END_SRC

** Keybindings
*** Spaces over tabs
We use two spaces in place of tabs. I don't even want to hear it.

#+NAME: next-buffer
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
              js-indent-level 2
              tab-width 2)
  (setq-default evil-shift-width 2)
#+END_SRC

*** Buffers
#+NAME: next-buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-tab>") 'next-buffer)
#+END_SRC

** Display options
*** Themes
**** Doom Emacs
#+NAME: themes-autothemer
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
    (setq doom-themes-enable-bold t
            doom-themes-enable-italic t)
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+END_SRC

** Global Settings
*** Global Modes
I like these modes, what can I say. They're good to me.

#+NAME: global-modes
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p) ;; Use Y or N in prompts, instead of full Yes or No

  (global-visual-line-mode t) ;; Wraps lines everywhere
  (global-auto-revert-mode t) ;; Auto refresh buffers from disk
  (line-number-mode t) ;; Line numbers in the gutter
  (show-paren-mode t) ;; Highlights parans for me

  (setq warning-minimum-level :error)
#+END_SRC

** Org mode
*** Agenda
Initialize org-agenda file and set some key bindings to create tasks.
#+NAME::org-mode-agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files "~/.emacs.d/agenda.txt" )

  (defun my-org-insert-subheading (heading-type)
  "Inserts a new org heading with unique ID and creation date.
  The type of heading (TODO, PROJECT, etc.) is specified by HEADING-TYPE."
    (let ((uuid (org-id-uuid))
          (date (format-time-string "[%Y-%m-%d %a %H:%M]")))
      (org-end-of-line) ;; Make sure we are at the end of the line
      (unless (looking-at-p "\n") (insert "\n")) ;; Insert newline if next character is not a newline
      (org-insert-subheading t) ;; Insert a subheading instead of a heading
      (insert (concat heading-type " "))
      (save-excursion
        (org-set-property "ID" uuid)
        (org-set-property "CREATED" date))))

  (defun my-org-insert-todo ()
    "Inserts a new TODO heading with unique ID and creation date."
    (interactive)
    (my-org-insert-subheading "TODO"))

  (defun my-org-insert-project ()
    "Inserts a new PROJECT heading with unique ID and creation date."
    (interactive)
    (my-org-insert-subheading "PROJECT"))

  (defun my-org-copy-link-from-id ()
    "Copies a link to the current Org mode item by its ID to clipboard"
    (interactive)
    (when (org-at-heading-p)
      (let* ((element (org-element-at-point))
             (title (org-element-property :title element))
             (id (org-entry-get nil "ID"))
             (link (format "[[id:%s][%s]]" id title)))
        (when id
          (kill-new link)
          (message "Link saved to clipboard")))))

  (define-prefix-command 'my-org-todo-prefix)

  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c t") 'my-org-todo-prefix)

  (define-key 'my-org-todo-prefix (kbd "t") 'my-org-insert-todo)
  (define-key 'my-org-todo-prefix (kbd "p") 'my-org-insert-project)

  (define-key org-mode-map (kbd "C-c l") 'my-org-copy-link-from-id)
#+END_SRC

**** Set org faces
Set various types and colors for ~org-mode~.

#+NAME::org-mode-faces
#+BEGIN_SRC emacs-lisp
  ;; Fast access to tag common contexts I use
  (setq org-todo-keywords
   '((sequence "TODO(t)" "STARTED(s)" "WAITING(w@/!)"
               "DELEGATED(g@/!)" "DEFERRED(r)" "SOMEDAY(y)"
               "|" "DONE(d@)" "CANCELED(x@)")
     (sequence "PROJECT(p)" "|" "DONE(d@)" "CANCELED(x@)")
     (sequence "APPT(a)" "|" "DONE(d@)" "CANCELED(x@)")))

  (setq org-todo-keyword-faces
    `(("TODO" . ,dl/green-color)
      ("STARTED" . ,dl/yellow-color)
      ("WAITING" . ,dl/light-grey-color)
      ("DELEGATED" . ,dl/teal-color)
      ("DEFERRED" . ,dl/dark-grey-color)
      ("SOMEDAY" . ,dl/purple-color)
      ("DONE" . ,dl/dark-grey-color)
      ("CANCELED" . ,dl/dark-grey-color)
      ("PROJECT" . ,dl/blue-color)
      ("APPT" . ,dl/green-color)))

  (defface my-org-agenda-face-1-2
    '((t (:inherit default :height 1.2)))
    "Face for org-agenda mode.")

  (defun my-set-org-agenda-font ()
    "Set the font for `org-agenda-mode'."
    (buffer-face-set 'my-org-agenda-face-1-2))

  (add-hook 'org-agenda-mode-hook 'my-set-org-agenda-font)

  (setq display-buffer-alist
      `((".*Org Agenda.*"
         (display-buffer-below-selected)
         (inhibit-same-window . t)
         (window-height . 0.5))))

#+END_SRC

**** Format org-agenda views
This block sets the ~org-agenda-prefix-format~ in an friendly way for ~org-roam~ (credit to [[https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html][this post)]]. It truncates long filenames and removes the ~org-roam~ timestamp slug.

#+NAME::org-agenda-prefixes
#+BEGIN_SRC emacs-lisp
  (defun dl/buffer-prop-get (name)
    "Get a buffer property called NAME as a string."
    (org-with-point-at 1
      (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
                              (point-max) t)
        (buffer-substring-no-properties
        (match-beginning 1)
        (match-end 1)))))

  (defun dl/agenda-category (&optional len)
    "Get category of item at point for agenda."
    (let* ((file-name (when buffer-file-name
                        (file-name-sans-extension
                        (file-name-nondirectory buffer-file-name))))
          (title (dl/buffer-prop-get "title"))
          (category (org-get-category))
          (result (or (if (and title (string-equal category file-name))
                          title
                        category))))
      (if (numberp len)
          (s-truncate len (s-pad-right len " " result))
        result)))

  (evil-set-initial-state 'org-agenda-mode 'normal)
  (with-eval-after-load 'org-agenda
    (define-key org-agenda-mode-map (kbd "j") 'org-agenda-next-line)
    (define-key org-agenda-mode-map (kbd "k") 'org-agenda-previous-line))

  (setq org-agenda-todo-ignore-keywords '("PROJECT"))
#+END_SRC

**** org-super-agenda views
Setup for ~org-super-agenda~ and ~org-ql~.

#+NAME::org-super-agenda
#+BEGIN_SRC emacs-lisp
  (use-package org-super-agenda
    :after org-agenda
    :init
    (setq org-agenda-dim-blocked-tasks nil))

  ;; Define custom faces for group highlighting
  (defface org-super-agenda-header
    '((t (:inherit org-agenda-structure :height 1.1 :foreground "#7cc3f3" :background "#282c34")))
    "Face for highlighting org-super-agenda groups.")

  (defface org-super-agenda-subheader
    '((t (:inherit org-agenda-structure :height 1.0 :foreground "light slate gray" :background "black")))
    "Face for highlighting org-super-agenda subgroups.")

  ;; Apply the custom faces to org-super-agenda
  (custom-set-faces
   '(org-super-agenda-header ((t (:inherit org-agenda-structure :height 1.1 :foreground "#7cc3f3" :background "#282c34"))))
   '(org-super-agenda-subheader ((t (:inherit org-agenda-structure :height 1.0 :foreground "light slate gray" :background "black")))))

  (setq org-super-agenda-groups
    '((:name "Priority A"
       :priority "A")
      (:name "Priority B"
       :priority "B")
      (:name "Priority C"
       :priority "C")
      (:name "Started"
       :todo "STARTED")
      (:name "Waiting"
       :todo "WAITING")
      (:name "Tasks"
       :todo "TODO")
      (:name "Someday"
       :todo "SOMEDAY")
    (:name "Projects"
     :tag "PROJECT")))

  (org-super-agenda-mode)
#+END_SRC

**** org-transclusion
Let's us move text but still see it in another file. I primarily use this to move text around in my journal.

#+NAME::org-transclusion
#+BEGIN_SRC emacs-lisp
  (use-package org-transclusion
    :after org
    :hook (org-mode . org-transclusion-mode))

  (defun org-global-props (&optional property buffer)
    "Helper function to grab org properties"
    (unless property (setq property "PROPERTY"))
    (with-current-buffer (or buffer (current-buffer))
      (org-element-map (org-element-parse-buffer) 'keyword
      (lambda (el) (when (string-match property (org-element-property :key el)) el)))))

#+END_SRC

*** Install package
If you haven't heard of org mode, go watch [[https://www.youtube.com/watch?v=SzA2YODtgK4][this]] talk and come back when you are finished.

**** Leader key shortcuts
#+NAME::org-mode-quick-entry
#+BEGIN_SRC emacs-lisp
  (defvar current-time-format "%H:%M:%S"
    "Format of date to insert with `insert-current-time' func.
  Note the weekly scope of the command's precision.")

  (defun dl/find-file (path)
    "Helper function to open a file in a buffer"
    (interactive)
    (find-file path))

  (defun dl/reload-emacs ()
    "Reload the emacs configuration"
    (interactive)
    (load "~/.emacs.d/init.el"))

  (defun dl/insert-header ()
    "Insert a header indented one level from the current header, unless the current header is a timestamp."
    (interactive)
    (let* ((level (org-current-level))
          (headline (org-get-heading t t t t))
          (next-level (if (string-match "^\\([0-9]\\{2\\}:[0-9]\\{2\\}:[0-9]\\{2\\}\\)" headline)
                          (1+ level)
                        level)))
      (end-of-line)
      (newline)
      (insert (make-string next-level ?*))
      (insert " ")))

  (defun dl/insert-current-time ()
    "Insert the current time into the current buffer, at a level one deeper than the current heading."
    (interactive)
    (let* ((level (org-current-level))
           (next-level (1+ level)))
      (end-of-line)
      (newline)
      (insert (make-string next-level ?*))
      (insert " " (format-time-string "%H:%M:%S" (current-time)) "\n")))

  "Emacs relates shortcuts"
  (dl/leader-keys
    "e"  '(:ignore t :which-key "emacs")
    "ee" '(dl/load-buffer-with-emacs-config :which-key "open emacs config")
    "er" '(dl/reload-emacs :which-key "reload emacs"))

  "A few of my own personal shortcuts"
  (dl/leader-keys
    ","  '(dl/insert-header :which-key "insert header")
    "<"  '(dl/insert-current-time :which-key "insert header with current time"))
  #+END_SRC

***** Roam capture templates
These are templates used to create new notes.

#+NAME::roam-templates
#+BEGIN_SRC emacs-lisp
  (setq org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n")
      :unnarrowed t)))
#+END_SRC

**** Org Roam
***** Install package
#+NAME::org-roam-package
#+BEGIN_SRC emacs-lisp
  (require 'ucs-normalize)
  (use-package org-roam
    :straight (:host github :repo "org-roam/org-roam"
               :branch "main"
               :files (:defaults "extensions/*")
    :build (:not compile))
    :init
      (setq org-roam-v2-ack t) ;; Turn off v2 warning
      (setq org-roam-mode-section-functions
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              #'org-roam-unlinked-references-section))
        (add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer)))
    :custom
      (org-roam-directory (file-truename "~/.local/share/org-roam"))
      (org-roam-dailies-directory "daily/")
      (org-roam-completion-everywhere t)
    :bind
      (("C-c r b" . org-roam-buffer-toggle)
       ("C-c r t" . org-roam-dailies-goto-today)
       ("C-c r y" . org-roam-dailies-goto-yesterday)
       ("C-M-n" . org-roam-node-insert)
         :map org-mode-map
       ("C-M-i"   . completion-at-point)
       ("C-M-f" . org-roam-node-find)
       ("C-M-c" . dl/org-roam-create-id)
       ("C-<left>" . org-roam-dailies-goto-previous-note)
       ("C-`" . org-roam-buffer-toggle)
       ("C-<right>" . org-roam-dailies-goto-next-note)))
  (org-roam-db-autosync-mode)
#+END_SRC

***** Configure templates
#+NAME::org-roam-templates
#+BEGIN_SRC emacs-lisp
(setq org-roam-dailies-capture-templates
  '(("d" "default" entry
     "* %?"
     :if-new (file+head "%<%Y-%m-%d>.org"
                        (lambda () (concat ":PROPERTIES:\n:ID:       " (org-id-new) "\n:END:\n"
                                           "#+TITLE: %<%Y-%m-%d>\n#+filetags: Daily \n" ; Added space here
                                           "* Log\n"))))))
#+END_SRC

***** Extending Roam
Here we add additional function to ~org-roam~ to either do something specific for more workflow, or otherwise make ~org-roam~ more full featured.

****** Set CREATED and LAST_MODIFIED filetags on save
Sets timestamps in the Properties drawer of files. I intend to use this one day when rendering these notes as HTML, to quickly see files last touched.

#+NAME::org-roam-set-timestamps-on-save
#+BEGIN_SRC emacs-lisp
  (defvar dl/org-created-property-name "CREATED")

  (defun dl/org-set-created-property (&optional active name)
    (interactive)
    (let* ((created (or name dl/org-created-property-name))
           (fmt (if active "<%s>" "[%s]"))
           (now (format fmt (format-time-string "%Y-%m-%d %a %H:%M"))))
      (unless (org-entry-get (point) created nil)
        (org-set-property created now)
        now)))

  (defun dl/org-find-time-file-property (property &optional anywhere)
    (save-excursion
      (goto-char (point-min))
      (let ((first-heading
             (save-excursion
               (re-search-forward org-outline-regexp-bol nil t))))
        (when (re-search-forward (format "^#\\+%s:" property)
                                 (if anywhere nil first-heading) t)
          (point)))))

  (defun dl/org-has-time-file-property-p (property &optional anywhere)
    (when-let ((pos (dl/org-find-time-file-property property anywhere)))
      (save-excursion
        (goto-char pos)
        (if (and (looking-at-p " ")
                 (progn (forward-char)
                        (org-at-timestamp-p 'lax)))
            pos -1))))

  (defun dl/org-set-time-file-property (property &optional anywhere pos)
    (when-let ((pos (or pos
                        (dl/org-find-time-file-property property))))
      (save-excursion
        (goto-char pos)
        (if (looking-at-p " ")
            (forward-char)
          (insert " "))
        (delete-region (point) (line-end-position))
        (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
          (insert now)))))

  (defun dl/org-set-last-modified ()
    "Update the LAST_MODIFIED file property in the preamble."
    (when (derived-mode-p 'org-mode)
      (dl/org-set-time-file-property "LAST_MODIFIED")))
#+END_SRC

****** Set CREATED on node creation
#+NAME::org-roam-set-timestamps-on-save
#+BEGIN_SRC emacs-lisp
  (defun dl/org-roam-create-id ()
  "Add created date to org-roam node."
    (interactive)
    (org-id-get-create)
    (dl/org-set-created-property))
#+END_SRC

*** UI improvements
Anything related to improving org mode's appearance.

**** Change color of ivy window selection
#+NAME::ivy-window-selection
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'ivy-current-match nil :foreground "#3d434d" :background "#ffcc66")
#+END_SRC

**** Change default bullets to be pretty
Replaces the standard org-mode header asterisks with dots.
#+NAME::org-mode-visuals
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
      (org-superstar-remove-leading-stars t)
      (org-superstar-headline-bullets-list '("•" "•" "•" "◦" "◦" "◦" "◦")))
#+END_SRC

**** Fonts
#+NAME::org-mode-variable-width-fonts
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (require 'org-indent)
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  (when (system-is-linux)
    (set-face-attribute 'org-document-title nil :font "Helvetica LT Std Condensed" :weight 'bold :height 1.2))
  (when (system-is-mac)
    (set-face-attribute 'variable-pitch nil :font "Helvetica" :height 120))
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.15)
                  (org-level-3 . 1.1)
                  (org-level-4 . 1.05)
                  (org-level-5 . 1.05)
                  (org-level-6 . 1.0)
                  (org-level-7 . 1.0)
                  (org-level-8 . 1.0)))
 (when (system-is-linux)
   (set-face-attribute (car face) nil :font "Helvetica LT Std Condensed" :weight 'medium :height (cdr face)))
 (when (system-is-mac)
   (set-face-attribute 'variable-pitch nil :font "Helvetica" :weight 'medium :height 170)))
#+END_SRC

** Evil mode (aka Vim mode)
*** Install package
This is what makes emacs possible for me. All evil mode packages and related configuration.

#+NAME: evil-packages
#+BEGIN_SRC emacs-lisp
(defun dl/evil-hook ()
  (dolist (mode '(eshell-mode
                  git-rebase-mode
                  term-mode))
  (add-to-list 'evil-emacs-state-modes mode))) ;; no evil mode for these modes

(use-package evil
  :init
    (setq evil-want-integration t) ;; TODO: research what this does
    (setq evil-want-fine-undo 'fine) ;; undo/redo each motion
    (setq evil-want-Y-yank-to-eol t) ;; Y copies to end of line like vim
    (setq evil-want-C-u-scroll t) ;; vim like scroll up
    (evil-mode 1)
    :hook (evil-mode . dl/evil-hook)
  :config
    ;; Emacs "cancel" == vim "cancel"
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Ctrl-h deletes in vim insert mode
    (define-key evil-insert-state-map (kbd "C-h")
      'evil-delete-backward-char-and-join)

    ;; When we wrap lines, jump visually, not to the "actual" next line
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'message-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  ;; Gives me vim bindings elsewhere in emacs
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;; Keybindings in org mode
  (use-package evil-org
    :after evil
    :hook
      (org-mode . (lambda () evil-org-mode))
    :config
      (require 'evil-org-agenda)
      (evil-org-agenda-set-keys))

  ;; Branching undo system
  (use-package undo-tree
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))

  (use-package evil-commentary
    :after evil
    :config
    (evil-commentary-mode))

  ;; Keep undo files from littering directories
  (setq undo-tree-history-directory-alist '(("." . "~/.local/state/emacs/undo")))
#+END_SRC

** Terminal
#+NAME: vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :commands vterm
    :config
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
      (setq vterm-shell "zsh")
      (setq vterm-max-scrollback 10000))
#+END_SRC

** Managing files
Configuration related to filesystem, either basic IO and interaction from emacs or directly moving files around where it makes sense.
*** File browser
~dired~ provides a more visual interface to browsing files; similar to terminal programs like ~ranger~.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired)

  (use-package dired
    :ensure nil
    :straight nil
    :defer 1
    :commands (dired dired-jump)
    :config
      (setq dired-listing-switches "-agho --group-directories-first")
      (setq dired-omit-files "^\\.[^.].*")
      (setq dired-omit-verbose nil)
      (setq dired-hide-details-hide-symlink-targets nil)
      (put 'dired-find-alternate-file 'disabled nil)
      (setq delete-by-moving-to-trash t)
      (autoload 'dired-omit-mode "dired-x")
      (add-hook 'dired-load-hook
            (lambda ()
              (interactive)
              (dired-collapse)))
      (add-hook 'dired-mode-hook
            (lambda ()
              (interactive)
              (dired-omit-mode 1)
              (dired-hide-details-mode 1)
              (all-the-icons-dired-mode 1))
              (hl-line-mode 1)))

  (use-package dired-single)
  (use-package dired-ranger)
  (use-package dired-collapse)

  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "c" 'find-file
    "H" 'dired-omit-mode
    "l" 'dired-single-buffer
    "y" 'dired-ranger-copy
    "X" 'dired-ranger-move
    "p" 'dired-ranger-paste)

  ;; Darwin needs ls from coreutils for dired to work
  (when (system-is-mac)
    (setq insert-directory-program
      (expand-file-name ".nix-profile/bin/ls" (getenv "HOME"))))
#+END_SRC

**** Quick shortcuts for common file tasks
#+NAME::buffer-and-file-movement
#+BEGIN_SRC emacs-lisp
  (defun my-org-archive-done-tasks ()
    "Archive all DONE tasks in the current buffer."
    (interactive)
    (org-map-entries
    (lambda ()
      (org-archive-subtree)
      (setq org-map-continue-from (outline-previous-heading)))
    "/DONE" 'tree))

  (defun er-delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (yes-or-no-p (concat "Do you really want to delete file: " filename "? ")) ; Ask for confirmation
            (if (vc-backend filename)
                (vc-delete-file filename)
              (progn
                (delete-file filename)
                (message "Deleted file %s" filename)
                (kill-buffer)))
          (message "Aborted"))))) ; Abort message

  (define-key org-mode-map (kbd "C-c D") 'my-org-archive-done-tasks)
  (define-key org-mode-map (kbd "C-c d") 'org-archive-subtree)
  (global-set-key (kbd "C-c x")  #'er-delete-file-and-buffer)
#+END_SRC

*** Images
Quickly work with images over drag-and-drop or the clipboard. [[https://github.com/abo-abo/org-download][Link to Project README]].
#+NAME: org-download-copy
#+BEGIN_SRC emacs-lisp
  (use-package org-download)
  ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable)
#+END_SRC

*** Backups and auto-save
These settings keep emacs from littering the filesystem with buffer backups. These files look like ~#yourfilename.txt#~ and would otherwise be dropped in your working directory.

#+NAME: backup-files
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . "~/.local/state/emacs/backup"))
      backup-by-copying t    ; Don't delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t) ; Automatically delete excess backups
#+END_SRC

#+NAME: local-file-transforms
#+BEGIN_SRC emacs-lisp
(setq auto-save-file-name-transforms
      `((".*" "~/.local/state/emacs/" t)))
(setq lock-file-name-transforms
      `((".*" "~/.local/state/emacs/lock-files/" t)))
#+END_SRC

** Managing projects
*** Projectile
Projectile enables me to organize projects with a killer grep interface.

#+NAME: projectile
#+BEGIN_SRC emacs-lisp
  (use-package ripgrep)
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom
      ((projectile-completion-system 'ivy))
    :bind-keymap
	    ("C-c p" . projectile-command-map)
    :init
      (setq projectile-enable-caching t)
      (setq projectile-sort-order 'recently-active)
      (setq projectile-switch-project-action #'projectile-dired))

  (setq projectile-project-root-files-bottom-up '("package.json" ".projectile" ".project" ".git"))
  (setq projectile-ignored-projects '("~/.emacs.d/"))
  (setq projectile-globally-ignored-directories '("dist" "node_modules" ".log" ".git"))

  ;; Gives me Ivy options in the Projectile menus
  (use-package counsel-projectile :after projectile)
#+END_SRC

** Writing
*** Modes
Experimenting with different distraction free writing modes.

#+BEGIN_SRC emacs-lisp
(defun enter-writing-mode ()
  (load-theme 'doom-one-light t)
  (when (bound-and-true-p treemacs-mode) (treemacs))
  (add-hook 'window-buffer-change-functions 'check-leaving-buffer nil t))

(defun exit-writing-mode ()
  (load-theme 'doom-one t)
  (when (bound-and-true-p treemacs-mode) (treemacs))
  (remove-hook 'window-buffer-change-functions 'check-leaving-buffer t))

(add-hook 'writeroom-mode-hook
          (lambda ()
            (if writeroom-mode
                (enter-writing-mode)
                (exit-writing-mode))))

(use-package writeroom-mode
  :ensure t)

(global-set-key (kbd "C-c w") 'writeroom-mode)
#+END_SRC

*** Spell Check / Flycheck Mode
Everything related to spell and grammar checking.

#+NAME: spell-check
#+BEGIN_SRC emacs-lisp
  (when (system-is-mac)
    (with-eval-after-load "ispell"
      (setq ispell-program-name
        (expand-file-name ".nix-profile/bin/hunspell" (getenv "HOME")))
      (setq ispell-dictionary "en_US")))

  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

  (use-package flyspell-correct-ivy
    :after flyspell-correct)

  (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
  (add-hook 'text-mode-hook 'flyspell-mode)
  ;; Disable this for now, doesn't play well with long literate configuration
  ;; (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)

  (defun spell() (interactive) (flyspell-mode 1))
#+END_SRC

** Coding
*** Compile buffers
Everything related to M-x compile.

#+NAME: compilation-buffer
#+BEGIN_SRC emacs-lisp
;; Auto scroll the buffer as we compile
(setq compilation-scroll-output t)

;; By default, eshell doesn't support ANSI colors. Enable them for compilation.
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC
*** Tide
#+NAME: tide-mode
#+BEGIN_SRC emacs-lisp
(use-package tide
  :ensure t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save)))

(setq tide-format-options
      '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t
        :placeOpenBraceOnNewLineForFunctions nil))
#+END_SRC

*** LSP
This is my IDE. It includes the same engine that powers VS Code, in addition to Github Copilot.

#+NAME: lsp-mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp lsp-deferred
    :init
      (setq lsp-keymap-prefix "C-c l")
      ;;(setq lsp-keep-workspace-alive nil)
      ;;(setq lsp-restart 'ignore)
      (setq lsp-headerline-breadcrumb-enable nil)
      (setq lsp-auto-guess-root t)
      (setq lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
      (lsp-ui-doc-position 'bottom))

  (use-package lsp-treemacs
    :after lsp)

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
          ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
     :custom
       (company-minimum-prefix-length 1)
       (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (add-hook 'lsp-mode-hook #'lsp-headerline-breadcrumb-mode)
#+END_SRC

**** Shortcuts
Leader keys for lsp-mode.

#+NAME: lsp-leader-keys
#+BEGIN_SRC emacs-lisp
  (defun dl/lsp-find-references-other-window ()
    (interactive)
    (switch-to-buffer-other-window (current-buffer))
    (lsp-find-references))

  (defun dl/lsp-find-implementation-other-window ()
    (interactive)
    (switch-to-buffer-other-window (current-buffer))
    (lsp-find-implementation))

  (defun dl/lsp-find-definition-other-window ()
    (interactive)
    (switch-to-buffer-other-window (current-buffer))
    (lsp-find-definition))

  (dl/leader-keys
  "l"  '(:ignore t :which-key "lsp")
  "lf" '(dl/lsp-find-references-other-window :which-key "find references")
  "lc" '(dl/lsp-find-implementation-other-window :which-key "find implementation")
  "ls" '(lsp-treemacs-symbols :which-key "list symbols")
  "lt" '(list-flycheck-errors :which-key "list errors")
  "lh" '(lsp-treemacs-call-hierarchy :which-key "call hierarchy")
  "lF" '(lsp-format-buffer :which-key "format buffer")
  "li" '(lsp-organize-imports :which-key "organize imports")
  "ll" '(lsp :which-key "enable lsp mode")
  "lr" '(lsp-rename :which-key "rename")
  "ld" '(dl/lsp-find-definition-other-window :which-key "goto definition"))
#+END_SRC

*** Languages
**** Python
#+NAME: python
#+BEGIN_SRC emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
      (require 'lsp-pyright)
      (lsp-deferred))))  ; or lsp-deferred
#+END_SRC

**** Shell scripts
#+NAME: shell-scripts
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.env" . shell-script-mode))
#+END_SRC

**** YAML
#+NAME: yaml-mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :commands (markdown-mode gfm-mode)
    :mode (("\\.yml\\'" . yaml-mode)))
#+END_SRC

**** Markdown
#+NAME: markdown-mode
#+BEGIN_SRC emacs-lisp
  ;; This uses Github Flavored Markdown for README files
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
      ("\\.md\\'" . markdown-mode)
      ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc"))
#+END_SRC

**** HTML
***** Web mode
Emmet mode gives autocompletion for HTML tags using short hand notations, which for I use the TAB key.

#+NAME: html-auto-completion
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
  (define-key emmet-mode-keymap [tab] 'emmet-expand-line)
  (add-to-list 'emmet-jsx-major-modes 'jsx-mode)
#+END_SRC

***** Rainbow mode
Rainbow mode is an Emacs minor mode to highlight the color shown by a RGB hex triplet (example #FFFFFF).

#+NAME: rainbow-mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode)
#+END_SRC

**** golang
#+NAME: golang-config
#+BEGIN_SRC emacs-lisp
  (use-package go-mode)
  (use-package company-go)

  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
  (add-hook 'go-mode-hook #'lsp-deferred)

  (defun dl/go-mode-hook ()
    ; Call Gofmt before saving
    (add-hook 'before-save-hook 'gofmt-before-save)
    ; Customize compile command to run go build
    (if (not (string-match "go" compile-command))
        (set (make-local-variable 'compile-command)
             "go build -v && go test -v && go vet"))
    ; Godef jump key binding
    (local-set-key (kbd "M-.") 'godef-jump)
    ;; pop-tag-mark moves back before jump, to undo M-,
    (local-set-key (kbd "M-*") 'pop-tag-mark))

  (add-hook 'go-mode-hook 'dl/go-mode-hook)
#+END_SRC

**** Javascript / Typescript
#+NAME: javascript
#+BEGIN_SRC emacs-lisp
  (use-package pnpm-mode)
  (use-package prisma-mode
    :straight (:host github :repo "pimeys/emacs-prisma-mode"
               :branch "main"))

  (use-package web-mode
    :hook (web-mode . lsp-deferred))

  (add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.ts$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.js$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))

  (defun web-mode-init-hook ()
    "Hooks for Web mode.  Adjust indent."
    (setq web-mode-markup-indent-offset 2))
  (add-hook 'web-mode-hook  'web-mode-init-hook)

  ;; Vue.js / Nuxt.js Language Server
  (straight-use-package
   '(lsp-volar :type git :host github :repo "jadestrong/lsp-volar"))

  (add-hook 'typescript-mode-hook #'lsp-deferred)

  ;; Keeps indentation organized across these modes
  (use-package prettier-js)
  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook 'prettier-js-mode)
  (add-hook 'css-mode-hook 'prettier-js-mode)
#+END_SRC

*** Git
#+NAME: magit-git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch))
  (define-key magit-hunk-section-map (kbd "RET") 'magit-diff-visit-file-other-window)
#+END_SRC

*** Infrastructure
**** Nix
Nix is my package manager and operating system of choice; this mode enables me to have a better time writing Nix expressions.

#+NAME: nix-mode
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

**** Docker mode
#+NAME: dockerfile-mode
#+BEGIN_SRC emacs-lisp
  ;; This uses dockerfile-mode for Docker files
  (use-package dockerfile-mode)
  (put 'dockerfile-image-name 'safe-local-variable #'stringp)
  (add-to-list 'auto-mode-alist '("\\Dockerfile?$" . dockerfile-mode)) ;; auto-enable for Dockerfiles
#+END_SRC

**** Terraform
#+NAME: terraform-mode
#+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :hook ((terraform-mode . lsp-deferred)
           (terraform-mode . terraform-format-on-save-mode)))

  (add-to-list 'auto-mode-alist '("\\.tf\\'" . terraform-mode))
#+END_SRC

** AI
*** Copilot
#+BEGIN_SRC emacs-lisp
  (use-package copilot
    :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :ensure t)

  (add-hook 'prog-mode-hook 'copilot-mode)

  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
#+END_SRC

** Learning Emacs
These packages may come and go, but ultimately aid in my understanding of emacs and emacs lisp.

*** org-babel
**** Load languages to run in org mode code blocks
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
    'org-babel-load-languages
    '(
      (emacs-lisp . t)
      (python . t)
      (sql . t)
      (shell . t)))
   )
#+END_SRC

**** ANSI color codes in org babel shell output
Found [[https://emacs.stackexchange.com/questions/44664/apply-ansi-color-escape-sequences-for-org-babel-results][here]].
#+BEGIN_SRC emacs-lisp
  (defun dl/babel-ansi ()
    (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
      (save-excursion
        (goto-char beg)
        (when (looking-at org-babel-result-regexp)
          (let ((end (org-babel-result-end))
                (ansi-color-context-region nil))
            (ansi-color-apply-on-region beg end))))))
  (add-hook 'org-babel-after-execute-hook 'dl/babel-ansi)
#+END_SRC

*** Show real-time key bindings in a separate buffer
#+NAME: command-log
#+BEGIN_SRC emacs-lisp
  ;; Gives me a fancy list of commands I run
  (use-package command-log-mode)
  (setq global-command-log-mode t)
#+END_SRC

*** Panel popup to show key bindings
#+NAME: which-key
#+BEGIN_SRC emacs-lisp
  ;; Gives me a fancy list of commands I run
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+END_SRC

*** Helpful documentation strings for common functions
#+NAME: helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :custom
      ;; Remap Counsel help functions
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
    :bind
      ;; Remap default help functions
      ([remap describe-function] . helpful-function)
      ([remap describe-symbol] . helpful-symbol)
      ([remap describe-variable] . helpful-variable)
      ([remap describe-command] . helpful-command)
      ([remap describe-key] . helpful-key))
#+END_SRC

================
File: modules/shared/config/emacs/init.el
================
;; -------------------------
;; Variable Declarations
;; -------------------------
(defvar org-config-file "~/.local/share/src/nixos-config/modules/shared/config/emacs/config.org")
(defvar default-config-file "~/.emacs.d/default-config.org")
(defvar default-config-url "https://raw.githubusercontent.com/dustinlyons/nixos-config/9ad810c818b895c1f67f4daf21bbef31d8b5e8cd/shared/config/emacs/config.org")

;; -------------------------
;; Package Manager Setup
;; -------------------------
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "http://elpa.gnu.org/packages/")))

(unless (assoc-default "melpa" package-archives)
  (message "Warning: MELPA source not found. Adding MELPA to package-archives.")
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
(unless (assoc-default "org" package-archives)
  (message "Warning: Org source not found. Adding Org to package-archives.")
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))

(setq package-enable-at-startup nil)

;; -------------------------
;; Use-Package Setup
;; -------------------------
(unless (package-installed-p 'use-package)
  (package-initialize)
  (if (package-install 'use-package)
      (message "use-package installed successfully.")
    (error "Error: Failed to install use-package."))
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package))

;; -------------------------
;; Environment Variables Setup
;; -------------------------
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :config
  (setq exec-path-from-shell-variables '("PATH" "GOPATH" "PNPM_HOME"))
  (if (exec-path-from-shell-initialize)
      (message "Environment variables initialized successfully.")
    (error "Error: Failed to initialize environment variables.")))

(when (daemonp)
  (exec-path-from-shell-initialize))

;; -------------------------
;; Straight.el Setup
;; -------------------------
(setq straight-repository-branch "develop")
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (if (load bootstrap-file nil 'nomessage)
      (message "Straight.el loaded successfully.")
    (error "Error: Failed to load Straight.el.")))

(setq straight-use-package-by-default t)
(package-initialize)

;; -------------------------
;; Window and UI Setup
;; -------------------------
(defun dl/window-setup ()
  (condition-case nil
      (progn
        (column-number-mode)
        (scroll-bar-mode 0)
        (menu-bar-mode -1)
        (tool-bar-mode 0)
        (winner-mode 1)
        (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
        (add-to-list 'default-frame-alist '(ns-appearance . dark))
        (setq ns-use-proxy-icon nil)
        (setq frame-title-format nil)
        (message "Window and UI setup completed successfully."))
    (error (message "Error occurred in Window and UI setup."))))
(dl/window-setup)

;; -------------------------
;; Org Mode Setup
;; -------------------------
(defun dl/org-mode-setup ()
  (condition-case nil
      (progn
        (org-indent-mode)
        (variable-pitch-mode 1)
        (auto-fill-mode 0)
        (visual-line-mode 1)
        (setq evil-auto-indent nil)
        (message "Org mode setup completed successfully."))
    (error (message "Error occurred in Org mode setup."))))

(use-package org
  :defer t
  :hook (org-mode . dl/org-mode-setup)
  :config
  (setq org-edit-src-content-indentation 2
        org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-hide-block-startup nil)
  :bind (("C-c a" . org-agenda)))

;; -------------------------
;; Default Config Download
;; -------------------------
(defun dl/download-default-config ()
  (condition-case nil
      (progn
        (unless (file-exists-p default-config-file)
          (url-retrieve default-config-url
                        (lambda (_status)
                          ;; delete-region removes the HTTP headers from the downloaded content.
                          (delete-region (point-min) (1+ url-http-end-of-headers))
                          ;; save the contents of the buffer to the file.
                          (write-file default-config-file)))
          (message "Default configuration downloaded successfully.")))
    (error (message "Error occurred while downloading the default configuration."))))

;; -------------------------
;; Load Org Config or Default
;; -------------------------
(condition-case nil
    (progn
      (unless (file-exists-p org-config-file)
        (dl/download-default-config))
      (if (file-exists-p org-config-file)
          (org-babel-load-file org-config-file)
        (org-babel-load-file default-config-file))
      (message "Configuration loaded successfully."))
  (error (message "Error occurred while loading the configuration.")))

================
File: modules/shared/config/p10k.zsh
================
# Temporarily change options.
'builtin' 'local' '-a' 'p10k_config_opts'
[[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')
[[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')
[[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')
'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'

() {
  emulate -L zsh
  setopt no_unset

  autoload -Uz is-at-least && is-at-least 5.1 || return

  # Unset all configuration options.
  unset -m 'POWERLEVEL9K_*'

  # Left prompt segments.
  typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
      dir                       # current directory
      vcs                       # git status
      context                   # user@host
      command_execution_time    # previous command duration
      virtualenv                # python virtual environment
      prompt_char               # prompt symbol
  )

  # Right prompt segments.
  typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
      nix_shell_with_name
  )

  # Defines character set used by powerlevel10k.
  typeset -g POWERLEVEL9K_MODE=nerdfont-complete

  # When set to `moderate`, some icons will have an extra space after them. This is meant to avoid
  # icon overlap when using non-monospace fonts. When set to `none`, spaces are not added.
  typeset -g POWERLEVEL9K_ICON_PADDING=none

  # Basic style options that define the overall prompt look.
  typeset -g POWERLEVEL9K_BACKGROUND=                            # transparent background
  typeset -g POWERLEVEL9K_{LEFT,RIGHT}_{LEFT,RIGHT}_WHITESPACE=  # no surrounding whitespace
  typeset -g POWERLEVEL9K_{LEFT,RIGHT}_SUBSEGMENT_SEPARATOR=' '  # separate segments with a space
  typeset -g POWERLEVEL9K_{LEFT,RIGHT}_SEGMENT_SEPARATOR=        # no end-of-line symbol
  typeset -g POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION=           # no segment icons

  # Add an empty line before each prompt except the first. This doesn't emulate the bug
  # in Pure that makes prompt drift down whenever you use the ALT-C binding from fzf or similar.
  typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true

  # Green prompt symbol if the last command succeeded.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS}_FOREGROUND=002
  # Red prompt symbol if the last command failed.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS}_FOREGROUND=001
  # Default prompt symbol.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIINS_CONTENT_EXPANSION='❯'
  # Prompt symbol in command vi mode.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VICMD_CONTENT_EXPANSION='❮'
  # Prompt symbol in visual vi mode is the same as in command mode.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIVIS_CONTENT_EXPANSION='❮'
  # Prompt symbol in overwrite vi mode is the same as in command mode.
  typeset -g POWERLEVEL9K_PROMPT_CHAR_OVERWRITE_STATE=false

  # Grey Python Virtual Environment.
  typeset -g POWERLEVEL9K_VIRTUALENV_FOREGROUND=007
  # Don't show Python version.
  typeset -g POWERLEVEL9K_VIRTUALENV_SHOW_PYTHON_VERSION=false
  typeset -g POWERLEVEL9K_VIRTUALENV_{LEFT,RIGHT}_DELIMITER=

  # Blue current directory.
  typeset -g POWERLEVEL9K_DIR_FOREGROUND=blue

  # Context format when root: user@host. The first part white, the rest grey.
  typeset -g POWERLEVEL9K_CONTEXT_ROOT_TEMPLATE='%7F%n%f%007F@%m%f'
  # Context format when not root: user@host. The whole thing grey.
  typeset -g POWERLEVEL9K_CONTEXT_TEMPLATE='%007F%n@%m%f'
  # Don't show context unless root or in SSH.
  typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_CONTENT_EXPANSION=

  # Show previous command duration only if it's >= 5s.
  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=5
  # Don't show fractional seconds. Thus, 7s rather than 7.3s.
  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION=0
  # Duration format: 1d 2h 3m 4s.
  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FORMAT='d h m s'
  # Yellow previous command duration.
  typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=007

  # Branch icon. Set this parameter to '\uF126 ' for the popular Powerline branch icon.
  typeset -g POWERLEVEL9K_VCS_BRANCH_ICON='\uF126 '

  # Untracked files icon. It's really a question mark, your font isn't broken.
  # Change the value of this parameter to show a different icon.
  typeset -g POWERLEVEL9K_VCS_UNTRACKED_ICON='?'

  # Version control system colors.
  typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=2
  typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=3
  typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=2
  typeset -g POWERLEVEL9K_VCS_CONFLICTED_FOREGROUND=3
  typeset -g POWERLEVEL9K_VCS_LOADING_FOREGROUND=8

  # Nix shell color.
  typeset -g POWERLEVEL9K_NIX_SHELL_FOREGROUND=0
  typeset -g POWERLEVEL9K_NIX_SHELL_BACKGROUND=4

  # Tip: If you want to see just the icon without "pure" and "impure", uncomment the next line.
  typeset -g POWERLEVEL9K_NIX_SHELL_CONTENT_EXPANSION=

  function prompt_nix_shell_with_name() {
    if [[ -n "${IN_NIX_SHELL-}" ]]; then
      if [[ "${name-nix-shell}" != nix-shell ]] && [ "${name-shell}" != shell ]; then
        p10k segment -b 4 -f 15 -r -i NIX_SHELL_ICON -t "$name"
      else
        p10k segment -b 4 -f 15 -r -i NIX_SHELL_ICON
      fi
    fi
  }

  # VCS_STATUS_* parameters are set by gitstatus plugin. See reference:
  # https://github.com/romkatv/gitstatus/blob/master/gitstatus.plugin.zsh.
  function my_git_formatter() {
    emulate -L zsh

    if [[ -n $P9K_CONTENT ]]; then
      # If P9K_CONTENT is not empty, use it. It's either "loading" or from vcs_info (not from
      # gitstatus plugin). VCS_STATUS_* parameters are not available in this case.
      typeset -g my_git_format=$P9K_CONTENT
      return
    fi

    if (( $1 )); then
      # Styling for up-to-date Git status.
      local       meta='%f'     # default foreground
      local      clean='%002F'   # green foreground
      local   modified='%003F'  # yellow foreground
      local  untracked='%004F'   # blue foreground
      local conflicted='%001F'  # red foreground
    else
      # Styling for incomplete and stale Git status.
      local       meta='%244F'  # grey foreground
      local      clean='%244F'  # grey foreground
      local   modified='%244F'  # grey foreground
      local  untracked='%244F'  # grey foreground
      local conflicted='%244F'  # grey foreground
    fi

    local res

    if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then
      local branch=${(V)VCS_STATUS_LOCAL_BRANCH}

      # If local branch name is at most 32 characters long, show it in full.
      # Otherwise show the first 12 … the last 12.
      (( $#branch > 32 )) && branch[13,-13]="…"  # <-- this line

      if (( VCS_STATUS_HAS_CONFLICTED)); then
        res+="${conflicted}${(g::)POWERLEVEL9K_VCS_BRANCH_ICON}${branch//\%/%%}"
      else
        if (( VCS_STATUS_HAS_STAGED || VCS_STATUS_HAS_UNSTAGED )); then
          res+="${modified}${(g::)POWERLEVEL9K_VCS_BRANCH_ICON}${branch//\%/%%}"
        else
          if (( VCS_STATUS_HAS_UNTRACKED )); then
            res+="${untracked}${(g::)POWERLEVEL9K_VCS_BRANCH_ICON}${branch//\%/%%}"
          else
            res+="${clean}${(g::)POWERLEVEL9K_VCS_BRANCH_ICON}${branch//\%/%%}"
          fi
        fi
      fi
    fi

    if [[ -n $VCS_STATUS_TAG
          # Show tag only if not on a branch.
          && -z $VCS_STATUS_LOCAL_BRANCH  # <-- this line
        ]]; then
      local tag=${(V)VCS_STATUS_TAG}
      # If tag name is at most 32 characters long, show it in full.
      # Otherwise show the first 12 … the last 12.
      (( $#tag > 32 )) && tag[13,-13]="…"  # <-- this line
      res+="${meta}#${clean}${tag//\%/%%}"
    fi

    # Display the current Git commit if there is no branch and no tag.
    # Tip: To always display the current Git commit, delete the next line.
    [[ -z $VCS_STATUS_LOCAL_BRANCH && -z $VCS_STATUS_TAG ]] &&  # <-- this line
      res+="${meta}@${clean}${VCS_STATUS_COMMIT[1,8]}"

    # Show tracking branch name if it differs from local branch.
    if [[ -n ${VCS_STATUS_REMOTE_BRANCH:#$VCS_STATUS_LOCAL_BRANCH} ]]; then
      res+="${meta}:${clean}${(V)VCS_STATUS_REMOTE_BRANCH//\%/%%}"
    fi

    typeset -g my_git_format=$res
  }

  functions -M my_git_formatter 2>/dev/null

  # Don't count the number of unstaged, untracked and conflicted files in Git repositories with
  # more than this many files in the index. Negative value means infinity.
  #
  # If you are working in Git repositories with tens of millions of files and seeing performance
  # sagging, try setting POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY to a number lower than the output
  # of `git ls-files | wc -l`. Alternatively, add `bash.showDirtyState = false` to the repository's
  # config: `git config bash.showDirtyState false`.
  typeset -g POWERLEVEL9K_VCS_MAX_INDEX_SIZE_DIRTY=-1

  # Don't show Git status in prompt for repositories whose workdir matches this pattern.
  # For example, if set to '~', the Git repository at $HOME/.git will be ignored.
  # Multiple patterns can be combined with '|': '~(|/foo)|/bar/baz/*'.
  typeset -g POWERLEVEL9K_VCS_DISABLED_WORKDIR_PATTERN='~'

  # Disable the default Git status formatting.
  typeset -g POWERLEVEL9K_VCS_DISABLE_GITSTATUS_FORMATTING=true

  # Install our own Git status formatter.
  typeset -g POWERLEVEL9K_VCS_CONTENT_EXPANSION='${$((my_git_formatter(1)))+${my_git_format}}'
  typeset -g POWERLEVEL9K_VCS_LOADING_CONTENT_EXPANSION='${$((my_git_formatter(0)))+${my_git_format}}'

  # Enable counters for staged, unstaged, etc.
  typeset -g POWERLEVEL9K_VCS_{STAGED,UNSTAGED,UNTRACKED,CONFLICTED,COMMITS_AHEAD,COMMITS_BEHIND}_MAX_NUM=-1

  # Icon color.
  typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_COLOR=007
  typeset -g POWERLEVEL9K_VCS_LOADING_VISUAL_IDENTIFIER_COLOR=008

  # Show status of repositories of these types. You can add svn and/or hg if you are
  # using them. If you do, your prompt may become slow even when your current directory
  # isn't in an svn or hg reposotiry.
  typeset -g POWERLEVEL9K_VCS_BACKENDS=(git)

  # These settings are used for repositories other than Git or when gitstatusd fails and
  # Powerlevel10k has to fall back to using vcs_info.
  typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=002
  typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=004
  typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=003

  ##########################[ end git configuration ]###########################

  # Don't wait for Git status even for a millisecond, so that prompt always updates
  # asynchronously when Git state changes.
  typeset -g POWERLEVEL9K_VCS_MAX_SYNC_LATENCY_SECONDS=0

  # Cyan ahead/behind arrows.
  typeset -g POWERLEVEL9K_VCS_{INCOMING,OUTGOING}_CHANGESFORMAT_FOREGROUND=cyan

  # Don't show remote branch, current tag or stashes.
  # typeset -g POWERLEVEL9K_VCS_GIT_HOOKS=(vcs-detect-changes git-untracked git-aheadbehind)

  # When in detached HEAD state, show @commit where branch normally goes.
  typeset -g POWERLEVEL9K_VCS_COMMIT_ICON='@'

  # Don't show staged, unstaged, untracked indicators.
  # typeset -g POWERLEVEL9K_VCS_{STAGED,UNSTAGED,UNTRACKED}_ICON=$'\b'

  # Show '*' when there are staged, unstaged or untracked files.
  typeset -g POWERLEVEL9K_VCS_DIRTY_ICON='*'

  # Show '⇣' if local branch is behind remote.
  typeset -g POWERLEVEL9K_VCS_INCOMING_CHANGES_ICON='⇣'

  # Show '⇡' if local branch is ahead of remote.
  typeset -g POWERLEVEL9K_VCS_OUTGOING_CHANGES_ICON='⇡'

  # Don't show the number of commits next to the ahead/behind arrows.
  typeset -g POWERLEVEL9K_VCS_{COMMITS_AHEAD,COMMITS_BEHIND}_MAX_NUM=1

  # Remove space between '⇣' and '⇡'.
  # typeset -g POWERLEVEL9K_VCS_CONTENT_EXPANSION='${P9K_CONTENT/⇣* ⇡/⇣⇡}'

  # Transient prompt works similarly to the builtin transient_rprompt option. It trims down prompt
  # when accepting a command line. Supported values:
  typeset -g POWERLEVEL9K_TRANSIENT_PROMPT=off

  # Instant prompt mode.
  typeset -g POWERLEVEL9K_INSTANT_PROMPT=verbose

  # Hot reload allows you to change POWERLEVEL9K options after Powerlevel10k has been initialized.
  # For example, you can type POWERLEVEL9K_BACKGROUND=red and see your prompt turn red. Hot reload
  # can slow down prompt by 1-2 milliseconds, so it's better to keep it turned off unless you
  # really need it.
  typeset -g POWERLEVEL9K_DISABLE_HOT_RELOAD=true

  # If p10k is already loaded, reload configuration.
  # This works even with POWERLEVEL9K_DISABLE_HOT_RELOAD=true.
  (( ! $+functions[p10k] )) || p10k reload
}

(( ${#p10k_config_opts} )) && setopt ${p10k_config_opts[@]}
'builtin' 'unset' 'p10k_config_opts'

================
File: modules/shared/default.nix
================
{ config, pkgs, ... }:

let
  emacsOverlaySha256 = "06413w510jmld20i4lik9b36cfafm501864yq8k4vxl5r4hn0j0h";
in
{
  
  services.tailscale = {
    enable = true;
  };
  
  nixpkgs = {
    config = {
      allowUnfree = true;
      allowBroken = true;
      allowInsecure = false;
      allowUnsupportedSystem = true;
    };

    overlays =
      # Apply each overlay found in the /overlays directory
      let path = ../../overlays; in with builtins;
      map (n: import (path + ("/" + n)))
          (filter (n: match ".*\\.nix" n != null ||
                      pathExists (path + ("/" + n + "/default.nix")))
                  (attrNames (readDir path)))

      ++ [(import (builtins.fetchTarball {
               url = "https://github.com/dustinlyons/emacs-overlay/archive/refs/heads/master.tar.gz";
               sha256 = emacsOverlaySha256;
           }))];
  };
}

================
File: modules/shared/files.nix
================
{ pkgs, config, ... }:

# let
#   githubPublicKey = "ssh-ed25519 ...";
#   githubPublicSigningKey = ''
#     -----BEGIN PGP PUBLIC KEY BLOCK-----

#     ...
#     -----END PGP PUBLIC KEY BLOCK-----
#   '';
# in

{

  # ".ssh/id_github.pub" = {
  #   text = githubPublicKey;
  # };

  # ".ssh/pgp_github.pub" = {
  #   text = githubPublicSigningKey;
  # };

  # Initializes Emacs with org-mode so we can tangle the main config
  ".emacs.d/init.el" = {
    text = builtins.readFile ../shared/config/emacs/init.el;
  };
}

================
File: modules/shared/home-manager.nix
================
{ config, pkgs, lib, ... }:

let name = "Ashley Barr";
    user = "lessuseless";
    email = "lessuseless@duck.com"; in
{
  # Shared shell configuration
  zsh = {
    enable = true;
    autocd = false;
    enableCompletion = true;
    cdpath = [ "~/.local/share/src" ];
    plugins = [
      {
          name = "powerlevel10k";
          src = pkgs.zsh-powerlevel10k;
          file = "share/zsh-powerlevel10k/powerlevel10k.zsh-theme";
      }
      {
          name = "powerlevel10k-config";
          src = lib.cleanSource ./config;
          file = "p10k.zsh";
      }
    ];
    initExtraFirst = ''
      if [[ -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ]]; then
        . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
        . /nix/var/nix/profiles/default/etc/profile.d/nix.sh
      fi

      # Define variables for directories
      export PATH=$HOME/.pnpm-packages/bin:$HOME/.pnpm-packages:$PATH
      export PATH=$HOME/.npm-packages/bin:$HOME/bin:$PATH
      export PATH=$HOME/.local/share/bin:$PATH

      # Remove history data we don't want to see
      export HISTIGNORE="pwd:ls:cd"

      # Ripgrep alias
      alias search=rg -p --glob '!node_modules/*'  $@

      # Emacs is my editor
      export ALTERNATE_EDITOR=""
      export EDITOR="emacsclient -t"
      export VISUAL="emacsclient -c -a emacs"

      e() {
          emacsclient -t "$@"
      }

      # nix shortcuts
      shell() {
          nix-shell '<nixpkgs>' -A "$1"
      }

      # pnpm is a javascript package manager
      alias pn=pnpm
      alias px=pnpx

      # Use difftastic, syntax-aware diffing
      alias diff=difft

      # Always color ls and group directories
      alias ls='ls --color=auto'
      
      #############
      # Fabric AI #
      #############

      ## Loop through all files in the ~/.config/fabric/patterns directory
      for pattern_file in $HOME/.config/fabric/patterns/*; do
      
      ## Get the base name of the file (i.e., remove the directory path)
      pattern_name=$(basename "$pattern_file")
  
      ## Create an alias in the form: alias pattern_name="fabric --pattern pattern_name"
      alias_command="alias $pattern_name='fabric --pattern $pattern_name'"
  
      ## Evaluate the alias command to add it to the current shell
      eval "$alias_command"
      done

      yt() {
          local video_link="$1"
          fabric -y "$video_link" --transcript
      }
    '';
  };

  git = {
    enable = true;
    ignores = [ "*.swp" ];
    userName = name;
    userEmail = email;
    lfs = {
      enable = true;
    };
    extraConfig = {
      init.defaultBranch = "main";
      core = {
	    editor = "vim";
        autocrlf = "input";
      };
      commit.gpgsign = true;
      pull.rebase = true;
      rebase.autoStash = true;
    };
  };

  vim = {
    enable = true;
    plugins = with pkgs.vimPlugins; [ vim-airline vim-airline-themes vim-startify vim-tmux-navigator ];
    settings = { ignorecase = true; };
    extraConfig = ''
      "" General
      set number
      set history=1000
      set nocompatible
      set modelines=0
      set encoding=utf-8
      set scrolloff=3
      set showmode
      set showcmd
      set hidden
      set wildmenu
      set wildmode=list:longest
      set cursorline
      set ttyfast
      set nowrap
      set ruler
      set backspace=indent,eol,start
      set laststatus=2
      set clipboard=autoselect

      " Dir stuff
      set nobackup
      set nowritebackup
      set noswapfile
      set backupdir=~/.config/vim/backups
      set directory=~/.config/vim/swap

      " Relative line numbers for easy movement
      set relativenumber
      set rnu

      "" Whitespace rules
      set tabstop=8
      set shiftwidth=2
      set softtabstop=2
      set expandtab

      "" Searching
      set incsearch
      set gdefault

      "" Statusbar
      set nocompatible " Disable vi-compatibility
      set laststatus=2 " Always show the statusline
      let g:airline_theme='bubblegum'
      let g:airline_powerline_fonts = 1

      "" Local keys and such
      let mapleader=","
      let maplocalleader=" "

      "" Change cursor on mode
      :autocmd InsertEnter * set cul
      :autocmd InsertLeave * set nocul

      "" File-type highlighting and configuration
      syntax on
      filetype on
      filetype plugin on
      filetype indent on

      "" Paste from clipboard
      nnoremap <Leader>, "+gP

      "" Copy from clipboard
      xnoremap <Leader>. "+y

      "" Move cursor by display lines when wrapping
      nnoremap j gj
      nnoremap k gk

      "" Map leader-q to quit out of window
      nnoremap <leader>q :q<cr>

      "" Move around split
      nnoremap <C-h> <C-w>h
      nnoremap <C-j> <C-w>j
      nnoremap <C-k> <C-w>k
      nnoremap <C-l> <C-w>l

      "" Easier to yank entire line
      nnoremap Y y$

      "" Move buffers
      nnoremap <tab> :bnext<cr>
      nnoremap <S-tab> :bprev<cr>

      "" Like a boss, sudo AFTER opening the file to write
      cmap w!! w !sudo tee % >/dev/null

      let g:startify_lists = [
        \ { 'type': 'dir',       'header': ['   Current Directory '. getcwd()] },
        \ { 'type': 'sessions',  'header': ['   Sessions']       },
        \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      }
        \ ]

      let g:startify_bookmarks = [
        \ '~/.local/share/src',
        \ ]

      let g:airline_theme='bubblegum'
      let g:airline_powerline_fonts = 1
      '';
     };

  alacritty = {
    enable = true;
    settings = {
      cursor = {
        style = {
          shape = "Block";
        };
      };

      window = {
        opacity = 1.0;
        padding = {
          x = 24;
          y = 24;
        };
        decorations = "full";
        title = "Terminal";
      };

      window.class = {
        instance = "Alacritty";
        general = "Alacritty";
      };

      font = {
        normal = {
          family = "MesloLGS NF";
          style = "Regular";
        };
        size = lib.mkMerge [
          (lib.mkIf pkgs.stdenv.hostPlatform.isLinux 10)
          (lib.mkIf pkgs.stdenv.hostPlatform.isDarwin 14)
        ];
      };

      colors = {
        primary = {
          background = "0x1f2528";
          foreground = "0xc0c5ce";
        };

        normal = {
          black = "0x1f2528";
          red = "0xec5f67";
          green = "0x99c794";
          yellow = "0xfac863";
          blue = "0x6699cc";
          magenta = "0xc594c5";
          cyan = "0x5fb3b3";
          white = "0xc0c5ce";
        };

        bright = {
          black = "0x65737e";
          red = "0xec5f67";
          green = "0x99c794";
          yellow = "0xfac863";
          blue = "0x6699cc";
          magenta = "0xc594c5";
          cyan = "0x5fb3b3";
          white = "0xd8dee9";
        };
      };
    };
  };

  ssh = {
    enable = true;
    includes = [
      (lib.mkIf pkgs.stdenv.hostPlatform.isLinux
        "/home/${user}/.ssh/config_external"
      )
      (lib.mkIf pkgs.stdenv.hostPlatform.isDarwin
        "/Users/${user}/.ssh/config_external"
      )
    ];
    matchBlocks = {
      "github.com" = {
        identitiesOnly = true;
        identityFile = [
          (lib.mkIf pkgs.stdenv.hostPlatform.isLinux
            "/home/${user}/.ssh/id_github"
          )
          (lib.mkIf pkgs.stdenv.hostPlatform.isDarwin
            "/Users/${user}/.ssh/id_github"
          )
        ];
      };
    };
  };

  tmux = {
    enable = true;
    plugins = with pkgs.tmuxPlugins; [
      vim-tmux-navigator
      sensible
      yank
      prefix-highlight
      {
        plugin = power-theme;
        extraConfig = ''
           set -g @tmux_power_theme 'gold'
        '';
      }
      {
        plugin = resurrect; # Used by tmux-continuum

        # Use XDG data directory
        # https://github.com/tmux-plugins/tmux-resurrect/issues/348
        extraConfig = ''
          set -g @resurrect-dir '$HOME/.cache/tmux/resurrect'
          set -g @resurrect-capture-pane-contents 'on'
          set -g @resurrect-pane-contents-area 'visible'
        '';
      }
      {
        plugin = continuum;
        extraConfig = ''
          set -g @continuum-restore 'on'
          set -g @continuum-save-interval '5' # minutes
        '';
      }
    ];
    terminal = "screen-256color";
    prefix = "C-x";
    escapeTime = 10;
    historyLimit = 50000;
    extraConfig = ''
      # Remove Vim mode delays
      set -g focus-events on

      # Enable full mouse support
      set -g mouse on

      # -----------------------------------------------------------------------------
      # Key bindings
      # -----------------------------------------------------------------------------

      # Unbind default keys
      unbind C-b
      unbind '"'
      unbind %

      # Split panes, vertical or horizontal
      bind-key x split-window -v
      bind-key v split-window -h

      # Move around panes with vim-like bindings (h,j,k,l)
      bind-key -n M-k select-pane -U
      bind-key -n M-h select-pane -L
      bind-key -n M-j select-pane -D
      bind-key -n M-l select-pane -R

      # Smart pane switching with awareness of Vim splits.
      # This is copy paste from https://github.com/christoomey/vim-tmux-navigator
      is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
        | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
      bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
      bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
      bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
      bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
      tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
      if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
        "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
      if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
        "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

      bind-key -T copy-mode-vi 'C-h' select-pane -L
      bind-key -T copy-mode-vi 'C-j' select-pane -D
      bind-key -T copy-mode-vi 'C-k' select-pane -U
      bind-key -T copy-mode-vi 'C-l' select-pane -R
      bind-key -T copy-mode-vi 'C-\' select-pane -l
      '';
    };
}

================
File: modules/shared/packages.nix
================
{ pkgs }:

with pkgs; [
  # Automation
  fabric-ai
  #exo
  
  # General packages for development and system management
  alacritty
  aspell
  aspellDicts.en
  bash-completion
  bat
  btop
  coreutils
  killall
  neofetch
  openssh
  sqlite
  wget
  zip
  direnv
  devenv
  warp-terminal

  # Encryption and security tools
  age
  age-plugin-yubikey
  gnupg
  libfido2

  # Cloud-related tools and SDKs
  docker
  docker-compose

  # Media-related packages
  emacs-all-the-icons-fonts
  emacsPackages.exec-path-from-shell
  dejavu_fonts
  ffmpeg
  fd
  font-awesome
  hack-font
  noto-fonts
  noto-fonts-emoji
  meslo-lgs-nf

  # Text and terminal utilities
  htop
  hunspell
  iftop
  jetbrains-mono
  jq
  ripgrep
  tree
  tmux
  unrar
  unzip
  zsh-powerlevel10k
  micromamba
  lazydocker
  # Python Developement Tools 
  
  (python310.withPackages (ps: with ps; [
      # conda
      time-machine
      virtualenv
      #pyobjc
      #mlx
      pip
      # other Python packages...

      # USE DEVENV FOR PROJECT-SPECIFIC ENVS 
    ]))

  # Node.js Developement Tools
  # fzf
  # nodePackages.live-server
  # nodePackages.nodemon
  # nodePackages.prettier
  # nodePackages.npm
  # nodejs

# ...

# Python
##############################################################
#   !!!! Use Devenv for project specific python shells !!!! ##
#  ###########################################################
#  # devenv.nix
#  { pkgs, lib, config, inputs, ... }:
#
#  {
#    languages.python = {
#      enable = true;
#      venv.enable = true;
#      venv.requirements = ''
#        pyside2
#      '';
#  };
#
#  enterShell = ''
#    python -c "import PySide2" && echo "No errors!"
#  '';
#  }
##############################################################

# nodejs
##############################################################
#   !!!! Use Devenv for project specific node shells !!!!   ##
#  ###########################################################
#  # devenv.nix
#  { pkgs, lib, config, inputs, ... }:
#
#  {
#    languages.nodejs = {
#      enable = true;
#      version = "20";  # Specify Node.js version
#      package = pkgs.nodejs_20;
#      # Add global npm packages
#      packages = {
#        typescript = "latest";
#        "@types/node" = "latest";
#        eslint = "latest";
#        prettier = "latest";
#      };
#    };
#
#    enterShell = ''
#      node --version && npm --version && echo "Node.js environment ready!"
#    '';
#  }
##############################################################
]

================
File: modules/shared/README.md
================
## Shared
Much of the code running on MacOS or NixOS is actually found here.

This configuration gets imported by both modules. Some configuration examples include `git`, `zsh`, `vim`, and `tmux`.

## Layout
```
.
├── config             # Config files not written in Nix
├── cachix             # Defines cachix, a global cache for builds
├── default.nix        # Defines how we import overlays 
├── files.nix          # Non-Nix, static configuration files (now immutable!)
├── home-manager.nix   # The goods; most all shared config lives here
├── packages.nix       # List of packages to share

```

================
File: modules/nextdns.nix
================
# hosts/darwin/nextdns.nix
{ config, pkgs, lib, ... }:

{
  options.services.nextdns = {
    enable = lib.mkEnableOption "NextDNS profile installation";
    configId = lib.mkOption {
      type = lib.types.str;
      description = "NextDNS configuration ID";
      example = "abcdef";
    };
  };

  config = lib.mkIf config.services.nextdns.enable {
    system.activationScripts.extraActivation.text = lib.mkAfter ''
      # NextDNS Profile Installation
      echo "Checking NextDNS profile..."
      
      NEXTDNS_CONFIG_ID="${config.services.nextdns.configId}"
      PROFILE_NAME="NextDNS_$NEXTDNS_CONFIG_ID"
      
      # Check if profile is already installed
      if ! /usr/bin/profiles -L | grep -q "$PROFILE_NAME"; then
        echo "Installing NextDNS profile..."
        PROFILE_URL="https://apple.nextdns.io/$NEXTDNS_CONFIG_ID/profile"
        
        # Create a temporary directory for the profile
        TEMP_DIR=$(mktemp -d)
        PROFILE_PATH="$TEMP_DIR/nextdns_profile.mobileconfig"
        
        # Download the profile
        ${pkgs.curl}/bin/curl -sL "$PROFILE_URL" -o "$PROFILE_PATH"
        
        # Install the profile
        echo "Opening NextDNS profile for installation..."
        open "$PROFILE_PATH"
        
        echo "Please complete the NextDNS profile installation in System Settings."
        echo "You may need to approve the profile in System Settings > Privacy & Security."
      else
        echo "NextDNS profile is already installed."
      fi
    '';

    # Optional: Install nextdns CLI tool
    environment.systemPackages = with pkgs; [
      nextdns
    ];
  };
}

================
File: overlays/10-feather-font.nix
================
self: super: with super; {

  feather-font = let
    version = "1.0";
    pname = "feather-font";
  in stdenv.mkDerivation {
    name = "${pname}-${version}";

    src = fetchzip {
      url = "https://github.com/dustinlyons/feather-font/archive/refs/tags/${version}.zip";
      sha256 = "sha256-Zsz8/qn7XAG6BVp4XdqooEqioFRV7bLH0bQkHZvFbsg=";
    };

    buildInputs = [ unzip ];
    phases = [ "unpackPhase" "installPhase" ];

    installPhase = ''
      mkdir -p $out/share/fonts/truetype
      cp $src/feather.ttf $out/share/fonts/truetype/
    '';

    meta = with lib; {
      homepage = "https://www.feathericons.com/";
      description = "Set of font icons from the open source collection Feather Icons";
      license = licenses.mit;
      maintainers = [ maintainers.dlyons ];
      platforms = [ platforms.x86_64-linux platforms.x86_64-darwin ];
    };
  };
}

================
File: overlays/README.md
================
# Overlays

Files in this directory run automatically as part of each build. Some common ways I've used overlays in the past:
* Applying patches
* Downloading different versions of files (locking to a version or trying a fork)
* Workarounds and stuff I need to run temporarily

================
File: .gitignore
================
.DS_Store
/result

================
File: .gitmodules
================
[submodule "hosts/qubes-templatevm"]
	path = hosts/qubes-templatevm
	url = https://github.com/evq/qubes-nixos-template

================
File: flake.lock
================
{
  "nodes": {
    "agenix": {
      "inputs": {
        "darwin": "darwin",
        "home-manager": "home-manager",
        "nixpkgs": "nixpkgs",
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1723293904,
        "narHash": "sha256-b+uqzj+Wa6xgMS9aNbX4I+sXeb5biPDi39VgvSFqFvU=",
        "owner": "ryantm",
        "repo": "agenix",
        "rev": "f6291c5935fdc4e0bef208cfc0dcab7e3f7a1c41",
        "type": "github"
      },
      "original": {
        "owner": "ryantm",
        "repo": "agenix",
        "type": "github"
      }
    },
    "brew-src": {
      "flake": false,
      "locked": {
        "lastModified": 1731323744,
        "narHash": "sha256-SxUQm4cTHcaoPQHoXe26ZV8cZiMWBGow8MjE4L+MckM=",
        "owner": "Homebrew",
        "repo": "brew",
        "rev": "254bf3fe9d8fa2e1b2fb55dbcf535b2d870180c4",
        "type": "github"
      },
      "original": {
        "owner": "Homebrew",
        "ref": "4.4.5",
        "repo": "brew",
        "type": "github"
      }
    },
    "darwin": {
      "inputs": {
        "nixpkgs": [
          "agenix",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1700795494,
        "narHash": "sha256-gzGLZSiOhf155FW7262kdHo2YDeugp3VuIFb4/GGng0=",
        "owner": "lnl7",
        "repo": "nix-darwin",
        "rev": "4b9b83d5a92e8c1fbfd8eb27eda375908c11ec4d",
        "type": "github"
      },
      "original": {
        "owner": "lnl7",
        "ref": "master",
        "repo": "nix-darwin",
        "type": "github"
      }
    },
    "darwin_2": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs-stable"
        ]
      },
      "locked": {
        "lastModified": 1732603785,
        "narHash": "sha256-AEjWTJwOmSnVYsSJCojKgoguGfFfwel6z/6ud6UFMU8=",
        "owner": "LnL7",
        "repo": "nix-darwin",
        "rev": "6ab87b7c84d4ee873e937108c4ff80c015a40c7a",
        "type": "github"
      },
      "original": {
        "owner": "LnL7",
        "ref": "master",
        "repo": "nix-darwin",
        "type": "github"
      }
    },
    "disko": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1732742778,
        "narHash": "sha256-i+Uw8VOHzQe9YdNwKRbzvaPWLE07tYVqUDzSFTXhRgk=",
        "owner": "nix-community",
        "repo": "disko",
        "rev": "341482e2f4d888e3f60cae1c12c3df896e7230d8",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "disko",
        "type": "github"
      }
    },
    "flake-compat": {
      "flake": false,
      "locked": {
        "lastModified": 1696426674,
        "narHash": "sha256-kvjfFW7WAETZlt09AgDn1MrtKzP7t90Vf7vypd3OL1U=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "0f9255e01c2351cc7d116c072cb317785dd33b33",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-utils": {
      "inputs": {
        "systems": "systems_2"
      },
      "locked": {
        "lastModified": 1710146030,
        "narHash": "sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "b1d9ab70662946ef0850d488da1c9019f3a9752a",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "gitignore": {
      "inputs": {
        "nixpkgs": [
          "pre-commit-hooks",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1709087332,
        "narHash": "sha256-HG2cCnktfHsKV0s4XW83gU3F57gaTljL9KNSuG6bnQs=",
        "owner": "hercules-ci",
        "repo": "gitignore.nix",
        "rev": "637db329424fd7e46cf4185293b9cc8c88c95394",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "gitignore.nix",
        "type": "github"
      }
    },
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "agenix",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1703113217,
        "narHash": "sha256-7ulcXOk63TIT2lVDSExj7XzFx09LpdSAPtvgtM7yQPE=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "3bfaacf46133c037bb356193bd2f1765d9dc82c1",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "home-manager_2": {
      "inputs": {
        "nixpkgs": "nixpkgs_2"
      },
      "locked": {
        "lastModified": 1732793095,
        "narHash": "sha256-6TrknJ8CpvSSF4gviQSeD+wyj3siRcMvdBKhOXkEMKU=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "2f7739d01080feb4549524e8f6927669b61c6ee3",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "homebrew-bundle": {
      "flake": false,
      "locked": {
        "lastModified": 1732668479,
        "narHash": "sha256-KZWR96iHkHmGpBMolWAbSMzkJ8XLFNaHwiNPxvjeXe4=",
        "owner": "homebrew",
        "repo": "homebrew-bundle",
        "rev": "1419e23ebf58fdcf9f39db0da78e8026e23c0788",
        "type": "github"
      },
      "original": {
        "owner": "homebrew",
        "repo": "homebrew-bundle",
        "type": "github"
      }
    },
    "homebrew-cask": {
      "flake": false,
      "locked": {
        "lastModified": 1732846834,
        "narHash": "sha256-SH8n1H+mqrkBta7DveRYC6pohq5bUAp1cG9XbEkaB+w=",
        "owner": "homebrew",
        "repo": "homebrew-cask",
        "rev": "1c4e63549a841ee4b798ba6e10452ab32efa5c3b",
        "type": "github"
      },
      "original": {
        "owner": "homebrew",
        "repo": "homebrew-cask",
        "type": "github"
      }
    },
    "homebrew-core": {
      "flake": false,
      "locked": {
        "lastModified": 1732849986,
        "narHash": "sha256-jAwjiDdE3V4+0MVusB64R03TGg0e4qhYYh4KNR/y7qM=",
        "owner": "homebrew",
        "repo": "homebrew-core",
        "rev": "9aacda4834a9f640ca08e871759d72d45ad3139a",
        "type": "github"
      },
      "original": {
        "owner": "homebrew",
        "repo": "homebrew-core",
        "type": "github"
      }
    },
    "homebrew-services": {
      "flake": false,
      "locked": {
        "lastModified": 1732771758,
        "narHash": "sha256-qjT0vr11IMFpu6r0enQlSEieOW081yZ/7HpYqiecqdg=",
        "owner": "homebrew",
        "repo": "homebrew-services",
        "rev": "6a787e670e2a836895b98d569c04e07d479a77c6",
        "type": "github"
      },
      "original": {
        "owner": "homebrew",
        "repo": "homebrew-services",
        "type": "github"
      }
    },
    "nix-darwin": {
      "inputs": {
        "nixpkgs": "nixpkgs_3"
      },
      "locked": {
        "lastModified": 1716329735,
        "narHash": "sha256-ap51w+VqG21vuzyQ04WrhI2YbWHd3UGz0e7dc/QQmoA=",
        "owner": "LnL7",
        "repo": "nix-darwin",
        "rev": "eac4f25028c1975a939c8f8fba95c12f8a25e01c",
        "type": "github"
      },
      "original": {
        "owner": "LnL7",
        "repo": "nix-darwin",
        "type": "github"
      }
    },
    "nix-homebrew": {
      "inputs": {
        "brew-src": "brew-src",
        "flake-utils": "flake-utils",
        "nix-darwin": "nix-darwin",
        "nixpkgs": "nixpkgs_4"
      },
      "locked": {
        "lastModified": 1732145543,
        "narHash": "sha256-VRQh/lvCSko9YV7haXyPt7DSp+EkgjjBv/9U4cY9c50=",
        "owner": "zhaofengli-wip",
        "repo": "nix-homebrew",
        "rev": "ac3945ee614f69ab89c6935b3f0567028de5f012",
        "type": "github"
      },
      "original": {
        "owner": "zhaofengli-wip",
        "repo": "nix-homebrew",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1703013332,
        "narHash": "sha256-+tFNwMvlXLbJZXiMHqYq77z/RfmpfpiI3yjL6o/Zo9M=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "54aac082a4d9bb5bbc5c4e899603abfb76a3f6d6",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-stable": {
      "locked": {
        "lastModified": 1732350895,
        "narHash": "sha256-GcOQbOgmwlsRhpLGSwZJwLbo3pu9ochMETuRSS1xpz4=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "0c582677378f2d9ffcb01490af2f2c678dcb29d3",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-24.11",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-stable_2": {
      "locked": {
        "lastModified": 1730741070,
        "narHash": "sha256-edm8WG19kWozJ/GqyYx2VjW99EdhjKwbY3ZwdlPAAlo=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "d063c1dd113c91ab27959ba540c0d9753409edf3",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-24.05",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_2": {
      "locked": {
        "lastModified": 1732521221,
        "narHash": "sha256-2ThgXBUXAE1oFsVATK1ZX9IjPcS4nKFOAjhPNKuiMn0=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "4633a7c72337ea8fd23a4f2ba3972865e3ec685d",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_3": {
      "locked": {
        "lastModified": 1687274257,
        "narHash": "sha256-TutzPriQcZ8FghDhEolnHcYU2oHIG5XWF+/SUBNnAOE=",
        "path": "/nix/store/22qgs3skscd9bmrxv9xv4q5d4wwm5ppx-source",
        "rev": "2c9ecd1f0400076a4d6b2193ad468ff0a7e7fdc5",
        "type": "path"
      },
      "original": {
        "id": "nixpkgs",
        "type": "indirect"
      }
    },
    "nixpkgs_4": {
      "locked": {
        "lastModified": 1716330097,
        "narHash": "sha256-8BO3B7e3BiyIDsaKA0tY8O88rClYRTjvAp66y+VBUeU=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "5710852ba686cc1fd0d3b8e22b3117d43ba374c2",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_5": {
      "locked": {
        "lastModified": 1732521221,
        "narHash": "sha256-2ThgXBUXAE1oFsVATK1ZX9IjPcS4nKFOAjhPNKuiMn0=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "4633a7c72337ea8fd23a4f2ba3972865e3ec685d",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "pre-commit-hooks": {
      "inputs": {
        "flake-compat": "flake-compat",
        "gitignore": "gitignore",
        "nixpkgs": [
          "nixpkgs"
        ],
        "nixpkgs-stable": "nixpkgs-stable_2"
      },
      "locked": {
        "lastModified": 1732021966,
        "narHash": "sha256-mnTbjpdqF0luOkou8ZFi2asa1N3AA2CchR/RqCNmsGE=",
        "owner": "cachix",
        "repo": "pre-commit-hooks.nix",
        "rev": "3308484d1a443fc5bc92012435d79e80458fe43c",
        "type": "github"
      },
      "original": {
        "owner": "cachix",
        "repo": "pre-commit-hooks.nix",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "agenix": "agenix",
        "darwin": "darwin_2",
        "disko": "disko",
        "home-manager": "home-manager_2",
        "homebrew-bundle": "homebrew-bundle",
        "homebrew-cask": "homebrew-cask",
        "homebrew-core": "homebrew-core",
        "homebrew-services": "homebrew-services",
        "nix-homebrew": "nix-homebrew",
        "nixpkgs": "nixpkgs_5",
        "nixpkgs-stable": "nixpkgs-stable",
        "pre-commit-hooks": "pre-commit-hooks",
        "secrets": "secrets"
      }
    },
    "secrets": {
      "flake": false,
      "locked": {
        "lastModified": 1732491081,
        "narHash": "sha256-vqa32e7gBheEIVwfWMdEIPvhsXmJ79U8B+5ONzOYds4=",
        "ref": "main",
        "rev": "96b24d0b786e526204e4f3791d49e19e86c91322",
        "revCount": 7,
        "type": "git",
        "url": "ssh://git@github.com/lessuselesss/nix-secrets.git"
      },
      "original": {
        "ref": "main",
        "type": "git",
        "url": "ssh://git@github.com/lessuselesss/nix-secrets.git"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_2": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}

================
File: flake.nix
================
{
  description = "Starter Configuration with secrets for MacOS and NixOS";
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    nixpkgs-stable.url = "github:NixOS/nixpkgs/nixos-24.11";
    agenix.url = "github:ryantm/agenix";
    home-manager.url = "github:nix-community/home-manager";
    darwin = {
      url = "github:LnL7/nix-darwin/master";
      inputs.nixpkgs.follows = "nixpkgs-stable";
    };
    nix-homebrew = {
      url = "github:zhaofengli-wip/nix-homebrew";
    };
    homebrew-bundle = {
      url = "github:homebrew/homebrew-bundle";
      flake = false;
    };
    homebrew-core = {
      url = "github:homebrew/homebrew-core";
      flake = false;
    };
    homebrew-cask = {
      url = "github:homebrew/homebrew-cask";
      flake = false;
    }; 
    homebrew-services.url = "github:homebrew/homebrew-services";
    homebrew-services.flake = false;
    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    secrets = {
      url = "git+ssh://git@github.com/lessuselesss/nix-secrets.git?ref=main";
      flake = false;
    };
    pre-commit-hooks = {
      url = "github:cachix/pre-commit-hooks.nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };
  outputs = { self, darwin, nix-homebrew, homebrew-bundle, homebrew-core, homebrew-cask, homebrew-services, home-manager, nixpkgs, nixpkgs-stable, disko, agenix, secrets, pre-commit-hooks } @inputs:
    let
      user = "lessuseless";
      linuxSystems = [ "x86_64-linux" "aarch64-linux" ];
      darwinSystems = [ "aarch64-darwin" "x86_64-darwin" ];
      forAllSystems = f: nixpkgs.lib.genAttrs (linuxSystems ++ darwinSystems) f;
            devShell = system: let 
        pkgs = nixpkgs.legacyPackages.${system};
        mkPreCommitHook = {
          pre-commit-check = pre-commit-hooks.lib.${system}.run {
            src = ./.;
            hooks = {
              repomix-generator = {
                enable = true;
                name = "repomix-generator";
                entry = "${pkgs.writeShellScript "generate-repomix" ''
                  ${pkgs.nodejs}/bin/node ${pkgs.nodePackages.npm}/bin/npx repomix .
                  git add repomix-output.txt
                ''}";
                files = ".*";
                pass_filenames = false;
              };
            };
          };
        };
      in {
        default = with pkgs; mkShell {
          nativeBuildInputs = with pkgs; [ 
            bashInteractive 
            git 
            age 
            age-plugin-yubikey 
            nodejs
            nodePackages.npm
          ];
          shellHook = ''
            ${mkPreCommitHook.pre-commit-check.shellHook}
            export EDITOR=vim
          '';
        };
      };
      mkApp = scriptName: system: {
        type = "app";
        program = "${(nixpkgs.legacyPackages.${system}.writeScriptBin scriptName ''
          #!/usr/bin/env bash
          PATH=${nixpkgs.legacyPackages.${system}.git}/bin:$PATH
          echo "Running ${scriptName} for ${system}"
          exec ${self}/apps/${system}/${scriptName}
        '')}/bin/${scriptName}";
      };
      mkLinuxApps = system: {
        "apply" = mkApp "apply" system;
        "build-switch" = mkApp "build-switch" system;
        "copy-keys" = mkApp "copy-keys" system;
        "create-keys" = mkApp "create-keys" system;
        "check-keys" = mkApp "check-keys" system;
        "install" = mkApp "install" system;
        "install-with-secrets" = mkApp "install-with-secrets" system;
      };
      mkDarwinApps = system: {
        "apply" = mkApp "apply" system;
        "build" = mkApp "build" system;
        "build-switch" = mkApp "build-switch" system;
        "copy-keys" = mkApp "copy-keys" system;
        "create-keys" = mkApp "create-keys" system;
        "check-keys" = mkApp "check-keys" system;
        "rollback" = mkApp "rollback" system;
      };
    in
    {
      devShells = forAllSystems devShell;
      apps = nixpkgs.lib.genAttrs linuxSystems mkLinuxApps // nixpkgs.lib.genAttrs darwinSystems mkDarwinApps;

      checks = forAllSystems (system: let
        pkgs = nixpkgs.legacyPackages.${system};
      in {
        pre-commit-check = pre-commit-hooks.lib.${system}.run {
          src = ./.;
          hooks = {
            repomix-generator = {
              enable = true;
              name = "repomix-generator";
              entry = "${pkgs.writeShellScript "generate-repomix" ''
                ${pkgs.nodejs}/bin/node ${pkgs.nodePackages.npm}/bin/npx repomix .
                git add repomix-output.txt
              ''}";
              files = ".*";
              pass_filenames = false;
            };
          };
        };
      });

      darwinConfigurations = nixpkgs.lib.genAttrs darwinSystems (system:
        darwin.lib.darwinSystem {
          inherit system;
          specialArgs = inputs;
          modules = [
            home-manager.darwinModules.home-manager
            nix-homebrew.darwinModules.nix-homebrew
            {
              nix-homebrew = {
                inherit user;
                enable = true;
                taps = {
                  "homebrew/homebrew-core" = homebrew-core;
                  "homebrew/homebrew-cask" = homebrew-cask;
                  "homebrew/homebrew-bundle" = homebrew-bundle;
                  "homebrew/homebrew-services" = homebrew-services;
                };
                mutableTaps = false;
                autoMigrate = true;
              };
            }
            ./hosts/darwin
          ];
        }
      );

      nixosConfigurations = nixpkgs.lib.genAttrs linuxSystems (system: nixpkgs.lib.nixosSystem {
        inherit system;
        specialArgs = inputs;
        modules = [
          disko.nixosModules.disko
          home-manager.nixosModules.home-manager {
            home-manager = {
              useGlobalPkgs = true;
              useUserPackages = true;
              users.${user} = import ./modules/nixos/home-manager.nix;
            };
          }
          ./hosts/nixos
        ];
     });
  };
}

================
File: pre-commit-test.txt
================
# This is to see if the pre-commit hook works, it should be added repomix-output.txt in the root directory.

================
File: README.md
================
# nixos-config
NixOS, nix-darwin (macOS), Nix-on-Droid (Android), and qubesos-template (QubesOS) configuration using Flakes

## Prerequisites

- For macOS: A clean macOS installation
- For NixOS: A fresh NixOS installation
- Git
- SSH keys for accessing private repositories (optional)

## Quick Start (macOS)

For automated setup, use the provided script:

```bash
chmod +x setup_script.sh
./setup_script.sh
```

## Manual Setup

### 1. Install Nix
Install Nix using the determinate systems installer:
```bash
curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install
```

### 2. Clone the Repository
```bash
git clone https://github.com/your-username/nixos-config.git
cd nixos-config
```

### 3. Development Environment
This repository uses pre-commit hooks to maintain consistency and generate IDE helper files. To set up the development environment:

```bash
nix develop
```

This will:
- Set up the pre-commit hooks
- Generate the `repomix-output.txt` file for Cursor IDE integration
- Provide necessary development tools (age, yubikey support, etc.)

### 4. Configuration Steps

#### For macOS:
1. Build the initial configuration:
```bash
nix run .#build
```

2. Apply the configuration:
```bash
nix run .#build-switch
```

3. If using secrets:
```bash
# Generate new keys
nix run .#create-keys

# Verify keys are properly set up
nix run .#check-keys

# Apply secrets configuration
nix run .#apply
```

#### For NixOS:
1. Apply the configuration:
```bash
nix run .#apply
```

2. Build and switch to the new configuration:
```bash
nix run .#build-switch
```

## Development Workflow

1. Always use `nix develop` when making changes to ensure pre-commit hooks are active

2. The pre-commit hooks will:
   - Automatically generate `repomix-output.txt` for  streamlined Cursor IDE integration
   - Stage the generated file for commit

3. Available development commands:
   - `nix run .#build` - Build configuration
   - `nix run .#build-switch` - Build and activate configuration
   - `nix run .#rollback` - Rollback to previous configuration (macOS only)

## Repository Structure

```
├── apps/                   # Platform-specific scripts
├── hosts/                  # Host-specific configurations
│   ├── darwin/             # macOS configurations
│   ├── nix-on-droid/       # Android configurations
│   ├── nixos/              # NixOS configurations
│   └── qubes-templatevm/   # QubesOS template configurations
├── modules/                # Shared configuration modules
├── flake.nix               # Main flake configuration
└── flake.lock              # Locked dependencies
```

## Secrets Management

This configuration uses `agenix` for secrets management. To work with secrets:

1. Ensure you have the necessary keys in `~/.ssh/`
2. Use `nix run .#create-keys` to generate new keys
3. Use `nix run .#check-keys` to verify key setup
4. Use `nix run .#apply` to apply secrets configuration

## Contributing

1. Fork the repository
2. Create a new branch for your changes
3. Use `nix develop` to set up the development environment
4. Make your changes
5. Commit and push your changes
6. Submit a pull request

## Troubleshooting

If you encounter issues:

1. Ensure Nix is properly installed: `nix --version`
2. Verify you're in a `nix develop` shell when making changes
3. Check system logs: `darwin-rebuild changelog` (macOS) or `journalctl` (NixOS)
4. For rollback on macOS: `nix run .#rollback`

================
File: setup_script.sh
================
#!/usr/bin/env bash

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored messages
_print() {
    echo -e "${2:-$GREEN}$1${NC}"
}

# Function to prompt user for input
_prompt() {
    local message="$1"
    local variable="$2"
    local default="$3"
    
    _print "$message" "$YELLOW"
    read -r response
    
    # Use default if response is empty and default is provided
    if [[ -z "$response" && -n "$default" ]]; then
        eval "$variable='$default'"
    else
        eval "$variable='$response'"
    fi
}

# Function to check command success
_check() {
    if [ $? -ne 0 ]; then
        _print "Error: $1" "$RED"
        exit 1
    fi
}

# Function to check if command exists
_command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to ensure admin privileges
ensure_admin() {
    if ! sudo -v; then
        _print "This script requires sudo privileges." "$RED"
        exit 1
    fi
    
    # Keep sudo alive
    (while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done) 2>/dev/null &
}

# Function to setup SSH directory
setup_ssh_dir() {
    local user="$1"
    local dir="/Users/$user/.ssh"
    
    if [ ! -d "$dir" ]; then
        sudo mkdir -p "$dir"
        sudo chmod 700 "$dir"
        sudo chown "$user:staff" "$dir"
    fi
}

# Function to install Nix
install_nix() {
    if [ ! -d "/nix" ]; then
        _print "Installing Nix..."
        curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install --no-confirm
        _check "Failed to install Nix"
        
        # Source nix
        if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
            . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
        fi
    else
        _print "Nix is already installed"
    fi
}

# Main setup function
main() {
    _print "Starting NixOS/nix-darwin setup..."
    
    # Ensure we're on macOS
    if [[ "$(uname)" != "Darwin" ]]; then
        _print "This script is intended for macOS only." "$RED"
        exit 1
    }
    
    # Ensure admin privileges
    ensure_admin
    
    # Install Xcode Command Line Tools if needed
    if ! _command_exists xcode-select; then
        _print "Installing Xcode Command Line Tools..."
        xcode-select --install
        _check "Failed to install Xcode Command Line Tools"
    fi
    
    # Install Nix
    install_nix
    
    # Setup Git credentials if needed
    if ! _command_exists git; then
        _print "Installing Git via Nix..."
        nix-env -iA nixpkgs.git
        _check "Failed to install Git"
    fi
    
    # Prompt for Git configuration if not set
    if [[ -z "$(git config --global user.name)" ]]; then
        _prompt "Enter your Git name:" GIT_NAME
        git config --global user.name "$GIT_NAME"
    fi
    
    if [[ -z "$(git config --global user.email)" ]]; then
        _prompt "Enter your Git email:" GIT_EMAIL
        git config --global user.email "$GIT_EMAIL"
    fi
    
    # Setup GitHub CLI
    if ! _command_exists gh; then
        _print "Installing GitHub CLI via Nix..."
        nix-env -iA nixpkgs.gh
        _check "Failed to install GitHub CLI"
        
        _print "Please authenticate with GitHub..."
        gh auth login
        gh auth setup-git
    fi
    
    # Clone repository
    _prompt "Enter the repository URL:" REPO_URL "https://github.com/dustinlyons/nixos-config.git"
    
    if [ ! -d "$(basename "$REPO_URL" .git)" ]; then
        git clone "$REPO_URL"
        _check "Failed to clone repository"
    fi
    
    cd "$(basename "$REPO_URL" .git)" || exit 1
    
    # Make apps executable
    _print "Making apps executable..."
    ARCH=$(uname -m | sed 's/arm64/aarch64/')
    find "apps/${ARCH}-darwin" -type f \( -name apply -o -name build -o -name build-switch -o -name create-keys -o -name copy-keys -o -name check-keys \) -exec chmod +x {} \;
    _check "Failed to make apps executable"
    
    # Run the configuration steps
    _print "Running configuration steps..."
    
    nix run .#create-keys
    _check "Failed to create keys"
    
    nix run .#apply
    _check "Failed to apply configuration"
    
    nix run .#build
    _check "Failed to build configuration"
    
    _print "Would you like to switch to the new configuration now? [Y/n]" "$YELLOW"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]] || [[ -z "$response" ]]; then
        nix run .#build-switch
        _check "Failed to switch configuration"
    fi
    
    _print "Setup completed successfully! Please restart your computer for all changes to take effect."
}

# Run main function
main "$@"
