#!/usr/bin/env bash
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

username=${USER}
export SSH_DIR=/Users/${username}/.ssh

setup_ssh_directory() {
  mkdir -p ${SSH_DIR}
}

prompt_for_key_generation() {
  local key_name=$1
  if [[ -f "${SSH_DIR}/${key_name}" ]]; then
    echo -e "${RED}Existing SSH key found for ${key_name}.${NC}"
    cat "${SSH_DIR}/${key_name}.pub"
    read -p "Do you want to replace it? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      return 0 # Indicate key should be replaced
    else
      return 1 # Indicate key should be kept
    fi
  fi
  return 0 # Indicate no key exists, so it should be created
}

generate_key() {
  local key_name=$1
  if prompt_for_key_generation "$key_name"; then
    ssh-keygen -t ed25519 -f "${SSH_DIR}/${key_name}" -N ""
    chown ${username}:staff "${SSH_DIR}/${key_name}"{,.pub}
  else
    echo -e "${GREEN}Kept existing ${key_name}.${NC}"
  fi
}

generate_gpg_key() {
  local key_file="${SSH_DIR}/pgp_github.key"
  if [[ -f "$key_file" ]]; then
    echo -e "${RED}Existing GPG key found.${NC}"
    read -p "Do you want to replace it? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo -e "${GREEN}Kept existing GPG key.${NC}"
      return
    fi
  fi

  # Generate GPG key with no passphrase
  gpg --batch --gen-key <<EOF
Key-Type: RSA
Key-Length: 4096
Name-Real: ${username}
Name-Email: ${username}@github.com
Expire-Date: 0
%no-protection
%commit
EOF

  # Export the latest key to the file
  local key_id=$(gpg --list-secret-keys --keyid-format LONG | grep sec | tail -1 | cut -d'/' -f2 | cut -d' ' -f1)
  gpg --export-secret-key --armor "$key_id" > "$key_file"
  chown ${username}:staff "$key_file"
  echo -e "${GREEN}GPG key generated and exported to ${key_file}${NC}"
  echo -e "${GREEN}GPG key ID: ${key_id}${NC}"
}

setup_ssh_directory
generate_key "id_github"
generate_gpg_key

echo -e "${GREEN}Key setup complete.${NC}"
echo -e "${GREEN}Remember to add the public keys to Github and update your flake configuration.${NC}"
