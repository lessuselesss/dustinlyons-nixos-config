#!/usr/bin/env bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Determine the operating system
export OS=$(uname)

# Primary network interface handling
if [[ "$OS" == "Linux" ]]; then
  if command -v ip >/dev/null 2>&1; then
    export PRIMARY_IFACE=$(ip -o -4 route show to default | awk '{print $5}')
    echo -e "${GREEN}Found primary network interface $PRIMARY_IFACE${NC}"
  fi
fi

# Skip network interface handling for Android
export PRIMARY_IFACE=""

# Skip hostname and disk selection for Android
export HOST_NAME="nix-on-droid"
export BOOT_DISK=""

# ... existing _print and _prompt functions ...

ask_for_star() {
  _print "${YELLOW}Would you like to support my work by starring my GitHub repo? yes/no [yes]: ${NC}"
  local response
  read -r response
  response=${response:-yes}
  if [[ "$response" =~ ^[Yy](es)?$ ]] || [[ -z "$response" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      open "https://github.com/dustinlyons/nixos-config"
    elif [[ "$OS" == "Linux" ]] && [[ -n "$TERMUX_VERSION" ]]; then
      termux-open-url "https://github.com/dustinlyons/nixos-config"
    elif [[ "$OS" == "Linux" ]]; then
      xdg-open "https://github.com/dustinlyons/nixos-config"
    fi
  fi
}

# Check if git is available
if command -v git >/dev/null 2>&1; then
  # Fetch email and name from git config
  export GIT_EMAIL=$(git config --get user.email)
  export GIT_NAME=$(git config --get user.name)
else
  _print "${RED}Git is not available on this system.${NC}"
fi

# If git email is not found or git is not available, ask the user
if [[ -z "$GIT_EMAIL" ]]; then
  _prompt "${YELLOW}Please enter your email: ${NC}" GIT_EMAIL
fi

# If git name is not found or git is not available, ask the user
if [[ -z "$GIT_NAME" ]]; then
  _prompt "${YELLOW}Please enter your name: ${NC}" GIT_NAME
fi

if [[ -z "$GITHUB_USER" ]]; then
  _prompt "${YELLOW}Please enter your Github username: ${NC}" GITHUB_USER
fi

if [[ -z "$GITHUB_SECRETS_REPO" ]]; then
  _prompt "${YELLOW}Please enter your Github secrets repository name: ${NC}" GITHUB_SECRETS_REPO
fi

export GITHUB_USER
export GITHUB_SECRETS_REPO

select_boot_disk() {
  # Skip disk selection on Android
  if [[ -n "$TERMUX_VERSION" ]]; then
    return
  fi
  
  # Original disk selection code for other Linux systems
  local disks
  local _boot_disk
  // ... rest of existing function ...
}

# Confirmation step
confirm_details() {
  _print "${GREEN}Username: $USERNAME"
  _print "Email: $GIT_EMAIL"
  _print "Name: $GIT_NAME${NC}"
  _print "${GREEN}Secrets repository: $GITHUB_USER/$GITHUB_SECRETS_REPO${NC}"

  _prompt "${YELLOW}Is this correct? yes/no: ${NC}" choice

  case "$choice" in
    [Nn] | [Nn][Oo] ) 
      _print "${RED}Exiting script.${NC}" 
      exit 1
      ;;
    [Yy] | [Yy][Ee][Ss] ) 
      _print "${GREEN}Continuing...${NC}"
      ;;
    * ) 
      _print "${RED}Invalid option. Exiting script.${NC}" 
      exit 1
      ;;
  esac
}

# Call the confirmation function
confirm_details

# Function to replace tokens in each file
replace_tokens() {
  local file="$1"
  if [[ $(basename $1) != "apply" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      # macOS
      LC_ALL=C LANG=C sed -i '' -e "s/%USER%/$USERNAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%NAME%/$GIT_NAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%GITHUB_USER%/$GITHUB_USER/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%GITHUB_SECRETS_REPO%/$GITHUB_SECRETS_REPO/g" "$file"
    else
      # Linux or other
      sed -i -e "s/%USER%/$USERNAME/g" "$file"
      sed -i -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      sed -i -e "s/%NAME%/$GIT_NAME/g" "$file"
      sed -i -e "s/%INTERFACE%/$PRIMARY_IFACE/g" "$file"
      sed -i -e "s/%DISK%/$BOOT_DISK/g" "$file"
      sed -i -e "s/%HOST%/$HOST_NAME/g" "$file"
      sed -i -e "s/%GITHUB_USER%/$GITHUB_USER/g" "$file"
      sed -i -e "s/%GITHUB_SECRETS_REPO%/$GITHUB_SECRETS_REPO/g" "$file"
    fi
  fi
}

# Traverse directories and call replace_tokens on each Nix file
export -f replace_tokens
find . -type f -exec bash -c 'replace_tokens "$0"' {} \;

echo "$USERNAME" > /tmp/username.txt
_print "${GREEN}User $USERNAME information applied.${NC}"
