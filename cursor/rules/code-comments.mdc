---
description: 
globs: *.nix
alwaysApply: false
---

# Here is a guide on commenting Nix code, incorporating inline comments and alternative settings as requested. 

This style guide applies to any Nix, NixOS, nix-darwin, or nix project—whether it’s a package definition, NixOS configuration, flake, or custom script and especially, the code repo this instruction is found in.

It combines the very necessary high-level conversational tone for context/framing, drills down into more explicit explanation of what the code does, and provides helpful alternative examples, by

1. Utilizing "code blocks" above any code or logic encountered
2. Inserting explicit inline comments for defined options and settings 
3. Provide valid alternate settings or examples underneath defined code/logic. 

# Guidelines

**Block Comments (Above the Code)**:  

- Use the "What, Does, Why" framework/tuple when explaining code in block comments.  
- Keep lines under 70 characters for readability.  
- Add blank lines to separate unrelated code visually.  

**Inline Comments (Within the Code)**:  

- Use `#`a to add comments on the same line as the code.
- Explicitly state what the logic does in the live context of the repository.
- Focus on clarifying complex or non-obvious behavior tied to the project’s current state.

**Alternative Settings (For Simple Logic)**:
- For one-liners or boolean settings, include commented-out alternatives below the live code.
- Briefly explain why the current setting is used or what the alternatives would do.
- This approach ensures the code is self-documenting, practical, and tailored to its specific repository.


# Examples with Inline Comments and Alternatives

Below are examples across different Nix use cases, showing how to apply these guidelines.

# 1. Package Definition (Building Software)

```nix
# Here we define a Nix package for our 'hello' program.
# It instructs Nix to build 'hello' from source and 
# ensures 'hello' is installable consistently here.
{ stdenv, fetchurl }:
stdenv.mkDerivation {
  name = "hello-2.10";  # Names this package 'hello' at version 2.10 in our repo

  # The following section specifies the source code to fetch, 
  # from where, and the method to fetch it with. So here we
  # are going to download the 'hello' tarball for building.
  # Nix needs this exact source, along with signatures to
  # ensure its level of for reproducibility.
  src = fetchurl {
    url = "https://ftp.gnu.org/gnu/hello/hello-2.10.tar.gz";  # Fetches this specific tarball in our build
    sha256 = "sha256-abc123...";  # Verifies this tarball matches our expected hash
  };

  buildInputs = [];  # Declares no extra dependencies are needed for this 'hello' build

  # Alternative settings (commented out)
  # buildInputs = [ pkg-config ];  # Adds pkg-config if this 'hello' needed it
}
```
- Block Comments: Introduce the package and src attribute with purpose and context.
- Inline Comments: Explain name as naming this repo’s package, url as fetching our specific tarball, sha256 as verifying it, and buildInputs as empty for this build.
- Alternatives: Show how to add pkg-config if the repo’s needs change.

# 2. NixOS Configuration (System Settings)

```nix
# What: Configures system settings for this NixOS machine.
# Does: Installs Vim and enables SSH server.
# Why: Sets up editing and remote access for our setup.
{ config, pkgs, ... }: {
  # What: Lists packages available to all users.
  # Does: Installs Vim system-wide.
  # Why: Ensures Vim is usable by everyone here.
  environment.systemPackages = with pkgs; [ vim ];  # Adds Vim to this system’s package list

  # What: Controls the SSH server service.
  # Does: Enables SSHd for remote access.
  # Why: Allows managing this machine remotely.
  services.sshd.enable = true;  # Activates SSH server on boot for this NixOS instance

  # Alternative settings (commented out)
  # services.sshd.enable = false;  # Disables SSH server if we don’t need remote access
  # services.openssh.enable = true;  # Switches to OpenSSH service for this system
}
```

- Block Comments: Provide overview and purpose for the config and its attributes.
- Inline Comments: Detail environment.systemPackages as adding Vim to this system and services.sshd.enable as enabling SSH for this instance.
- Alternatives: Offer options to disable SSH or switch to OpenSSH based on this repo’s potential needs.

# 3. Flake (Reproducible Setup)

```nix
# What: Defines inputs for this Nix flake.
# Does: Specifies external dependencies.
# Why: Locks versions for reproducibility in our project.
inputs = {
  # What: Sets the nixpkgs source for packages.
  # Does: Points to a specific nixpkgs repo.
  # Why: Ensures consistent packages for this flake.
  nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";  # Uses unstable branch for this project’s packages

  # Alternative settings (commented out)
  # nixpkgs.url = "github:NixOS/nixpkgs/nixos-23.05";  # Switches to stable 23.05 for this flake
};
```
- Block Comments: Explain the inputs section and nixpkgs attribute’s role.
- Inline Comments: Clarify that nixpkgs.url uses the unstable branch for this project’s package set.
- Alternatives: Show how to use a stable release instead, relevant to this flake.

# 4. Custom Script (Simple Logic)

```nix
# What: A simple Nix script with a variable.
# Does: Defines and outputs a greeting.
# Why: Demonstrates variable use in this repo.
let
  greeting = "Hello, Nix!";  # Sets this script’s greeting message to "Hello, Nix!"
in
  # What: Outputs the script’s result.
  # Does: Returns the greeting string.
  # Why: This is the script’s main output.
  greeting  # Evaluates to "Hello, Nix!" in this script’s execution

  # Alternative settings (commented out)
  # "Hello, World!"  # Changes this script’s output to "Hello, World!"
```

- Block Comments: Describe the script and its main expression.
- Inline Comments: Specify that greeting sets this script’s message and the output returns it.
- Alternatives: Suggest a different output string for this script.

# Why This Approach Works

- Live Context: Inline comments tie explanations directly to the repository’s current state (e.g., "this system," "this project").
- Clarity: Block comments give the big picture, while inline comments detail the specifics.
- Adaptability: Commented-out alternatives make it easy to modify simple settings with context.
- Readability: Consistent structure and concise comments enhance understanding.
- Use this method in your Nix code to make it clear, repository-specific, and easy to tweak!